
plantilla-ici-debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008b34  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  08008b34  08008b34  00018b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000062c  200000c0  08008b3c  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000006bc  200006f0  08009170  000206f0  2**3
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000206ec  2**0
                  CONTENTS, READONLY
  5 .comment      0000007c  00000000  00000000  00020714  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004ef17  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000a4b8  00000000  00000000  0006f6a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000138b3  00000000  00000000  00079b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001c08  00000000  00000000  0008d418  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001f58  00000000  00000000  0008f020  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000106e9  00000000  00000000  00090f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000dcb7  00000000  00000000  000a1661  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00005660  00000000  00000000  000af318  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 40 00 20 ed 40 00 08 41 41 00 08 41 41 00 08     .@. .@..AA..AA..
	...
 800002c:	41 41 00 08 00 00 00 00 00 00 00 00 41 41 00 08     AA..........AA..
 800003c:	41 41 00 08 41 41 00 08 00 00 00 00 41 41 00 08     AA..AA......AA..
 800004c:	41 41 00 08 41 41 00 08 41 41 00 08 41 41 00 08     AA..AA..AA..AA..
 800005c:	41 41 00 08 00 00 00 00 41 41 00 08 41 41 00 08     AA......AA..AA..
 800006c:	41 41 00 08 41 41 00 08 41 41 00 08 41 41 00 08     AA..AA..AA..AA..
 800007c:	00 00 00 00 41 41 00 08 41 41 00 08 41 41 00 08     ....AA..AA..AA..
 800008c:	41 41 00 08 41 41 00 08 41 41 00 08 41 41 00 08     AA..AA..AA..AA..
 800009c:	41 41 00 08 41 41 00 08 41 41 00 08 41 41 00 08     AA..AA..AA..AA..
 80000ac:	41 41 00 08 41 41 00 08 41 41 00 08 00 00 00 00     AA..AA..AA......
 80000bc:	41 41 00 08                                         AA..

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200006f0 	.word	0x200006f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008240 	.word	0x08008240

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200006f4 	.word	0x200006f4
 8000104:	08008240 	.word	0x08008240

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 ffcd 	bl	80013c8 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 ff27 	bl	800128c <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ffbf 	bl	80013c8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ffb5 	bl	80013c8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff47 	bl	8001300 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff3d 	bl	8001300 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	1c08      	adds	r0, r1, #0
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 fb41 	bl	8000b24 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 fad3 	bl	8000a58 <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb33 	bl	8000b24 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb29 	bl	8000b24 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fadf 	bl	8000aa4 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fad5 	bl	8000aa4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_uldivmod>:
 8000508:	2b00      	cmp	r3, #0
 800050a:	d111      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d10f      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 8000510:	2900      	cmp	r1, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_uldivmod+0xe>
 8000514:	2800      	cmp	r0, #0
 8000516:	d002      	beq.n	800051e <__aeabi_uldivmod+0x16>
 8000518:	2100      	movs	r1, #0
 800051a:	43c9      	mvns	r1, r1
 800051c:	1c08      	adds	r0, r1, #0
 800051e:	b407      	push	{r0, r1, r2}
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <__aeabi_uldivmod+0x24>)
 8000522:	a102      	add	r1, pc, #8	; (adr r1, 800052c <__aeabi_uldivmod+0x24>)
 8000524:	1840      	adds	r0, r0, r1
 8000526:	9002      	str	r0, [sp, #8]
 8000528:	bd03      	pop	{r0, r1, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	fffffee9 	.word	0xfffffee9
 8000530:	b403      	push	{r0, r1}
 8000532:	4668      	mov	r0, sp
 8000534:	b501      	push	{r0, lr}
 8000536:	9802      	ldr	r0, [sp, #8]
 8000538:	f000 f886 	bl	8000648 <__udivmoddi4>
 800053c:	9b01      	ldr	r3, [sp, #4]
 800053e:	469e      	mov	lr, r3
 8000540:	b002      	add	sp, #8
 8000542:	bc0c      	pop	{r2, r3}
 8000544:	4770      	bx	lr
 8000546:	46c0      	nop			; (mov r8, r8)

08000548 <__aeabi_lmul>:
 8000548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054a:	46ce      	mov	lr, r9
 800054c:	4647      	mov	r7, r8
 800054e:	0415      	lsls	r5, r2, #16
 8000550:	0c2d      	lsrs	r5, r5, #16
 8000552:	002e      	movs	r6, r5
 8000554:	b580      	push	{r7, lr}
 8000556:	0407      	lsls	r7, r0, #16
 8000558:	0c14      	lsrs	r4, r2, #16
 800055a:	0c3f      	lsrs	r7, r7, #16
 800055c:	4699      	mov	r9, r3
 800055e:	0c03      	lsrs	r3, r0, #16
 8000560:	437e      	muls	r6, r7
 8000562:	435d      	muls	r5, r3
 8000564:	4367      	muls	r7, r4
 8000566:	4363      	muls	r3, r4
 8000568:	197f      	adds	r7, r7, r5
 800056a:	0c34      	lsrs	r4, r6, #16
 800056c:	19e4      	adds	r4, r4, r7
 800056e:	469c      	mov	ip, r3
 8000570:	42a5      	cmp	r5, r4
 8000572:	d903      	bls.n	800057c <__aeabi_lmul+0x34>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	025b      	lsls	r3, r3, #9
 8000578:	4698      	mov	r8, r3
 800057a:	44c4      	add	ip, r8
 800057c:	464b      	mov	r3, r9
 800057e:	4351      	muls	r1, r2
 8000580:	4343      	muls	r3, r0
 8000582:	0436      	lsls	r6, r6, #16
 8000584:	0c36      	lsrs	r6, r6, #16
 8000586:	0c25      	lsrs	r5, r4, #16
 8000588:	0424      	lsls	r4, r4, #16
 800058a:	4465      	add	r5, ip
 800058c:	19a4      	adds	r4, r4, r6
 800058e:	1859      	adds	r1, r3, r1
 8000590:	1949      	adds	r1, r1, r5
 8000592:	0020      	movs	r0, r4
 8000594:	bc0c      	pop	{r2, r3}
 8000596:	4690      	mov	r8, r2
 8000598:	4699      	mov	r9, r3
 800059a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800059c <__aeabi_f2uiz>:
 800059c:	219e      	movs	r1, #158	; 0x9e
 800059e:	b510      	push	{r4, lr}
 80005a0:	05c9      	lsls	r1, r1, #23
 80005a2:	1c04      	adds	r4, r0, #0
 80005a4:	f7ff ffa6 	bl	80004f4 <__aeabi_fcmpge>
 80005a8:	2800      	cmp	r0, #0
 80005aa:	d103      	bne.n	80005b4 <__aeabi_f2uiz+0x18>
 80005ac:	1c20      	adds	r0, r4, #0
 80005ae:	f000 fdb7 	bl	8001120 <__aeabi_f2iz>
 80005b2:	bd10      	pop	{r4, pc}
 80005b4:	219e      	movs	r1, #158	; 0x9e
 80005b6:	1c20      	adds	r0, r4, #0
 80005b8:	05c9      	lsls	r1, r1, #23
 80005ba:	f000 fc15 	bl	8000de8 <__aeabi_fsub>
 80005be:	f000 fdaf 	bl	8001120 <__aeabi_f2iz>
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	061b      	lsls	r3, r3, #24
 80005c6:	469c      	mov	ip, r3
 80005c8:	4460      	add	r0, ip
 80005ca:	e7f2      	b.n	80005b2 <__aeabi_f2uiz+0x16>

080005cc <__aeabi_d2uiz>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	2200      	movs	r2, #0
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <__aeabi_d2uiz+0x38>)
 80005d2:	0004      	movs	r4, r0
 80005d4:	000d      	movs	r5, r1
 80005d6:	f7ff ff53 	bl	8000480 <__aeabi_dcmpge>
 80005da:	2800      	cmp	r0, #0
 80005dc:	d104      	bne.n	80005e8 <__aeabi_d2uiz+0x1c>
 80005de:	0020      	movs	r0, r4
 80005e0:	0029      	movs	r1, r5
 80005e2:	f001 fce9 	bl	8001fb8 <__aeabi_d2iz>
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__aeabi_d2uiz+0x38>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	0020      	movs	r0, r4
 80005ee:	0029      	movs	r1, r5
 80005f0:	f001 f9cc 	bl	800198c <__aeabi_dsub>
 80005f4:	f001 fce0 	bl	8001fb8 <__aeabi_d2iz>
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	061b      	lsls	r3, r3, #24
 80005fc:	469c      	mov	ip, r3
 80005fe:	4460      	add	r0, ip
 8000600:	e7f1      	b.n	80005e6 <__aeabi_d2uiz+0x1a>
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	41e00000 	.word	0x41e00000

08000608 <__aeabi_f2ulz>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f001 fd41 	bl	8002090 <__aeabi_f2d>
 800060e:	2200      	movs	r2, #0
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <__aeabi_f2ulz+0x38>)
 8000612:	000d      	movs	r5, r1
 8000614:	0004      	movs	r4, r0
 8000616:	f000 ff39 	bl	800148c <__aeabi_dmul>
 800061a:	f7ff ffd7 	bl	80005cc <__aeabi_d2uiz>
 800061e:	0006      	movs	r6, r0
 8000620:	f001 fcfe 	bl	8002020 <__aeabi_ui2d>
 8000624:	2200      	movs	r2, #0
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <__aeabi_f2ulz+0x3c>)
 8000628:	f000 ff30 	bl	800148c <__aeabi_dmul>
 800062c:	0002      	movs	r2, r0
 800062e:	000b      	movs	r3, r1
 8000630:	0020      	movs	r0, r4
 8000632:	0029      	movs	r1, r5
 8000634:	f001 f9aa 	bl	800198c <__aeabi_dsub>
 8000638:	f7ff ffc8 	bl	80005cc <__aeabi_d2uiz>
 800063c:	0031      	movs	r1, r6
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	3df00000 	.word	0x3df00000
 8000644:	41f00000 	.word	0x41f00000

08000648 <__udivmoddi4>:
 8000648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064a:	4657      	mov	r7, sl
 800064c:	464e      	mov	r6, r9
 800064e:	4645      	mov	r5, r8
 8000650:	46de      	mov	lr, fp
 8000652:	b5e0      	push	{r5, r6, r7, lr}
 8000654:	0004      	movs	r4, r0
 8000656:	b083      	sub	sp, #12
 8000658:	000d      	movs	r5, r1
 800065a:	4692      	mov	sl, r2
 800065c:	4699      	mov	r9, r3
 800065e:	428b      	cmp	r3, r1
 8000660:	d82f      	bhi.n	80006c2 <__udivmoddi4+0x7a>
 8000662:	d02c      	beq.n	80006be <__udivmoddi4+0x76>
 8000664:	4649      	mov	r1, r9
 8000666:	4650      	mov	r0, sl
 8000668:	f001 fd82 	bl	8002170 <__clzdi2>
 800066c:	0029      	movs	r1, r5
 800066e:	0006      	movs	r6, r0
 8000670:	0020      	movs	r0, r4
 8000672:	f001 fd7d 	bl	8002170 <__clzdi2>
 8000676:	1a33      	subs	r3, r6, r0
 8000678:	4698      	mov	r8, r3
 800067a:	3b20      	subs	r3, #32
 800067c:	469b      	mov	fp, r3
 800067e:	d500      	bpl.n	8000682 <__udivmoddi4+0x3a>
 8000680:	e074      	b.n	800076c <__udivmoddi4+0x124>
 8000682:	4653      	mov	r3, sl
 8000684:	465a      	mov	r2, fp
 8000686:	4093      	lsls	r3, r2
 8000688:	001f      	movs	r7, r3
 800068a:	4653      	mov	r3, sl
 800068c:	4642      	mov	r2, r8
 800068e:	4093      	lsls	r3, r2
 8000690:	001e      	movs	r6, r3
 8000692:	42af      	cmp	r7, r5
 8000694:	d829      	bhi.n	80006ea <__udivmoddi4+0xa2>
 8000696:	d026      	beq.n	80006e6 <__udivmoddi4+0x9e>
 8000698:	465b      	mov	r3, fp
 800069a:	1ba4      	subs	r4, r4, r6
 800069c:	41bd      	sbcs	r5, r7
 800069e:	2b00      	cmp	r3, #0
 80006a0:	da00      	bge.n	80006a4 <__udivmoddi4+0x5c>
 80006a2:	e079      	b.n	8000798 <__udivmoddi4+0x150>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	2301      	movs	r3, #1
 80006ae:	465a      	mov	r2, fp
 80006b0:	4093      	lsls	r3, r2
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	2301      	movs	r3, #1
 80006b6:	4642      	mov	r2, r8
 80006b8:	4093      	lsls	r3, r2
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	e019      	b.n	80006f2 <__udivmoddi4+0xaa>
 80006be:	4282      	cmp	r2, r0
 80006c0:	d9d0      	bls.n	8000664 <__udivmoddi4+0x1c>
 80006c2:	2200      	movs	r2, #0
 80006c4:	2300      	movs	r3, #0
 80006c6:	9200      	str	r2, [sp, #0]
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <__udivmoddi4+0x8c>
 80006d0:	601c      	str	r4, [r3, #0]
 80006d2:	605d      	str	r5, [r3, #4]
 80006d4:	9800      	ldr	r0, [sp, #0]
 80006d6:	9901      	ldr	r1, [sp, #4]
 80006d8:	b003      	add	sp, #12
 80006da:	bc3c      	pop	{r2, r3, r4, r5}
 80006dc:	4690      	mov	r8, r2
 80006de:	4699      	mov	r9, r3
 80006e0:	46a2      	mov	sl, r4
 80006e2:	46ab      	mov	fp, r5
 80006e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e6:	42a3      	cmp	r3, r4
 80006e8:	d9d6      	bls.n	8000698 <__udivmoddi4+0x50>
 80006ea:	2200      	movs	r2, #0
 80006ec:	2300      	movs	r3, #0
 80006ee:	9200      	str	r2, [sp, #0]
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	4643      	mov	r3, r8
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0e8      	beq.n	80006ca <__udivmoddi4+0x82>
 80006f8:	07fb      	lsls	r3, r7, #31
 80006fa:	0872      	lsrs	r2, r6, #1
 80006fc:	431a      	orrs	r2, r3
 80006fe:	4646      	mov	r6, r8
 8000700:	087b      	lsrs	r3, r7, #1
 8000702:	e00e      	b.n	8000722 <__udivmoddi4+0xda>
 8000704:	42ab      	cmp	r3, r5
 8000706:	d101      	bne.n	800070c <__udivmoddi4+0xc4>
 8000708:	42a2      	cmp	r2, r4
 800070a:	d80c      	bhi.n	8000726 <__udivmoddi4+0xde>
 800070c:	1aa4      	subs	r4, r4, r2
 800070e:	419d      	sbcs	r5, r3
 8000710:	2001      	movs	r0, #1
 8000712:	1924      	adds	r4, r4, r4
 8000714:	416d      	adcs	r5, r5
 8000716:	2100      	movs	r1, #0
 8000718:	3e01      	subs	r6, #1
 800071a:	1824      	adds	r4, r4, r0
 800071c:	414d      	adcs	r5, r1
 800071e:	2e00      	cmp	r6, #0
 8000720:	d006      	beq.n	8000730 <__udivmoddi4+0xe8>
 8000722:	42ab      	cmp	r3, r5
 8000724:	d9ee      	bls.n	8000704 <__udivmoddi4+0xbc>
 8000726:	3e01      	subs	r6, #1
 8000728:	1924      	adds	r4, r4, r4
 800072a:	416d      	adcs	r5, r5
 800072c:	2e00      	cmp	r6, #0
 800072e:	d1f8      	bne.n	8000722 <__udivmoddi4+0xda>
 8000730:	465b      	mov	r3, fp
 8000732:	9800      	ldr	r0, [sp, #0]
 8000734:	9901      	ldr	r1, [sp, #4]
 8000736:	1900      	adds	r0, r0, r4
 8000738:	4169      	adcs	r1, r5
 800073a:	2b00      	cmp	r3, #0
 800073c:	db22      	blt.n	8000784 <__udivmoddi4+0x13c>
 800073e:	002b      	movs	r3, r5
 8000740:	465a      	mov	r2, fp
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	4644      	mov	r4, r8
 8000748:	40e2      	lsrs	r2, r4
 800074a:	001c      	movs	r4, r3
 800074c:	465b      	mov	r3, fp
 800074e:	0015      	movs	r5, r2
 8000750:	2b00      	cmp	r3, #0
 8000752:	db2c      	blt.n	80007ae <__udivmoddi4+0x166>
 8000754:	0026      	movs	r6, r4
 8000756:	409e      	lsls	r6, r3
 8000758:	0033      	movs	r3, r6
 800075a:	0026      	movs	r6, r4
 800075c:	4647      	mov	r7, r8
 800075e:	40be      	lsls	r6, r7
 8000760:	0032      	movs	r2, r6
 8000762:	1a80      	subs	r0, r0, r2
 8000764:	4199      	sbcs	r1, r3
 8000766:	9000      	str	r0, [sp, #0]
 8000768:	9101      	str	r1, [sp, #4]
 800076a:	e7ae      	b.n	80006ca <__udivmoddi4+0x82>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	1a9b      	subs	r3, r3, r2
 8000772:	4652      	mov	r2, sl
 8000774:	40da      	lsrs	r2, r3
 8000776:	4641      	mov	r1, r8
 8000778:	0013      	movs	r3, r2
 800077a:	464a      	mov	r2, r9
 800077c:	408a      	lsls	r2, r1
 800077e:	0017      	movs	r7, r2
 8000780:	431f      	orrs	r7, r3
 8000782:	e782      	b.n	800068a <__udivmoddi4+0x42>
 8000784:	4642      	mov	r2, r8
 8000786:	2320      	movs	r3, #32
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	002a      	movs	r2, r5
 800078c:	4646      	mov	r6, r8
 800078e:	409a      	lsls	r2, r3
 8000790:	0023      	movs	r3, r4
 8000792:	40f3      	lsrs	r3, r6
 8000794:	4313      	orrs	r3, r2
 8000796:	e7d5      	b.n	8000744 <__udivmoddi4+0xfc>
 8000798:	4642      	mov	r2, r8
 800079a:	2320      	movs	r3, #32
 800079c:	2100      	movs	r1, #0
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	2200      	movs	r2, #0
 80007a2:	9100      	str	r1, [sp, #0]
 80007a4:	9201      	str	r2, [sp, #4]
 80007a6:	2201      	movs	r2, #1
 80007a8:	40da      	lsrs	r2, r3
 80007aa:	9201      	str	r2, [sp, #4]
 80007ac:	e782      	b.n	80006b4 <__udivmoddi4+0x6c>
 80007ae:	4642      	mov	r2, r8
 80007b0:	2320      	movs	r3, #32
 80007b2:	0026      	movs	r6, r4
 80007b4:	1a9b      	subs	r3, r3, r2
 80007b6:	40de      	lsrs	r6, r3
 80007b8:	002f      	movs	r7, r5
 80007ba:	46b4      	mov	ip, r6
 80007bc:	4097      	lsls	r7, r2
 80007be:	4666      	mov	r6, ip
 80007c0:	003b      	movs	r3, r7
 80007c2:	4333      	orrs	r3, r6
 80007c4:	e7c9      	b.n	800075a <__udivmoddi4+0x112>
 80007c6:	46c0      	nop			; (mov r8, r8)

080007c8 <__aeabi_fdiv>:
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	4657      	mov	r7, sl
 80007cc:	464e      	mov	r6, r9
 80007ce:	46de      	mov	lr, fp
 80007d0:	4645      	mov	r5, r8
 80007d2:	b5e0      	push	{r5, r6, r7, lr}
 80007d4:	0244      	lsls	r4, r0, #9
 80007d6:	0043      	lsls	r3, r0, #1
 80007d8:	0fc6      	lsrs	r6, r0, #31
 80007da:	b083      	sub	sp, #12
 80007dc:	1c0f      	adds	r7, r1, #0
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0e1b      	lsrs	r3, r3, #24
 80007e2:	46b2      	mov	sl, r6
 80007e4:	d053      	beq.n	800088e <__aeabi_fdiv+0xc6>
 80007e6:	2bff      	cmp	r3, #255	; 0xff
 80007e8:	d027      	beq.n	800083a <__aeabi_fdiv+0x72>
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	00e4      	lsls	r4, r4, #3
 80007ee:	04d2      	lsls	r2, r2, #19
 80007f0:	4314      	orrs	r4, r2
 80007f2:	227f      	movs	r2, #127	; 0x7f
 80007f4:	4252      	negs	r2, r2
 80007f6:	4690      	mov	r8, r2
 80007f8:	4498      	add	r8, r3
 80007fa:	2300      	movs	r3, #0
 80007fc:	4699      	mov	r9, r3
 80007fe:	469b      	mov	fp, r3
 8000800:	027d      	lsls	r5, r7, #9
 8000802:	0078      	lsls	r0, r7, #1
 8000804:	0ffb      	lsrs	r3, r7, #31
 8000806:	0a6d      	lsrs	r5, r5, #9
 8000808:	0e00      	lsrs	r0, r0, #24
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	d024      	beq.n	8000858 <__aeabi_fdiv+0x90>
 800080e:	28ff      	cmp	r0, #255	; 0xff
 8000810:	d046      	beq.n	80008a0 <__aeabi_fdiv+0xd8>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	2100      	movs	r1, #0
 8000816:	00ed      	lsls	r5, r5, #3
 8000818:	04db      	lsls	r3, r3, #19
 800081a:	431d      	orrs	r5, r3
 800081c:	387f      	subs	r0, #127	; 0x7f
 800081e:	4647      	mov	r7, r8
 8000820:	1a38      	subs	r0, r7, r0
 8000822:	464f      	mov	r7, r9
 8000824:	430f      	orrs	r7, r1
 8000826:	00bf      	lsls	r7, r7, #2
 8000828:	46b9      	mov	r9, r7
 800082a:	0033      	movs	r3, r6
 800082c:	9a00      	ldr	r2, [sp, #0]
 800082e:	4f87      	ldr	r7, [pc, #540]	; (8000a4c <__aeabi_fdiv+0x284>)
 8000830:	4053      	eors	r3, r2
 8000832:	464a      	mov	r2, r9
 8000834:	58ba      	ldr	r2, [r7, r2]
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	4697      	mov	pc, r2
 800083a:	2c00      	cmp	r4, #0
 800083c:	d14e      	bne.n	80008dc <__aeabi_fdiv+0x114>
 800083e:	2308      	movs	r3, #8
 8000840:	4699      	mov	r9, r3
 8000842:	33f7      	adds	r3, #247	; 0xf7
 8000844:	4698      	mov	r8, r3
 8000846:	3bfd      	subs	r3, #253	; 0xfd
 8000848:	469b      	mov	fp, r3
 800084a:	027d      	lsls	r5, r7, #9
 800084c:	0078      	lsls	r0, r7, #1
 800084e:	0ffb      	lsrs	r3, r7, #31
 8000850:	0a6d      	lsrs	r5, r5, #9
 8000852:	0e00      	lsrs	r0, r0, #24
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	d1da      	bne.n	800080e <__aeabi_fdiv+0x46>
 8000858:	2d00      	cmp	r5, #0
 800085a:	d126      	bne.n	80008aa <__aeabi_fdiv+0xe2>
 800085c:	2000      	movs	r0, #0
 800085e:	2101      	movs	r1, #1
 8000860:	0033      	movs	r3, r6
 8000862:	9a00      	ldr	r2, [sp, #0]
 8000864:	4f7a      	ldr	r7, [pc, #488]	; (8000a50 <__aeabi_fdiv+0x288>)
 8000866:	4053      	eors	r3, r2
 8000868:	4642      	mov	r2, r8
 800086a:	1a10      	subs	r0, r2, r0
 800086c:	464a      	mov	r2, r9
 800086e:	430a      	orrs	r2, r1
 8000870:	0092      	lsls	r2, r2, #2
 8000872:	58ba      	ldr	r2, [r7, r2]
 8000874:	001d      	movs	r5, r3
 8000876:	4697      	mov	pc, r2
 8000878:	9b00      	ldr	r3, [sp, #0]
 800087a:	002c      	movs	r4, r5
 800087c:	469a      	mov	sl, r3
 800087e:	468b      	mov	fp, r1
 8000880:	465b      	mov	r3, fp
 8000882:	2b02      	cmp	r3, #2
 8000884:	d131      	bne.n	80008ea <__aeabi_fdiv+0x122>
 8000886:	4653      	mov	r3, sl
 8000888:	21ff      	movs	r1, #255	; 0xff
 800088a:	2400      	movs	r4, #0
 800088c:	e038      	b.n	8000900 <__aeabi_fdiv+0x138>
 800088e:	2c00      	cmp	r4, #0
 8000890:	d117      	bne.n	80008c2 <__aeabi_fdiv+0xfa>
 8000892:	2304      	movs	r3, #4
 8000894:	4699      	mov	r9, r3
 8000896:	2300      	movs	r3, #0
 8000898:	4698      	mov	r8, r3
 800089a:	3301      	adds	r3, #1
 800089c:	469b      	mov	fp, r3
 800089e:	e7af      	b.n	8000800 <__aeabi_fdiv+0x38>
 80008a0:	20ff      	movs	r0, #255	; 0xff
 80008a2:	2d00      	cmp	r5, #0
 80008a4:	d10b      	bne.n	80008be <__aeabi_fdiv+0xf6>
 80008a6:	2102      	movs	r1, #2
 80008a8:	e7da      	b.n	8000860 <__aeabi_fdiv+0x98>
 80008aa:	0028      	movs	r0, r5
 80008ac:	f001 fc42 	bl	8002134 <__clzsi2>
 80008b0:	1f43      	subs	r3, r0, #5
 80008b2:	409d      	lsls	r5, r3
 80008b4:	2376      	movs	r3, #118	; 0x76
 80008b6:	425b      	negs	r3, r3
 80008b8:	1a18      	subs	r0, r3, r0
 80008ba:	2100      	movs	r1, #0
 80008bc:	e7af      	b.n	800081e <__aeabi_fdiv+0x56>
 80008be:	2103      	movs	r1, #3
 80008c0:	e7ad      	b.n	800081e <__aeabi_fdiv+0x56>
 80008c2:	0020      	movs	r0, r4
 80008c4:	f001 fc36 	bl	8002134 <__clzsi2>
 80008c8:	1f43      	subs	r3, r0, #5
 80008ca:	409c      	lsls	r4, r3
 80008cc:	2376      	movs	r3, #118	; 0x76
 80008ce:	425b      	negs	r3, r3
 80008d0:	1a1b      	subs	r3, r3, r0
 80008d2:	4698      	mov	r8, r3
 80008d4:	2300      	movs	r3, #0
 80008d6:	4699      	mov	r9, r3
 80008d8:	469b      	mov	fp, r3
 80008da:	e791      	b.n	8000800 <__aeabi_fdiv+0x38>
 80008dc:	230c      	movs	r3, #12
 80008de:	4699      	mov	r9, r3
 80008e0:	33f3      	adds	r3, #243	; 0xf3
 80008e2:	4698      	mov	r8, r3
 80008e4:	3bfc      	subs	r3, #252	; 0xfc
 80008e6:	469b      	mov	fp, r3
 80008e8:	e78a      	b.n	8000800 <__aeabi_fdiv+0x38>
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fdiv+0x128>
 80008ee:	e0a5      	b.n	8000a3c <__aeabi_fdiv+0x274>
 80008f0:	4655      	mov	r5, sl
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fdiv+0x130>
 80008f6:	e081      	b.n	80009fc <__aeabi_fdiv+0x234>
 80008f8:	2301      	movs	r3, #1
 80008fa:	2100      	movs	r1, #0
 80008fc:	2400      	movs	r4, #0
 80008fe:	402b      	ands	r3, r5
 8000900:	0264      	lsls	r4, r4, #9
 8000902:	05c9      	lsls	r1, r1, #23
 8000904:	0a60      	lsrs	r0, r4, #9
 8000906:	07db      	lsls	r3, r3, #31
 8000908:	4308      	orrs	r0, r1
 800090a:	4318      	orrs	r0, r3
 800090c:	b003      	add	sp, #12
 800090e:	bc3c      	pop	{r2, r3, r4, r5}
 8000910:	4690      	mov	r8, r2
 8000912:	4699      	mov	r9, r3
 8000914:	46a2      	mov	sl, r4
 8000916:	46ab      	mov	fp, r5
 8000918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091a:	2480      	movs	r4, #128	; 0x80
 800091c:	2300      	movs	r3, #0
 800091e:	03e4      	lsls	r4, r4, #15
 8000920:	21ff      	movs	r1, #255	; 0xff
 8000922:	e7ed      	b.n	8000900 <__aeabi_fdiv+0x138>
 8000924:	21ff      	movs	r1, #255	; 0xff
 8000926:	2400      	movs	r4, #0
 8000928:	e7ea      	b.n	8000900 <__aeabi_fdiv+0x138>
 800092a:	2301      	movs	r3, #1
 800092c:	1a59      	subs	r1, r3, r1
 800092e:	291b      	cmp	r1, #27
 8000930:	dd66      	ble.n	8000a00 <__aeabi_fdiv+0x238>
 8000932:	9a01      	ldr	r2, [sp, #4]
 8000934:	4013      	ands	r3, r2
 8000936:	2100      	movs	r1, #0
 8000938:	2400      	movs	r4, #0
 800093a:	e7e1      	b.n	8000900 <__aeabi_fdiv+0x138>
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	03db      	lsls	r3, r3, #15
 8000940:	421c      	tst	r4, r3
 8000942:	d038      	beq.n	80009b6 <__aeabi_fdiv+0x1ee>
 8000944:	421d      	tst	r5, r3
 8000946:	d051      	beq.n	80009ec <__aeabi_fdiv+0x224>
 8000948:	431c      	orrs	r4, r3
 800094a:	0264      	lsls	r4, r4, #9
 800094c:	0a64      	lsrs	r4, r4, #9
 800094e:	0033      	movs	r3, r6
 8000950:	21ff      	movs	r1, #255	; 0xff
 8000952:	e7d5      	b.n	8000900 <__aeabi_fdiv+0x138>
 8000954:	0163      	lsls	r3, r4, #5
 8000956:	016c      	lsls	r4, r5, #5
 8000958:	42a3      	cmp	r3, r4
 800095a:	d23b      	bcs.n	80009d4 <__aeabi_fdiv+0x20c>
 800095c:	261b      	movs	r6, #27
 800095e:	2100      	movs	r1, #0
 8000960:	3801      	subs	r0, #1
 8000962:	2501      	movs	r5, #1
 8000964:	001f      	movs	r7, r3
 8000966:	0049      	lsls	r1, r1, #1
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2f00      	cmp	r7, #0
 800096c:	db01      	blt.n	8000972 <__aeabi_fdiv+0x1aa>
 800096e:	429c      	cmp	r4, r3
 8000970:	d801      	bhi.n	8000976 <__aeabi_fdiv+0x1ae>
 8000972:	1b1b      	subs	r3, r3, r4
 8000974:	4329      	orrs	r1, r5
 8000976:	3e01      	subs	r6, #1
 8000978:	2e00      	cmp	r6, #0
 800097a:	d1f3      	bne.n	8000964 <__aeabi_fdiv+0x19c>
 800097c:	001c      	movs	r4, r3
 800097e:	1e63      	subs	r3, r4, #1
 8000980:	419c      	sbcs	r4, r3
 8000982:	430c      	orrs	r4, r1
 8000984:	0001      	movs	r1, r0
 8000986:	317f      	adds	r1, #127	; 0x7f
 8000988:	2900      	cmp	r1, #0
 800098a:	ddce      	ble.n	800092a <__aeabi_fdiv+0x162>
 800098c:	0763      	lsls	r3, r4, #29
 800098e:	d004      	beq.n	800099a <__aeabi_fdiv+0x1d2>
 8000990:	230f      	movs	r3, #15
 8000992:	4023      	ands	r3, r4
 8000994:	2b04      	cmp	r3, #4
 8000996:	d000      	beq.n	800099a <__aeabi_fdiv+0x1d2>
 8000998:	3404      	adds	r4, #4
 800099a:	0123      	lsls	r3, r4, #4
 800099c:	d503      	bpl.n	80009a6 <__aeabi_fdiv+0x1de>
 800099e:	0001      	movs	r1, r0
 80009a0:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <__aeabi_fdiv+0x28c>)
 80009a2:	3180      	adds	r1, #128	; 0x80
 80009a4:	401c      	ands	r4, r3
 80009a6:	29fe      	cmp	r1, #254	; 0xfe
 80009a8:	dd0d      	ble.n	80009c6 <__aeabi_fdiv+0x1fe>
 80009aa:	2301      	movs	r3, #1
 80009ac:	9a01      	ldr	r2, [sp, #4]
 80009ae:	21ff      	movs	r1, #255	; 0xff
 80009b0:	4013      	ands	r3, r2
 80009b2:	2400      	movs	r4, #0
 80009b4:	e7a4      	b.n	8000900 <__aeabi_fdiv+0x138>
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	03db      	lsls	r3, r3, #15
 80009ba:	431c      	orrs	r4, r3
 80009bc:	0264      	lsls	r4, r4, #9
 80009be:	0a64      	lsrs	r4, r4, #9
 80009c0:	0033      	movs	r3, r6
 80009c2:	21ff      	movs	r1, #255	; 0xff
 80009c4:	e79c      	b.n	8000900 <__aeabi_fdiv+0x138>
 80009c6:	2301      	movs	r3, #1
 80009c8:	9a01      	ldr	r2, [sp, #4]
 80009ca:	01a4      	lsls	r4, r4, #6
 80009cc:	0a64      	lsrs	r4, r4, #9
 80009ce:	b2c9      	uxtb	r1, r1
 80009d0:	4013      	ands	r3, r2
 80009d2:	e795      	b.n	8000900 <__aeabi_fdiv+0x138>
 80009d4:	1b1b      	subs	r3, r3, r4
 80009d6:	261a      	movs	r6, #26
 80009d8:	2101      	movs	r1, #1
 80009da:	e7c2      	b.n	8000962 <__aeabi_fdiv+0x19a>
 80009dc:	9b00      	ldr	r3, [sp, #0]
 80009de:	468b      	mov	fp, r1
 80009e0:	469a      	mov	sl, r3
 80009e2:	2400      	movs	r4, #0
 80009e4:	e74c      	b.n	8000880 <__aeabi_fdiv+0xb8>
 80009e6:	0263      	lsls	r3, r4, #9
 80009e8:	d5e5      	bpl.n	80009b6 <__aeabi_fdiv+0x1ee>
 80009ea:	2500      	movs	r5, #0
 80009ec:	2480      	movs	r4, #128	; 0x80
 80009ee:	03e4      	lsls	r4, r4, #15
 80009f0:	432c      	orrs	r4, r5
 80009f2:	0264      	lsls	r4, r4, #9
 80009f4:	0a64      	lsrs	r4, r4, #9
 80009f6:	9b00      	ldr	r3, [sp, #0]
 80009f8:	21ff      	movs	r1, #255	; 0xff
 80009fa:	e781      	b.n	8000900 <__aeabi_fdiv+0x138>
 80009fc:	9501      	str	r5, [sp, #4]
 80009fe:	e7c1      	b.n	8000984 <__aeabi_fdiv+0x1bc>
 8000a00:	0023      	movs	r3, r4
 8000a02:	2020      	movs	r0, #32
 8000a04:	40cb      	lsrs	r3, r1
 8000a06:	1a41      	subs	r1, r0, r1
 8000a08:	408c      	lsls	r4, r1
 8000a0a:	1e61      	subs	r1, r4, #1
 8000a0c:	418c      	sbcs	r4, r1
 8000a0e:	431c      	orrs	r4, r3
 8000a10:	0763      	lsls	r3, r4, #29
 8000a12:	d004      	beq.n	8000a1e <__aeabi_fdiv+0x256>
 8000a14:	230f      	movs	r3, #15
 8000a16:	4023      	ands	r3, r4
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	d000      	beq.n	8000a1e <__aeabi_fdiv+0x256>
 8000a1c:	3404      	adds	r4, #4
 8000a1e:	0163      	lsls	r3, r4, #5
 8000a20:	d505      	bpl.n	8000a2e <__aeabi_fdiv+0x266>
 8000a22:	2301      	movs	r3, #1
 8000a24:	9a01      	ldr	r2, [sp, #4]
 8000a26:	2101      	movs	r1, #1
 8000a28:	4013      	ands	r3, r2
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	e768      	b.n	8000900 <__aeabi_fdiv+0x138>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	9a01      	ldr	r2, [sp, #4]
 8000a32:	01a4      	lsls	r4, r4, #6
 8000a34:	0a64      	lsrs	r4, r4, #9
 8000a36:	4013      	ands	r3, r2
 8000a38:	2100      	movs	r1, #0
 8000a3a:	e761      	b.n	8000900 <__aeabi_fdiv+0x138>
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	03db      	lsls	r3, r3, #15
 8000a40:	431c      	orrs	r4, r3
 8000a42:	0264      	lsls	r4, r4, #9
 8000a44:	0a64      	lsrs	r4, r4, #9
 8000a46:	4653      	mov	r3, sl
 8000a48:	21ff      	movs	r1, #255	; 0xff
 8000a4a:	e759      	b.n	8000900 <__aeabi_fdiv+0x138>
 8000a4c:	08008a34 	.word	0x08008a34
 8000a50:	08008a74 	.word	0x08008a74
 8000a54:	f7ffffff 	.word	0xf7ffffff

08000a58 <__eqsf2>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	0042      	lsls	r2, r0, #1
 8000a5c:	0245      	lsls	r5, r0, #9
 8000a5e:	024e      	lsls	r6, r1, #9
 8000a60:	004c      	lsls	r4, r1, #1
 8000a62:	0fc3      	lsrs	r3, r0, #31
 8000a64:	0a6d      	lsrs	r5, r5, #9
 8000a66:	0e12      	lsrs	r2, r2, #24
 8000a68:	0a76      	lsrs	r6, r6, #9
 8000a6a:	0e24      	lsrs	r4, r4, #24
 8000a6c:	0fc9      	lsrs	r1, r1, #31
 8000a6e:	2001      	movs	r0, #1
 8000a70:	2aff      	cmp	r2, #255	; 0xff
 8000a72:	d006      	beq.n	8000a82 <__eqsf2+0x2a>
 8000a74:	2cff      	cmp	r4, #255	; 0xff
 8000a76:	d003      	beq.n	8000a80 <__eqsf2+0x28>
 8000a78:	42a2      	cmp	r2, r4
 8000a7a:	d101      	bne.n	8000a80 <__eqsf2+0x28>
 8000a7c:	42b5      	cmp	r5, r6
 8000a7e:	d006      	beq.n	8000a8e <__eqsf2+0x36>
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d1fc      	bne.n	8000a80 <__eqsf2+0x28>
 8000a86:	2cff      	cmp	r4, #255	; 0xff
 8000a88:	d1fa      	bne.n	8000a80 <__eqsf2+0x28>
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d1f8      	bne.n	8000a80 <__eqsf2+0x28>
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d006      	beq.n	8000aa0 <__eqsf2+0x48>
 8000a92:	2001      	movs	r0, #1
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	d1f3      	bne.n	8000a80 <__eqsf2+0x28>
 8000a98:	0028      	movs	r0, r5
 8000a9a:	1e45      	subs	r5, r0, #1
 8000a9c:	41a8      	sbcs	r0, r5
 8000a9e:	e7ef      	b.n	8000a80 <__eqsf2+0x28>
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	e7ed      	b.n	8000a80 <__eqsf2+0x28>

08000aa4 <__gesf2>:
 8000aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa6:	0042      	lsls	r2, r0, #1
 8000aa8:	0245      	lsls	r5, r0, #9
 8000aaa:	024c      	lsls	r4, r1, #9
 8000aac:	0fc3      	lsrs	r3, r0, #31
 8000aae:	0048      	lsls	r0, r1, #1
 8000ab0:	0a6d      	lsrs	r5, r5, #9
 8000ab2:	0e12      	lsrs	r2, r2, #24
 8000ab4:	0a64      	lsrs	r4, r4, #9
 8000ab6:	0e00      	lsrs	r0, r0, #24
 8000ab8:	0fc9      	lsrs	r1, r1, #31
 8000aba:	2aff      	cmp	r2, #255	; 0xff
 8000abc:	d01e      	beq.n	8000afc <__gesf2+0x58>
 8000abe:	28ff      	cmp	r0, #255	; 0xff
 8000ac0:	d021      	beq.n	8000b06 <__gesf2+0x62>
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	d10a      	bne.n	8000adc <__gesf2+0x38>
 8000ac6:	426e      	negs	r6, r5
 8000ac8:	416e      	adcs	r6, r5
 8000aca:	b2f6      	uxtb	r6, r6
 8000acc:	2800      	cmp	r0, #0
 8000ace:	d10f      	bne.n	8000af0 <__gesf2+0x4c>
 8000ad0:	2c00      	cmp	r4, #0
 8000ad2:	d10d      	bne.n	8000af0 <__gesf2+0x4c>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d009      	beq.n	8000aee <__gesf2+0x4a>
 8000ada:	e005      	b.n	8000ae8 <__gesf2+0x44>
 8000adc:	2800      	cmp	r0, #0
 8000ade:	d101      	bne.n	8000ae4 <__gesf2+0x40>
 8000ae0:	2c00      	cmp	r4, #0
 8000ae2:	d001      	beq.n	8000ae8 <__gesf2+0x44>
 8000ae4:	428b      	cmp	r3, r1
 8000ae6:	d011      	beq.n	8000b0c <__gesf2+0x68>
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4258      	negs	r0, r3
 8000aec:	4308      	orrs	r0, r1
 8000aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af0:	2e00      	cmp	r6, #0
 8000af2:	d0f7      	beq.n	8000ae4 <__gesf2+0x40>
 8000af4:	2001      	movs	r0, #1
 8000af6:	3901      	subs	r1, #1
 8000af8:	4308      	orrs	r0, r1
 8000afa:	e7f8      	b.n	8000aee <__gesf2+0x4a>
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d0de      	beq.n	8000abe <__gesf2+0x1a>
 8000b00:	2002      	movs	r0, #2
 8000b02:	4240      	negs	r0, r0
 8000b04:	e7f3      	b.n	8000aee <__gesf2+0x4a>
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d0db      	beq.n	8000ac2 <__gesf2+0x1e>
 8000b0a:	e7f9      	b.n	8000b00 <__gesf2+0x5c>
 8000b0c:	4282      	cmp	r2, r0
 8000b0e:	dceb      	bgt.n	8000ae8 <__gesf2+0x44>
 8000b10:	db04      	blt.n	8000b1c <__gesf2+0x78>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d8e8      	bhi.n	8000ae8 <__gesf2+0x44>
 8000b16:	2000      	movs	r0, #0
 8000b18:	42a5      	cmp	r5, r4
 8000b1a:	d2e8      	bcs.n	8000aee <__gesf2+0x4a>
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	1e58      	subs	r0, r3, #1
 8000b20:	4308      	orrs	r0, r1
 8000b22:	e7e4      	b.n	8000aee <__gesf2+0x4a>

08000b24 <__lesf2>:
 8000b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b26:	0042      	lsls	r2, r0, #1
 8000b28:	024d      	lsls	r5, r1, #9
 8000b2a:	004c      	lsls	r4, r1, #1
 8000b2c:	0246      	lsls	r6, r0, #9
 8000b2e:	0a76      	lsrs	r6, r6, #9
 8000b30:	0e12      	lsrs	r2, r2, #24
 8000b32:	0fc3      	lsrs	r3, r0, #31
 8000b34:	0a6d      	lsrs	r5, r5, #9
 8000b36:	0e24      	lsrs	r4, r4, #24
 8000b38:	0fc9      	lsrs	r1, r1, #31
 8000b3a:	2aff      	cmp	r2, #255	; 0xff
 8000b3c:	d016      	beq.n	8000b6c <__lesf2+0x48>
 8000b3e:	2cff      	cmp	r4, #255	; 0xff
 8000b40:	d018      	beq.n	8000b74 <__lesf2+0x50>
 8000b42:	2a00      	cmp	r2, #0
 8000b44:	d10a      	bne.n	8000b5c <__lesf2+0x38>
 8000b46:	4270      	negs	r0, r6
 8000b48:	4170      	adcs	r0, r6
 8000b4a:	b2c0      	uxtb	r0, r0
 8000b4c:	2c00      	cmp	r4, #0
 8000b4e:	d015      	beq.n	8000b7c <__lesf2+0x58>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d005      	beq.n	8000b60 <__lesf2+0x3c>
 8000b54:	2001      	movs	r0, #1
 8000b56:	3901      	subs	r1, #1
 8000b58:	4308      	orrs	r0, r1
 8000b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d013      	beq.n	8000b88 <__lesf2+0x64>
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d014      	beq.n	8000b8e <__lesf2+0x6a>
 8000b64:	2001      	movs	r0, #1
 8000b66:	425b      	negs	r3, r3
 8000b68:	4318      	orrs	r0, r3
 8000b6a:	e7f6      	b.n	8000b5a <__lesf2+0x36>
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d1f3      	bne.n	8000b5a <__lesf2+0x36>
 8000b72:	e7e4      	b.n	8000b3e <__lesf2+0x1a>
 8000b74:	2002      	movs	r0, #2
 8000b76:	2d00      	cmp	r5, #0
 8000b78:	d1ef      	bne.n	8000b5a <__lesf2+0x36>
 8000b7a:	e7e2      	b.n	8000b42 <__lesf2+0x1e>
 8000b7c:	2d00      	cmp	r5, #0
 8000b7e:	d1e7      	bne.n	8000b50 <__lesf2+0x2c>
 8000b80:	2000      	movs	r0, #0
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d0e9      	beq.n	8000b5a <__lesf2+0x36>
 8000b86:	e7ed      	b.n	8000b64 <__lesf2+0x40>
 8000b88:	2d00      	cmp	r5, #0
 8000b8a:	d1e9      	bne.n	8000b60 <__lesf2+0x3c>
 8000b8c:	e7ea      	b.n	8000b64 <__lesf2+0x40>
 8000b8e:	42a2      	cmp	r2, r4
 8000b90:	dc06      	bgt.n	8000ba0 <__lesf2+0x7c>
 8000b92:	dbdf      	blt.n	8000b54 <__lesf2+0x30>
 8000b94:	42ae      	cmp	r6, r5
 8000b96:	d803      	bhi.n	8000ba0 <__lesf2+0x7c>
 8000b98:	2000      	movs	r0, #0
 8000b9a:	42ae      	cmp	r6, r5
 8000b9c:	d3da      	bcc.n	8000b54 <__lesf2+0x30>
 8000b9e:	e7dc      	b.n	8000b5a <__lesf2+0x36>
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	4308      	orrs	r0, r1
 8000ba6:	e7d8      	b.n	8000b5a <__lesf2+0x36>

08000ba8 <__aeabi_fmul>:
 8000ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000baa:	4657      	mov	r7, sl
 8000bac:	464e      	mov	r6, r9
 8000bae:	4645      	mov	r5, r8
 8000bb0:	46de      	mov	lr, fp
 8000bb2:	b5e0      	push	{r5, r6, r7, lr}
 8000bb4:	0247      	lsls	r7, r0, #9
 8000bb6:	0046      	lsls	r6, r0, #1
 8000bb8:	4688      	mov	r8, r1
 8000bba:	0a7f      	lsrs	r7, r7, #9
 8000bbc:	0e36      	lsrs	r6, r6, #24
 8000bbe:	0fc4      	lsrs	r4, r0, #31
 8000bc0:	2e00      	cmp	r6, #0
 8000bc2:	d047      	beq.n	8000c54 <__aeabi_fmul+0xac>
 8000bc4:	2eff      	cmp	r6, #255	; 0xff
 8000bc6:	d024      	beq.n	8000c12 <__aeabi_fmul+0x6a>
 8000bc8:	00fb      	lsls	r3, r7, #3
 8000bca:	2780      	movs	r7, #128	; 0x80
 8000bcc:	04ff      	lsls	r7, r7, #19
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	4699      	mov	r9, r3
 8000bd4:	469a      	mov	sl, r3
 8000bd6:	3e7f      	subs	r6, #127	; 0x7f
 8000bd8:	4643      	mov	r3, r8
 8000bda:	025d      	lsls	r5, r3, #9
 8000bdc:	0058      	lsls	r0, r3, #1
 8000bde:	0fdb      	lsrs	r3, r3, #31
 8000be0:	0a6d      	lsrs	r5, r5, #9
 8000be2:	0e00      	lsrs	r0, r0, #24
 8000be4:	4698      	mov	r8, r3
 8000be6:	d043      	beq.n	8000c70 <__aeabi_fmul+0xc8>
 8000be8:	28ff      	cmp	r0, #255	; 0xff
 8000bea:	d03b      	beq.n	8000c64 <__aeabi_fmul+0xbc>
 8000bec:	00eb      	lsls	r3, r5, #3
 8000bee:	2580      	movs	r5, #128	; 0x80
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	04ed      	lsls	r5, r5, #19
 8000bf4:	431d      	orrs	r5, r3
 8000bf6:	387f      	subs	r0, #127	; 0x7f
 8000bf8:	1836      	adds	r6, r6, r0
 8000bfa:	1c73      	adds	r3, r6, #1
 8000bfc:	4641      	mov	r1, r8
 8000bfe:	469b      	mov	fp, r3
 8000c00:	464b      	mov	r3, r9
 8000c02:	4061      	eors	r1, r4
 8000c04:	4313      	orrs	r3, r2
 8000c06:	2b0f      	cmp	r3, #15
 8000c08:	d864      	bhi.n	8000cd4 <__aeabi_fmul+0x12c>
 8000c0a:	4875      	ldr	r0, [pc, #468]	; (8000de0 <__aeabi_fmul+0x238>)
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	58c3      	ldr	r3, [r0, r3]
 8000c10:	469f      	mov	pc, r3
 8000c12:	2f00      	cmp	r7, #0
 8000c14:	d142      	bne.n	8000c9c <__aeabi_fmul+0xf4>
 8000c16:	2308      	movs	r3, #8
 8000c18:	4699      	mov	r9, r3
 8000c1a:	3b06      	subs	r3, #6
 8000c1c:	26ff      	movs	r6, #255	; 0xff
 8000c1e:	469a      	mov	sl, r3
 8000c20:	e7da      	b.n	8000bd8 <__aeabi_fmul+0x30>
 8000c22:	4641      	mov	r1, r8
 8000c24:	2a02      	cmp	r2, #2
 8000c26:	d028      	beq.n	8000c7a <__aeabi_fmul+0xd2>
 8000c28:	2a03      	cmp	r2, #3
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fmul+0x86>
 8000c2c:	e0ce      	b.n	8000dcc <__aeabi_fmul+0x224>
 8000c2e:	2a01      	cmp	r2, #1
 8000c30:	d000      	beq.n	8000c34 <__aeabi_fmul+0x8c>
 8000c32:	e0ac      	b.n	8000d8e <__aeabi_fmul+0x1e6>
 8000c34:	4011      	ands	r1, r2
 8000c36:	2000      	movs	r0, #0
 8000c38:	2200      	movs	r2, #0
 8000c3a:	b2cc      	uxtb	r4, r1
 8000c3c:	0240      	lsls	r0, r0, #9
 8000c3e:	05d2      	lsls	r2, r2, #23
 8000c40:	0a40      	lsrs	r0, r0, #9
 8000c42:	07e4      	lsls	r4, r4, #31
 8000c44:	4310      	orrs	r0, r2
 8000c46:	4320      	orrs	r0, r4
 8000c48:	bc3c      	pop	{r2, r3, r4, r5}
 8000c4a:	4690      	mov	r8, r2
 8000c4c:	4699      	mov	r9, r3
 8000c4e:	46a2      	mov	sl, r4
 8000c50:	46ab      	mov	fp, r5
 8000c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c54:	2f00      	cmp	r7, #0
 8000c56:	d115      	bne.n	8000c84 <__aeabi_fmul+0xdc>
 8000c58:	2304      	movs	r3, #4
 8000c5a:	4699      	mov	r9, r3
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	2600      	movs	r6, #0
 8000c60:	469a      	mov	sl, r3
 8000c62:	e7b9      	b.n	8000bd8 <__aeabi_fmul+0x30>
 8000c64:	20ff      	movs	r0, #255	; 0xff
 8000c66:	2202      	movs	r2, #2
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0c5      	beq.n	8000bf8 <__aeabi_fmul+0x50>
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	e7c3      	b.n	8000bf8 <__aeabi_fmul+0x50>
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d119      	bne.n	8000ca8 <__aeabi_fmul+0x100>
 8000c74:	2000      	movs	r0, #0
 8000c76:	2201      	movs	r2, #1
 8000c78:	e7be      	b.n	8000bf8 <__aeabi_fmul+0x50>
 8000c7a:	2401      	movs	r4, #1
 8000c7c:	22ff      	movs	r2, #255	; 0xff
 8000c7e:	400c      	ands	r4, r1
 8000c80:	2000      	movs	r0, #0
 8000c82:	e7db      	b.n	8000c3c <__aeabi_fmul+0x94>
 8000c84:	0038      	movs	r0, r7
 8000c86:	f001 fa55 	bl	8002134 <__clzsi2>
 8000c8a:	2676      	movs	r6, #118	; 0x76
 8000c8c:	1f43      	subs	r3, r0, #5
 8000c8e:	409f      	lsls	r7, r3
 8000c90:	2300      	movs	r3, #0
 8000c92:	4276      	negs	r6, r6
 8000c94:	1a36      	subs	r6, r6, r0
 8000c96:	4699      	mov	r9, r3
 8000c98:	469a      	mov	sl, r3
 8000c9a:	e79d      	b.n	8000bd8 <__aeabi_fmul+0x30>
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	3b09      	subs	r3, #9
 8000ca2:	26ff      	movs	r6, #255	; 0xff
 8000ca4:	469a      	mov	sl, r3
 8000ca6:	e797      	b.n	8000bd8 <__aeabi_fmul+0x30>
 8000ca8:	0028      	movs	r0, r5
 8000caa:	f001 fa43 	bl	8002134 <__clzsi2>
 8000cae:	1f43      	subs	r3, r0, #5
 8000cb0:	409d      	lsls	r5, r3
 8000cb2:	2376      	movs	r3, #118	; 0x76
 8000cb4:	425b      	negs	r3, r3
 8000cb6:	1a18      	subs	r0, r3, r0
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e79d      	b.n	8000bf8 <__aeabi_fmul+0x50>
 8000cbc:	2080      	movs	r0, #128	; 0x80
 8000cbe:	2400      	movs	r4, #0
 8000cc0:	03c0      	lsls	r0, r0, #15
 8000cc2:	22ff      	movs	r2, #255	; 0xff
 8000cc4:	e7ba      	b.n	8000c3c <__aeabi_fmul+0x94>
 8000cc6:	003d      	movs	r5, r7
 8000cc8:	4652      	mov	r2, sl
 8000cca:	e7ab      	b.n	8000c24 <__aeabi_fmul+0x7c>
 8000ccc:	003d      	movs	r5, r7
 8000cce:	0021      	movs	r1, r4
 8000cd0:	4652      	mov	r2, sl
 8000cd2:	e7a7      	b.n	8000c24 <__aeabi_fmul+0x7c>
 8000cd4:	0c3b      	lsrs	r3, r7, #16
 8000cd6:	469c      	mov	ip, r3
 8000cd8:	042a      	lsls	r2, r5, #16
 8000cda:	0c12      	lsrs	r2, r2, #16
 8000cdc:	0c2b      	lsrs	r3, r5, #16
 8000cde:	0014      	movs	r4, r2
 8000ce0:	4660      	mov	r0, ip
 8000ce2:	4665      	mov	r5, ip
 8000ce4:	043f      	lsls	r7, r7, #16
 8000ce6:	0c3f      	lsrs	r7, r7, #16
 8000ce8:	437c      	muls	r4, r7
 8000cea:	4342      	muls	r2, r0
 8000cec:	435d      	muls	r5, r3
 8000cee:	437b      	muls	r3, r7
 8000cf0:	0c27      	lsrs	r7, r4, #16
 8000cf2:	189b      	adds	r3, r3, r2
 8000cf4:	18ff      	adds	r7, r7, r3
 8000cf6:	42ba      	cmp	r2, r7
 8000cf8:	d903      	bls.n	8000d02 <__aeabi_fmul+0x15a>
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	025b      	lsls	r3, r3, #9
 8000cfe:	469c      	mov	ip, r3
 8000d00:	4465      	add	r5, ip
 8000d02:	0424      	lsls	r4, r4, #16
 8000d04:	043a      	lsls	r2, r7, #16
 8000d06:	0c24      	lsrs	r4, r4, #16
 8000d08:	1912      	adds	r2, r2, r4
 8000d0a:	0193      	lsls	r3, r2, #6
 8000d0c:	1e5c      	subs	r4, r3, #1
 8000d0e:	41a3      	sbcs	r3, r4
 8000d10:	0c3f      	lsrs	r7, r7, #16
 8000d12:	0e92      	lsrs	r2, r2, #26
 8000d14:	197d      	adds	r5, r7, r5
 8000d16:	431a      	orrs	r2, r3
 8000d18:	01ad      	lsls	r5, r5, #6
 8000d1a:	4315      	orrs	r5, r2
 8000d1c:	012b      	lsls	r3, r5, #4
 8000d1e:	d504      	bpl.n	8000d2a <__aeabi_fmul+0x182>
 8000d20:	2301      	movs	r3, #1
 8000d22:	465e      	mov	r6, fp
 8000d24:	086a      	lsrs	r2, r5, #1
 8000d26:	401d      	ands	r5, r3
 8000d28:	4315      	orrs	r5, r2
 8000d2a:	0032      	movs	r2, r6
 8000d2c:	327f      	adds	r2, #127	; 0x7f
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	dd25      	ble.n	8000d7e <__aeabi_fmul+0x1d6>
 8000d32:	076b      	lsls	r3, r5, #29
 8000d34:	d004      	beq.n	8000d40 <__aeabi_fmul+0x198>
 8000d36:	230f      	movs	r3, #15
 8000d38:	402b      	ands	r3, r5
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d000      	beq.n	8000d40 <__aeabi_fmul+0x198>
 8000d3e:	3504      	adds	r5, #4
 8000d40:	012b      	lsls	r3, r5, #4
 8000d42:	d503      	bpl.n	8000d4c <__aeabi_fmul+0x1a4>
 8000d44:	0032      	movs	r2, r6
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <__aeabi_fmul+0x23c>)
 8000d48:	3280      	adds	r2, #128	; 0x80
 8000d4a:	401d      	ands	r5, r3
 8000d4c:	2afe      	cmp	r2, #254	; 0xfe
 8000d4e:	dc94      	bgt.n	8000c7a <__aeabi_fmul+0xd2>
 8000d50:	2401      	movs	r4, #1
 8000d52:	01a8      	lsls	r0, r5, #6
 8000d54:	0a40      	lsrs	r0, r0, #9
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	400c      	ands	r4, r1
 8000d5a:	e76f      	b.n	8000c3c <__aeabi_fmul+0x94>
 8000d5c:	2080      	movs	r0, #128	; 0x80
 8000d5e:	03c0      	lsls	r0, r0, #15
 8000d60:	4207      	tst	r7, r0
 8000d62:	d007      	beq.n	8000d74 <__aeabi_fmul+0x1cc>
 8000d64:	4205      	tst	r5, r0
 8000d66:	d105      	bne.n	8000d74 <__aeabi_fmul+0x1cc>
 8000d68:	4328      	orrs	r0, r5
 8000d6a:	0240      	lsls	r0, r0, #9
 8000d6c:	0a40      	lsrs	r0, r0, #9
 8000d6e:	4644      	mov	r4, r8
 8000d70:	22ff      	movs	r2, #255	; 0xff
 8000d72:	e763      	b.n	8000c3c <__aeabi_fmul+0x94>
 8000d74:	4338      	orrs	r0, r7
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	0a40      	lsrs	r0, r0, #9
 8000d7a:	22ff      	movs	r2, #255	; 0xff
 8000d7c:	e75e      	b.n	8000c3c <__aeabi_fmul+0x94>
 8000d7e:	2401      	movs	r4, #1
 8000d80:	1aa3      	subs	r3, r4, r2
 8000d82:	2b1b      	cmp	r3, #27
 8000d84:	dd05      	ble.n	8000d92 <__aeabi_fmul+0x1ea>
 8000d86:	400c      	ands	r4, r1
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	e756      	b.n	8000c3c <__aeabi_fmul+0x94>
 8000d8e:	465e      	mov	r6, fp
 8000d90:	e7cb      	b.n	8000d2a <__aeabi_fmul+0x182>
 8000d92:	002a      	movs	r2, r5
 8000d94:	2020      	movs	r0, #32
 8000d96:	40da      	lsrs	r2, r3
 8000d98:	1ac3      	subs	r3, r0, r3
 8000d9a:	409d      	lsls	r5, r3
 8000d9c:	002b      	movs	r3, r5
 8000d9e:	1e5d      	subs	r5, r3, #1
 8000da0:	41ab      	sbcs	r3, r5
 8000da2:	4313      	orrs	r3, r2
 8000da4:	075a      	lsls	r2, r3, #29
 8000da6:	d004      	beq.n	8000db2 <__aeabi_fmul+0x20a>
 8000da8:	220f      	movs	r2, #15
 8000daa:	401a      	ands	r2, r3
 8000dac:	2a04      	cmp	r2, #4
 8000dae:	d000      	beq.n	8000db2 <__aeabi_fmul+0x20a>
 8000db0:	3304      	adds	r3, #4
 8000db2:	015a      	lsls	r2, r3, #5
 8000db4:	d504      	bpl.n	8000dc0 <__aeabi_fmul+0x218>
 8000db6:	2401      	movs	r4, #1
 8000db8:	2201      	movs	r2, #1
 8000dba:	400c      	ands	r4, r1
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	e73d      	b.n	8000c3c <__aeabi_fmul+0x94>
 8000dc0:	2401      	movs	r4, #1
 8000dc2:	019b      	lsls	r3, r3, #6
 8000dc4:	0a58      	lsrs	r0, r3, #9
 8000dc6:	400c      	ands	r4, r1
 8000dc8:	2200      	movs	r2, #0
 8000dca:	e737      	b.n	8000c3c <__aeabi_fmul+0x94>
 8000dcc:	2080      	movs	r0, #128	; 0x80
 8000dce:	2401      	movs	r4, #1
 8000dd0:	03c0      	lsls	r0, r0, #15
 8000dd2:	4328      	orrs	r0, r5
 8000dd4:	0240      	lsls	r0, r0, #9
 8000dd6:	0a40      	lsrs	r0, r0, #9
 8000dd8:	400c      	ands	r4, r1
 8000dda:	22ff      	movs	r2, #255	; 0xff
 8000ddc:	e72e      	b.n	8000c3c <__aeabi_fmul+0x94>
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	08008ab4 	.word	0x08008ab4
 8000de4:	f7ffffff 	.word	0xf7ffffff

08000de8 <__aeabi_fsub>:
 8000de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dea:	464f      	mov	r7, r9
 8000dec:	46d6      	mov	lr, sl
 8000dee:	4646      	mov	r6, r8
 8000df0:	0044      	lsls	r4, r0, #1
 8000df2:	b5c0      	push	{r6, r7, lr}
 8000df4:	0fc2      	lsrs	r2, r0, #31
 8000df6:	0247      	lsls	r7, r0, #9
 8000df8:	0248      	lsls	r0, r1, #9
 8000dfa:	0a40      	lsrs	r0, r0, #9
 8000dfc:	4684      	mov	ip, r0
 8000dfe:	4666      	mov	r6, ip
 8000e00:	0a7b      	lsrs	r3, r7, #9
 8000e02:	0048      	lsls	r0, r1, #1
 8000e04:	0fc9      	lsrs	r1, r1, #31
 8000e06:	469a      	mov	sl, r3
 8000e08:	0e24      	lsrs	r4, r4, #24
 8000e0a:	0015      	movs	r5, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	0e00      	lsrs	r0, r0, #24
 8000e10:	4689      	mov	r9, r1
 8000e12:	00f6      	lsls	r6, r6, #3
 8000e14:	28ff      	cmp	r0, #255	; 0xff
 8000e16:	d100      	bne.n	8000e1a <__aeabi_fsub+0x32>
 8000e18:	e08f      	b.n	8000f3a <__aeabi_fsub+0x152>
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	464f      	mov	r7, r9
 8000e1e:	404f      	eors	r7, r1
 8000e20:	0039      	movs	r1, r7
 8000e22:	4291      	cmp	r1, r2
 8000e24:	d066      	beq.n	8000ef4 <__aeabi_fsub+0x10c>
 8000e26:	1a22      	subs	r2, r4, r0
 8000e28:	2a00      	cmp	r2, #0
 8000e2a:	dc00      	bgt.n	8000e2e <__aeabi_fsub+0x46>
 8000e2c:	e09d      	b.n	8000f6a <__aeabi_fsub+0x182>
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	d13d      	bne.n	8000eae <__aeabi_fsub+0xc6>
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d100      	bne.n	8000e38 <__aeabi_fsub+0x50>
 8000e36:	e08b      	b.n	8000f50 <__aeabi_fsub+0x168>
 8000e38:	1e51      	subs	r1, r2, #1
 8000e3a:	2900      	cmp	r1, #0
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_fsub+0x58>
 8000e3e:	e0b5      	b.n	8000fac <__aeabi_fsub+0x1c4>
 8000e40:	2401      	movs	r4, #1
 8000e42:	1b9b      	subs	r3, r3, r6
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d544      	bpl.n	8000ed2 <__aeabi_fsub+0xea>
 8000e48:	019b      	lsls	r3, r3, #6
 8000e4a:	099f      	lsrs	r7, r3, #6
 8000e4c:	0038      	movs	r0, r7
 8000e4e:	f001 f971 	bl	8002134 <__clzsi2>
 8000e52:	3805      	subs	r0, #5
 8000e54:	4087      	lsls	r7, r0
 8000e56:	4284      	cmp	r4, r0
 8000e58:	dd00      	ble.n	8000e5c <__aeabi_fsub+0x74>
 8000e5a:	e096      	b.n	8000f8a <__aeabi_fsub+0x1a2>
 8000e5c:	1b04      	subs	r4, r0, r4
 8000e5e:	003a      	movs	r2, r7
 8000e60:	2020      	movs	r0, #32
 8000e62:	3401      	adds	r4, #1
 8000e64:	40e2      	lsrs	r2, r4
 8000e66:	1b04      	subs	r4, r0, r4
 8000e68:	40a7      	lsls	r7, r4
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	1e5f      	subs	r7, r3, #1
 8000e6e:	41bb      	sbcs	r3, r7
 8000e70:	2400      	movs	r4, #0
 8000e72:	4313      	orrs	r3, r2
 8000e74:	075a      	lsls	r2, r3, #29
 8000e76:	d004      	beq.n	8000e82 <__aeabi_fsub+0x9a>
 8000e78:	220f      	movs	r2, #15
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	2a04      	cmp	r2, #4
 8000e7e:	d000      	beq.n	8000e82 <__aeabi_fsub+0x9a>
 8000e80:	3304      	adds	r3, #4
 8000e82:	015a      	lsls	r2, r3, #5
 8000e84:	d527      	bpl.n	8000ed6 <__aeabi_fsub+0xee>
 8000e86:	3401      	adds	r4, #1
 8000e88:	2cff      	cmp	r4, #255	; 0xff
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_fsub+0xa6>
 8000e8c:	e079      	b.n	8000f82 <__aeabi_fsub+0x19a>
 8000e8e:	2201      	movs	r2, #1
 8000e90:	019b      	lsls	r3, r3, #6
 8000e92:	0a5b      	lsrs	r3, r3, #9
 8000e94:	b2e4      	uxtb	r4, r4
 8000e96:	402a      	ands	r2, r5
 8000e98:	025b      	lsls	r3, r3, #9
 8000e9a:	05e4      	lsls	r4, r4, #23
 8000e9c:	0a58      	lsrs	r0, r3, #9
 8000e9e:	07d2      	lsls	r2, r2, #31
 8000ea0:	4320      	orrs	r0, r4
 8000ea2:	4310      	orrs	r0, r2
 8000ea4:	bc1c      	pop	{r2, r3, r4}
 8000ea6:	4690      	mov	r8, r2
 8000ea8:	4699      	mov	r9, r3
 8000eaa:	46a2      	mov	sl, r4
 8000eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eae:	2cff      	cmp	r4, #255	; 0xff
 8000eb0:	d0e0      	beq.n	8000e74 <__aeabi_fsub+0x8c>
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	04c9      	lsls	r1, r1, #19
 8000eb6:	430e      	orrs	r6, r1
 8000eb8:	2a1b      	cmp	r2, #27
 8000eba:	dc7b      	bgt.n	8000fb4 <__aeabi_fsub+0x1cc>
 8000ebc:	0031      	movs	r1, r6
 8000ebe:	2020      	movs	r0, #32
 8000ec0:	40d1      	lsrs	r1, r2
 8000ec2:	1a82      	subs	r2, r0, r2
 8000ec4:	4096      	lsls	r6, r2
 8000ec6:	1e72      	subs	r2, r6, #1
 8000ec8:	4196      	sbcs	r6, r2
 8000eca:	430e      	orrs	r6, r1
 8000ecc:	1b9b      	subs	r3, r3, r6
 8000ece:	015a      	lsls	r2, r3, #5
 8000ed0:	d4ba      	bmi.n	8000e48 <__aeabi_fsub+0x60>
 8000ed2:	075a      	lsls	r2, r3, #29
 8000ed4:	d1d0      	bne.n	8000e78 <__aeabi_fsub+0x90>
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	08df      	lsrs	r7, r3, #3
 8000eda:	402a      	ands	r2, r5
 8000edc:	2cff      	cmp	r4, #255	; 0xff
 8000ede:	d133      	bne.n	8000f48 <__aeabi_fsub+0x160>
 8000ee0:	2f00      	cmp	r7, #0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fsub+0xfe>
 8000ee4:	e0a8      	b.n	8001038 <__aeabi_fsub+0x250>
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	03db      	lsls	r3, r3, #15
 8000eea:	433b      	orrs	r3, r7
 8000eec:	025b      	lsls	r3, r3, #9
 8000eee:	0a5b      	lsrs	r3, r3, #9
 8000ef0:	24ff      	movs	r4, #255	; 0xff
 8000ef2:	e7d1      	b.n	8000e98 <__aeabi_fsub+0xb0>
 8000ef4:	1a21      	subs	r1, r4, r0
 8000ef6:	2900      	cmp	r1, #0
 8000ef8:	dd4c      	ble.n	8000f94 <__aeabi_fsub+0x1ac>
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d02a      	beq.n	8000f54 <__aeabi_fsub+0x16c>
 8000efe:	2cff      	cmp	r4, #255	; 0xff
 8000f00:	d0b8      	beq.n	8000e74 <__aeabi_fsub+0x8c>
 8000f02:	2080      	movs	r0, #128	; 0x80
 8000f04:	04c0      	lsls	r0, r0, #19
 8000f06:	4306      	orrs	r6, r0
 8000f08:	291b      	cmp	r1, #27
 8000f0a:	dd00      	ble.n	8000f0e <__aeabi_fsub+0x126>
 8000f0c:	e0af      	b.n	800106e <__aeabi_fsub+0x286>
 8000f0e:	0030      	movs	r0, r6
 8000f10:	2720      	movs	r7, #32
 8000f12:	40c8      	lsrs	r0, r1
 8000f14:	1a79      	subs	r1, r7, r1
 8000f16:	408e      	lsls	r6, r1
 8000f18:	1e71      	subs	r1, r6, #1
 8000f1a:	418e      	sbcs	r6, r1
 8000f1c:	4306      	orrs	r6, r0
 8000f1e:	199b      	adds	r3, r3, r6
 8000f20:	0159      	lsls	r1, r3, #5
 8000f22:	d5d6      	bpl.n	8000ed2 <__aeabi_fsub+0xea>
 8000f24:	3401      	adds	r4, #1
 8000f26:	2cff      	cmp	r4, #255	; 0xff
 8000f28:	d100      	bne.n	8000f2c <__aeabi_fsub+0x144>
 8000f2a:	e085      	b.n	8001038 <__aeabi_fsub+0x250>
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	497a      	ldr	r1, [pc, #488]	; (8001118 <__aeabi_fsub+0x330>)
 8000f30:	401a      	ands	r2, r3
 8000f32:	085b      	lsrs	r3, r3, #1
 8000f34:	400b      	ands	r3, r1
 8000f36:	4313      	orrs	r3, r2
 8000f38:	e79c      	b.n	8000e74 <__aeabi_fsub+0x8c>
 8000f3a:	2e00      	cmp	r6, #0
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fsub+0x158>
 8000f3e:	e770      	b.n	8000e22 <__aeabi_fsub+0x3a>
 8000f40:	e76b      	b.n	8000e1a <__aeabi_fsub+0x32>
 8000f42:	1e3b      	subs	r3, r7, #0
 8000f44:	d1c5      	bne.n	8000ed2 <__aeabi_fsub+0xea>
 8000f46:	2200      	movs	r2, #0
 8000f48:	027b      	lsls	r3, r7, #9
 8000f4a:	0a5b      	lsrs	r3, r3, #9
 8000f4c:	b2e4      	uxtb	r4, r4
 8000f4e:	e7a3      	b.n	8000e98 <__aeabi_fsub+0xb0>
 8000f50:	0014      	movs	r4, r2
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fsub+0x8c>
 8000f54:	2e00      	cmp	r6, #0
 8000f56:	d04d      	beq.n	8000ff4 <__aeabi_fsub+0x20c>
 8000f58:	1e48      	subs	r0, r1, #1
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	d157      	bne.n	800100e <__aeabi_fsub+0x226>
 8000f5e:	199b      	adds	r3, r3, r6
 8000f60:	2401      	movs	r4, #1
 8000f62:	015a      	lsls	r2, r3, #5
 8000f64:	d5b5      	bpl.n	8000ed2 <__aeabi_fsub+0xea>
 8000f66:	2402      	movs	r4, #2
 8000f68:	e7e0      	b.n	8000f2c <__aeabi_fsub+0x144>
 8000f6a:	2a00      	cmp	r2, #0
 8000f6c:	d125      	bne.n	8000fba <__aeabi_fsub+0x1d2>
 8000f6e:	1c62      	adds	r2, r4, #1
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	2a01      	cmp	r2, #1
 8000f74:	dd72      	ble.n	800105c <__aeabi_fsub+0x274>
 8000f76:	1b9f      	subs	r7, r3, r6
 8000f78:	017a      	lsls	r2, r7, #5
 8000f7a:	d535      	bpl.n	8000fe8 <__aeabi_fsub+0x200>
 8000f7c:	1af7      	subs	r7, r6, r3
 8000f7e:	000d      	movs	r5, r1
 8000f80:	e764      	b.n	8000e4c <__aeabi_fsub+0x64>
 8000f82:	2201      	movs	r2, #1
 8000f84:	2300      	movs	r3, #0
 8000f86:	402a      	ands	r2, r5
 8000f88:	e786      	b.n	8000e98 <__aeabi_fsub+0xb0>
 8000f8a:	003b      	movs	r3, r7
 8000f8c:	4a63      	ldr	r2, [pc, #396]	; (800111c <__aeabi_fsub+0x334>)
 8000f8e:	1a24      	subs	r4, r4, r0
 8000f90:	4013      	ands	r3, r2
 8000f92:	e76f      	b.n	8000e74 <__aeabi_fsub+0x8c>
 8000f94:	2900      	cmp	r1, #0
 8000f96:	d16c      	bne.n	8001072 <__aeabi_fsub+0x28a>
 8000f98:	1c61      	adds	r1, r4, #1
 8000f9a:	b2c8      	uxtb	r0, r1
 8000f9c:	2801      	cmp	r0, #1
 8000f9e:	dd4e      	ble.n	800103e <__aeabi_fsub+0x256>
 8000fa0:	29ff      	cmp	r1, #255	; 0xff
 8000fa2:	d049      	beq.n	8001038 <__aeabi_fsub+0x250>
 8000fa4:	199b      	adds	r3, r3, r6
 8000fa6:	085b      	lsrs	r3, r3, #1
 8000fa8:	000c      	movs	r4, r1
 8000faa:	e763      	b.n	8000e74 <__aeabi_fsub+0x8c>
 8000fac:	2aff      	cmp	r2, #255	; 0xff
 8000fae:	d041      	beq.n	8001034 <__aeabi_fsub+0x24c>
 8000fb0:	000a      	movs	r2, r1
 8000fb2:	e781      	b.n	8000eb8 <__aeabi_fsub+0xd0>
 8000fb4:	2601      	movs	r6, #1
 8000fb6:	1b9b      	subs	r3, r3, r6
 8000fb8:	e789      	b.n	8000ece <__aeabi_fsub+0xe6>
 8000fba:	2c00      	cmp	r4, #0
 8000fbc:	d01c      	beq.n	8000ff8 <__aeabi_fsub+0x210>
 8000fbe:	28ff      	cmp	r0, #255	; 0xff
 8000fc0:	d021      	beq.n	8001006 <__aeabi_fsub+0x21e>
 8000fc2:	2480      	movs	r4, #128	; 0x80
 8000fc4:	04e4      	lsls	r4, r4, #19
 8000fc6:	4252      	negs	r2, r2
 8000fc8:	4323      	orrs	r3, r4
 8000fca:	2a1b      	cmp	r2, #27
 8000fcc:	dd00      	ble.n	8000fd0 <__aeabi_fsub+0x1e8>
 8000fce:	e096      	b.n	80010fe <__aeabi_fsub+0x316>
 8000fd0:	001c      	movs	r4, r3
 8000fd2:	2520      	movs	r5, #32
 8000fd4:	40d4      	lsrs	r4, r2
 8000fd6:	1aaa      	subs	r2, r5, r2
 8000fd8:	4093      	lsls	r3, r2
 8000fda:	1e5a      	subs	r2, r3, #1
 8000fdc:	4193      	sbcs	r3, r2
 8000fde:	4323      	orrs	r3, r4
 8000fe0:	1af3      	subs	r3, r6, r3
 8000fe2:	0004      	movs	r4, r0
 8000fe4:	000d      	movs	r5, r1
 8000fe6:	e72d      	b.n	8000e44 <__aeabi_fsub+0x5c>
 8000fe8:	2f00      	cmp	r7, #0
 8000fea:	d000      	beq.n	8000fee <__aeabi_fsub+0x206>
 8000fec:	e72e      	b.n	8000e4c <__aeabi_fsub+0x64>
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	e7a9      	b.n	8000f48 <__aeabi_fsub+0x160>
 8000ff4:	000c      	movs	r4, r1
 8000ff6:	e73d      	b.n	8000e74 <__aeabi_fsub+0x8c>
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d058      	beq.n	80010ae <__aeabi_fsub+0x2c6>
 8000ffc:	43d2      	mvns	r2, r2
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	d0ee      	beq.n	8000fe0 <__aeabi_fsub+0x1f8>
 8001002:	28ff      	cmp	r0, #255	; 0xff
 8001004:	d1e1      	bne.n	8000fca <__aeabi_fsub+0x1e2>
 8001006:	0033      	movs	r3, r6
 8001008:	24ff      	movs	r4, #255	; 0xff
 800100a:	000d      	movs	r5, r1
 800100c:	e732      	b.n	8000e74 <__aeabi_fsub+0x8c>
 800100e:	29ff      	cmp	r1, #255	; 0xff
 8001010:	d010      	beq.n	8001034 <__aeabi_fsub+0x24c>
 8001012:	0001      	movs	r1, r0
 8001014:	e778      	b.n	8000f08 <__aeabi_fsub+0x120>
 8001016:	2b00      	cmp	r3, #0
 8001018:	d06e      	beq.n	80010f8 <__aeabi_fsub+0x310>
 800101a:	24ff      	movs	r4, #255	; 0xff
 800101c:	2e00      	cmp	r6, #0
 800101e:	d100      	bne.n	8001022 <__aeabi_fsub+0x23a>
 8001020:	e728      	b.n	8000e74 <__aeabi_fsub+0x8c>
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	4651      	mov	r1, sl
 8001026:	03d2      	lsls	r2, r2, #15
 8001028:	4211      	tst	r1, r2
 800102a:	d003      	beq.n	8001034 <__aeabi_fsub+0x24c>
 800102c:	4661      	mov	r1, ip
 800102e:	4211      	tst	r1, r2
 8001030:	d100      	bne.n	8001034 <__aeabi_fsub+0x24c>
 8001032:	0033      	movs	r3, r6
 8001034:	24ff      	movs	r4, #255	; 0xff
 8001036:	e71d      	b.n	8000e74 <__aeabi_fsub+0x8c>
 8001038:	24ff      	movs	r4, #255	; 0xff
 800103a:	2300      	movs	r3, #0
 800103c:	e72c      	b.n	8000e98 <__aeabi_fsub+0xb0>
 800103e:	2c00      	cmp	r4, #0
 8001040:	d1e9      	bne.n	8001016 <__aeabi_fsub+0x22e>
 8001042:	2b00      	cmp	r3, #0
 8001044:	d063      	beq.n	800110e <__aeabi_fsub+0x326>
 8001046:	2e00      	cmp	r6, #0
 8001048:	d100      	bne.n	800104c <__aeabi_fsub+0x264>
 800104a:	e713      	b.n	8000e74 <__aeabi_fsub+0x8c>
 800104c:	199b      	adds	r3, r3, r6
 800104e:	015a      	lsls	r2, r3, #5
 8001050:	d400      	bmi.n	8001054 <__aeabi_fsub+0x26c>
 8001052:	e73e      	b.n	8000ed2 <__aeabi_fsub+0xea>
 8001054:	4a31      	ldr	r2, [pc, #196]	; (800111c <__aeabi_fsub+0x334>)
 8001056:	000c      	movs	r4, r1
 8001058:	4013      	ands	r3, r2
 800105a:	e70b      	b.n	8000e74 <__aeabi_fsub+0x8c>
 800105c:	2c00      	cmp	r4, #0
 800105e:	d11e      	bne.n	800109e <__aeabi_fsub+0x2b6>
 8001060:	2b00      	cmp	r3, #0
 8001062:	d12f      	bne.n	80010c4 <__aeabi_fsub+0x2dc>
 8001064:	2e00      	cmp	r6, #0
 8001066:	d04f      	beq.n	8001108 <__aeabi_fsub+0x320>
 8001068:	0033      	movs	r3, r6
 800106a:	000d      	movs	r5, r1
 800106c:	e702      	b.n	8000e74 <__aeabi_fsub+0x8c>
 800106e:	2601      	movs	r6, #1
 8001070:	e755      	b.n	8000f1e <__aeabi_fsub+0x136>
 8001072:	2c00      	cmp	r4, #0
 8001074:	d11f      	bne.n	80010b6 <__aeabi_fsub+0x2ce>
 8001076:	2b00      	cmp	r3, #0
 8001078:	d043      	beq.n	8001102 <__aeabi_fsub+0x31a>
 800107a:	43c9      	mvns	r1, r1
 800107c:	2900      	cmp	r1, #0
 800107e:	d00b      	beq.n	8001098 <__aeabi_fsub+0x2b0>
 8001080:	28ff      	cmp	r0, #255	; 0xff
 8001082:	d039      	beq.n	80010f8 <__aeabi_fsub+0x310>
 8001084:	291b      	cmp	r1, #27
 8001086:	dc44      	bgt.n	8001112 <__aeabi_fsub+0x32a>
 8001088:	001c      	movs	r4, r3
 800108a:	2720      	movs	r7, #32
 800108c:	40cc      	lsrs	r4, r1
 800108e:	1a79      	subs	r1, r7, r1
 8001090:	408b      	lsls	r3, r1
 8001092:	1e59      	subs	r1, r3, #1
 8001094:	418b      	sbcs	r3, r1
 8001096:	4323      	orrs	r3, r4
 8001098:	199b      	adds	r3, r3, r6
 800109a:	0004      	movs	r4, r0
 800109c:	e740      	b.n	8000f20 <__aeabi_fsub+0x138>
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d11a      	bne.n	80010d8 <__aeabi_fsub+0x2f0>
 80010a2:	2e00      	cmp	r6, #0
 80010a4:	d124      	bne.n	80010f0 <__aeabi_fsub+0x308>
 80010a6:	2780      	movs	r7, #128	; 0x80
 80010a8:	2200      	movs	r2, #0
 80010aa:	03ff      	lsls	r7, r7, #15
 80010ac:	e71b      	b.n	8000ee6 <__aeabi_fsub+0xfe>
 80010ae:	0033      	movs	r3, r6
 80010b0:	0004      	movs	r4, r0
 80010b2:	000d      	movs	r5, r1
 80010b4:	e6de      	b.n	8000e74 <__aeabi_fsub+0x8c>
 80010b6:	28ff      	cmp	r0, #255	; 0xff
 80010b8:	d01e      	beq.n	80010f8 <__aeabi_fsub+0x310>
 80010ba:	2480      	movs	r4, #128	; 0x80
 80010bc:	04e4      	lsls	r4, r4, #19
 80010be:	4249      	negs	r1, r1
 80010c0:	4323      	orrs	r3, r4
 80010c2:	e7df      	b.n	8001084 <__aeabi_fsub+0x29c>
 80010c4:	2e00      	cmp	r6, #0
 80010c6:	d100      	bne.n	80010ca <__aeabi_fsub+0x2e2>
 80010c8:	e6d4      	b.n	8000e74 <__aeabi_fsub+0x8c>
 80010ca:	1b9f      	subs	r7, r3, r6
 80010cc:	017a      	lsls	r2, r7, #5
 80010ce:	d400      	bmi.n	80010d2 <__aeabi_fsub+0x2ea>
 80010d0:	e737      	b.n	8000f42 <__aeabi_fsub+0x15a>
 80010d2:	1af3      	subs	r3, r6, r3
 80010d4:	000d      	movs	r5, r1
 80010d6:	e6cd      	b.n	8000e74 <__aeabi_fsub+0x8c>
 80010d8:	24ff      	movs	r4, #255	; 0xff
 80010da:	2e00      	cmp	r6, #0
 80010dc:	d100      	bne.n	80010e0 <__aeabi_fsub+0x2f8>
 80010de:	e6c9      	b.n	8000e74 <__aeabi_fsub+0x8c>
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	4650      	mov	r0, sl
 80010e4:	03d2      	lsls	r2, r2, #15
 80010e6:	4210      	tst	r0, r2
 80010e8:	d0a4      	beq.n	8001034 <__aeabi_fsub+0x24c>
 80010ea:	4660      	mov	r0, ip
 80010ec:	4210      	tst	r0, r2
 80010ee:	d1a1      	bne.n	8001034 <__aeabi_fsub+0x24c>
 80010f0:	0033      	movs	r3, r6
 80010f2:	000d      	movs	r5, r1
 80010f4:	24ff      	movs	r4, #255	; 0xff
 80010f6:	e6bd      	b.n	8000e74 <__aeabi_fsub+0x8c>
 80010f8:	0033      	movs	r3, r6
 80010fa:	24ff      	movs	r4, #255	; 0xff
 80010fc:	e6ba      	b.n	8000e74 <__aeabi_fsub+0x8c>
 80010fe:	2301      	movs	r3, #1
 8001100:	e76e      	b.n	8000fe0 <__aeabi_fsub+0x1f8>
 8001102:	0033      	movs	r3, r6
 8001104:	0004      	movs	r4, r0
 8001106:	e6b5      	b.n	8000e74 <__aeabi_fsub+0x8c>
 8001108:	2700      	movs	r7, #0
 800110a:	2200      	movs	r2, #0
 800110c:	e71c      	b.n	8000f48 <__aeabi_fsub+0x160>
 800110e:	0033      	movs	r3, r6
 8001110:	e6b0      	b.n	8000e74 <__aeabi_fsub+0x8c>
 8001112:	2301      	movs	r3, #1
 8001114:	e7c0      	b.n	8001098 <__aeabi_fsub+0x2b0>
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	7dffffff 	.word	0x7dffffff
 800111c:	fbffffff 	.word	0xfbffffff

08001120 <__aeabi_f2iz>:
 8001120:	0241      	lsls	r1, r0, #9
 8001122:	0043      	lsls	r3, r0, #1
 8001124:	0fc2      	lsrs	r2, r0, #31
 8001126:	0a49      	lsrs	r1, r1, #9
 8001128:	0e1b      	lsrs	r3, r3, #24
 800112a:	2000      	movs	r0, #0
 800112c:	2b7e      	cmp	r3, #126	; 0x7e
 800112e:	dd0d      	ble.n	800114c <__aeabi_f2iz+0x2c>
 8001130:	2b9d      	cmp	r3, #157	; 0x9d
 8001132:	dc0c      	bgt.n	800114e <__aeabi_f2iz+0x2e>
 8001134:	2080      	movs	r0, #128	; 0x80
 8001136:	0400      	lsls	r0, r0, #16
 8001138:	4301      	orrs	r1, r0
 800113a:	2b95      	cmp	r3, #149	; 0x95
 800113c:	dc0a      	bgt.n	8001154 <__aeabi_f2iz+0x34>
 800113e:	2096      	movs	r0, #150	; 0x96
 8001140:	1ac3      	subs	r3, r0, r3
 8001142:	40d9      	lsrs	r1, r3
 8001144:	4248      	negs	r0, r1
 8001146:	2a00      	cmp	r2, #0
 8001148:	d100      	bne.n	800114c <__aeabi_f2iz+0x2c>
 800114a:	0008      	movs	r0, r1
 800114c:	4770      	bx	lr
 800114e:	4b03      	ldr	r3, [pc, #12]	; (800115c <__aeabi_f2iz+0x3c>)
 8001150:	18d0      	adds	r0, r2, r3
 8001152:	e7fb      	b.n	800114c <__aeabi_f2iz+0x2c>
 8001154:	3b96      	subs	r3, #150	; 0x96
 8001156:	4099      	lsls	r1, r3
 8001158:	e7f4      	b.n	8001144 <__aeabi_f2iz+0x24>
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	7fffffff 	.word	0x7fffffff

08001160 <__aeabi_i2f>:
 8001160:	b570      	push	{r4, r5, r6, lr}
 8001162:	2800      	cmp	r0, #0
 8001164:	d030      	beq.n	80011c8 <__aeabi_i2f+0x68>
 8001166:	17c3      	asrs	r3, r0, #31
 8001168:	18c4      	adds	r4, r0, r3
 800116a:	405c      	eors	r4, r3
 800116c:	0fc5      	lsrs	r5, r0, #31
 800116e:	0020      	movs	r0, r4
 8001170:	f000 ffe0 	bl	8002134 <__clzsi2>
 8001174:	239e      	movs	r3, #158	; 0x9e
 8001176:	1a1b      	subs	r3, r3, r0
 8001178:	2b96      	cmp	r3, #150	; 0x96
 800117a:	dc0d      	bgt.n	8001198 <__aeabi_i2f+0x38>
 800117c:	2296      	movs	r2, #150	; 0x96
 800117e:	1ad2      	subs	r2, r2, r3
 8001180:	4094      	lsls	r4, r2
 8001182:	002a      	movs	r2, r5
 8001184:	0264      	lsls	r4, r4, #9
 8001186:	0a64      	lsrs	r4, r4, #9
 8001188:	b2db      	uxtb	r3, r3
 800118a:	0264      	lsls	r4, r4, #9
 800118c:	05db      	lsls	r3, r3, #23
 800118e:	0a60      	lsrs	r0, r4, #9
 8001190:	07d2      	lsls	r2, r2, #31
 8001192:	4318      	orrs	r0, r3
 8001194:	4310      	orrs	r0, r2
 8001196:	bd70      	pop	{r4, r5, r6, pc}
 8001198:	2b99      	cmp	r3, #153	; 0x99
 800119a:	dc19      	bgt.n	80011d0 <__aeabi_i2f+0x70>
 800119c:	2299      	movs	r2, #153	; 0x99
 800119e:	1ad2      	subs	r2, r2, r3
 80011a0:	2a00      	cmp	r2, #0
 80011a2:	dd29      	ble.n	80011f8 <__aeabi_i2f+0x98>
 80011a4:	4094      	lsls	r4, r2
 80011a6:	0022      	movs	r2, r4
 80011a8:	4c14      	ldr	r4, [pc, #80]	; (80011fc <__aeabi_i2f+0x9c>)
 80011aa:	4014      	ands	r4, r2
 80011ac:	0751      	lsls	r1, r2, #29
 80011ae:	d004      	beq.n	80011ba <__aeabi_i2f+0x5a>
 80011b0:	210f      	movs	r1, #15
 80011b2:	400a      	ands	r2, r1
 80011b4:	2a04      	cmp	r2, #4
 80011b6:	d000      	beq.n	80011ba <__aeabi_i2f+0x5a>
 80011b8:	3404      	adds	r4, #4
 80011ba:	0162      	lsls	r2, r4, #5
 80011bc:	d413      	bmi.n	80011e6 <__aeabi_i2f+0x86>
 80011be:	01a4      	lsls	r4, r4, #6
 80011c0:	0a64      	lsrs	r4, r4, #9
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	002a      	movs	r2, r5
 80011c6:	e7e0      	b.n	800118a <__aeabi_i2f+0x2a>
 80011c8:	2200      	movs	r2, #0
 80011ca:	2300      	movs	r3, #0
 80011cc:	2400      	movs	r4, #0
 80011ce:	e7dc      	b.n	800118a <__aeabi_i2f+0x2a>
 80011d0:	2205      	movs	r2, #5
 80011d2:	0021      	movs	r1, r4
 80011d4:	1a12      	subs	r2, r2, r0
 80011d6:	40d1      	lsrs	r1, r2
 80011d8:	22b9      	movs	r2, #185	; 0xb9
 80011da:	1ad2      	subs	r2, r2, r3
 80011dc:	4094      	lsls	r4, r2
 80011de:	1e62      	subs	r2, r4, #1
 80011e0:	4194      	sbcs	r4, r2
 80011e2:	430c      	orrs	r4, r1
 80011e4:	e7da      	b.n	800119c <__aeabi_i2f+0x3c>
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <__aeabi_i2f+0x9c>)
 80011e8:	002a      	movs	r2, r5
 80011ea:	401c      	ands	r4, r3
 80011ec:	239f      	movs	r3, #159	; 0x9f
 80011ee:	01a4      	lsls	r4, r4, #6
 80011f0:	1a1b      	subs	r3, r3, r0
 80011f2:	0a64      	lsrs	r4, r4, #9
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	e7c8      	b.n	800118a <__aeabi_i2f+0x2a>
 80011f8:	0022      	movs	r2, r4
 80011fa:	e7d5      	b.n	80011a8 <__aeabi_i2f+0x48>
 80011fc:	fbffffff 	.word	0xfbffffff

08001200 <__aeabi_ui2f>:
 8001200:	b510      	push	{r4, lr}
 8001202:	1e04      	subs	r4, r0, #0
 8001204:	d027      	beq.n	8001256 <__aeabi_ui2f+0x56>
 8001206:	f000 ff95 	bl	8002134 <__clzsi2>
 800120a:	239e      	movs	r3, #158	; 0x9e
 800120c:	1a1b      	subs	r3, r3, r0
 800120e:	2b96      	cmp	r3, #150	; 0x96
 8001210:	dc0a      	bgt.n	8001228 <__aeabi_ui2f+0x28>
 8001212:	2296      	movs	r2, #150	; 0x96
 8001214:	1ad2      	subs	r2, r2, r3
 8001216:	4094      	lsls	r4, r2
 8001218:	0264      	lsls	r4, r4, #9
 800121a:	0a64      	lsrs	r4, r4, #9
 800121c:	b2db      	uxtb	r3, r3
 800121e:	0264      	lsls	r4, r4, #9
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	0a60      	lsrs	r0, r4, #9
 8001224:	4318      	orrs	r0, r3
 8001226:	bd10      	pop	{r4, pc}
 8001228:	2b99      	cmp	r3, #153	; 0x99
 800122a:	dc17      	bgt.n	800125c <__aeabi_ui2f+0x5c>
 800122c:	2299      	movs	r2, #153	; 0x99
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a00      	cmp	r2, #0
 8001232:	dd27      	ble.n	8001284 <__aeabi_ui2f+0x84>
 8001234:	4094      	lsls	r4, r2
 8001236:	0022      	movs	r2, r4
 8001238:	4c13      	ldr	r4, [pc, #76]	; (8001288 <__aeabi_ui2f+0x88>)
 800123a:	4014      	ands	r4, r2
 800123c:	0751      	lsls	r1, r2, #29
 800123e:	d004      	beq.n	800124a <__aeabi_ui2f+0x4a>
 8001240:	210f      	movs	r1, #15
 8001242:	400a      	ands	r2, r1
 8001244:	2a04      	cmp	r2, #4
 8001246:	d000      	beq.n	800124a <__aeabi_ui2f+0x4a>
 8001248:	3404      	adds	r4, #4
 800124a:	0162      	lsls	r2, r4, #5
 800124c:	d412      	bmi.n	8001274 <__aeabi_ui2f+0x74>
 800124e:	01a4      	lsls	r4, r4, #6
 8001250:	0a64      	lsrs	r4, r4, #9
 8001252:	b2db      	uxtb	r3, r3
 8001254:	e7e3      	b.n	800121e <__aeabi_ui2f+0x1e>
 8001256:	2300      	movs	r3, #0
 8001258:	2400      	movs	r4, #0
 800125a:	e7e0      	b.n	800121e <__aeabi_ui2f+0x1e>
 800125c:	22b9      	movs	r2, #185	; 0xb9
 800125e:	0021      	movs	r1, r4
 8001260:	1ad2      	subs	r2, r2, r3
 8001262:	4091      	lsls	r1, r2
 8001264:	000a      	movs	r2, r1
 8001266:	1e51      	subs	r1, r2, #1
 8001268:	418a      	sbcs	r2, r1
 800126a:	2105      	movs	r1, #5
 800126c:	1a09      	subs	r1, r1, r0
 800126e:	40cc      	lsrs	r4, r1
 8001270:	4314      	orrs	r4, r2
 8001272:	e7db      	b.n	800122c <__aeabi_ui2f+0x2c>
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <__aeabi_ui2f+0x88>)
 8001276:	401c      	ands	r4, r3
 8001278:	239f      	movs	r3, #159	; 0x9f
 800127a:	01a4      	lsls	r4, r4, #6
 800127c:	1a1b      	subs	r3, r3, r0
 800127e:	0a64      	lsrs	r4, r4, #9
 8001280:	b2db      	uxtb	r3, r3
 8001282:	e7cc      	b.n	800121e <__aeabi_ui2f+0x1e>
 8001284:	0022      	movs	r2, r4
 8001286:	e7d7      	b.n	8001238 <__aeabi_ui2f+0x38>
 8001288:	fbffffff 	.word	0xfbffffff

0800128c <__eqdf2>:
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128e:	464f      	mov	r7, r9
 8001290:	4646      	mov	r6, r8
 8001292:	46d6      	mov	lr, sl
 8001294:	005c      	lsls	r4, r3, #1
 8001296:	b5c0      	push	{r6, r7, lr}
 8001298:	031f      	lsls	r7, r3, #12
 800129a:	0fdb      	lsrs	r3, r3, #31
 800129c:	469a      	mov	sl, r3
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <__eqdf2+0x70>)
 80012a0:	030e      	lsls	r6, r1, #12
 80012a2:	004d      	lsls	r5, r1, #1
 80012a4:	4684      	mov	ip, r0
 80012a6:	4680      	mov	r8, r0
 80012a8:	0b36      	lsrs	r6, r6, #12
 80012aa:	0d6d      	lsrs	r5, r5, #21
 80012ac:	0fc9      	lsrs	r1, r1, #31
 80012ae:	4691      	mov	r9, r2
 80012b0:	0b3f      	lsrs	r7, r7, #12
 80012b2:	0d64      	lsrs	r4, r4, #21
 80012b4:	2001      	movs	r0, #1
 80012b6:	429d      	cmp	r5, r3
 80012b8:	d008      	beq.n	80012cc <__eqdf2+0x40>
 80012ba:	429c      	cmp	r4, r3
 80012bc:	d001      	beq.n	80012c2 <__eqdf2+0x36>
 80012be:	42a5      	cmp	r5, r4
 80012c0:	d00b      	beq.n	80012da <__eqdf2+0x4e>
 80012c2:	bc1c      	pop	{r2, r3, r4}
 80012c4:	4690      	mov	r8, r2
 80012c6:	4699      	mov	r9, r3
 80012c8:	46a2      	mov	sl, r4
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012cc:	4663      	mov	r3, ip
 80012ce:	4333      	orrs	r3, r6
 80012d0:	d1f7      	bne.n	80012c2 <__eqdf2+0x36>
 80012d2:	42ac      	cmp	r4, r5
 80012d4:	d1f5      	bne.n	80012c2 <__eqdf2+0x36>
 80012d6:	433a      	orrs	r2, r7
 80012d8:	d1f3      	bne.n	80012c2 <__eqdf2+0x36>
 80012da:	2001      	movs	r0, #1
 80012dc:	42be      	cmp	r6, r7
 80012de:	d1f0      	bne.n	80012c2 <__eqdf2+0x36>
 80012e0:	45c8      	cmp	r8, r9
 80012e2:	d1ee      	bne.n	80012c2 <__eqdf2+0x36>
 80012e4:	4551      	cmp	r1, sl
 80012e6:	d007      	beq.n	80012f8 <__eqdf2+0x6c>
 80012e8:	2d00      	cmp	r5, #0
 80012ea:	d1ea      	bne.n	80012c2 <__eqdf2+0x36>
 80012ec:	4663      	mov	r3, ip
 80012ee:	431e      	orrs	r6, r3
 80012f0:	0030      	movs	r0, r6
 80012f2:	1e46      	subs	r6, r0, #1
 80012f4:	41b0      	sbcs	r0, r6
 80012f6:	e7e4      	b.n	80012c2 <__eqdf2+0x36>
 80012f8:	2000      	movs	r0, #0
 80012fa:	e7e2      	b.n	80012c2 <__eqdf2+0x36>
 80012fc:	000007ff 	.word	0x000007ff

08001300 <__gedf2>:
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	4645      	mov	r5, r8
 8001304:	46de      	mov	lr, fp
 8001306:	4657      	mov	r7, sl
 8001308:	464e      	mov	r6, r9
 800130a:	b5e0      	push	{r5, r6, r7, lr}
 800130c:	031f      	lsls	r7, r3, #12
 800130e:	0b3d      	lsrs	r5, r7, #12
 8001310:	4f2c      	ldr	r7, [pc, #176]	; (80013c4 <__gedf2+0xc4>)
 8001312:	030e      	lsls	r6, r1, #12
 8001314:	004c      	lsls	r4, r1, #1
 8001316:	46ab      	mov	fp, r5
 8001318:	005d      	lsls	r5, r3, #1
 800131a:	4684      	mov	ip, r0
 800131c:	0b36      	lsrs	r6, r6, #12
 800131e:	0d64      	lsrs	r4, r4, #21
 8001320:	0fc9      	lsrs	r1, r1, #31
 8001322:	4690      	mov	r8, r2
 8001324:	0d6d      	lsrs	r5, r5, #21
 8001326:	0fdb      	lsrs	r3, r3, #31
 8001328:	42bc      	cmp	r4, r7
 800132a:	d02a      	beq.n	8001382 <__gedf2+0x82>
 800132c:	4f25      	ldr	r7, [pc, #148]	; (80013c4 <__gedf2+0xc4>)
 800132e:	42bd      	cmp	r5, r7
 8001330:	d02d      	beq.n	800138e <__gedf2+0x8e>
 8001332:	2c00      	cmp	r4, #0
 8001334:	d10f      	bne.n	8001356 <__gedf2+0x56>
 8001336:	4330      	orrs	r0, r6
 8001338:	0007      	movs	r7, r0
 800133a:	4681      	mov	r9, r0
 800133c:	4278      	negs	r0, r7
 800133e:	4178      	adcs	r0, r7
 8001340:	b2c0      	uxtb	r0, r0
 8001342:	2d00      	cmp	r5, #0
 8001344:	d117      	bne.n	8001376 <__gedf2+0x76>
 8001346:	465f      	mov	r7, fp
 8001348:	433a      	orrs	r2, r7
 800134a:	d114      	bne.n	8001376 <__gedf2+0x76>
 800134c:	464b      	mov	r3, r9
 800134e:	2000      	movs	r0, #0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00a      	beq.n	800136a <__gedf2+0x6a>
 8001354:	e006      	b.n	8001364 <__gedf2+0x64>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d102      	bne.n	8001360 <__gedf2+0x60>
 800135a:	4658      	mov	r0, fp
 800135c:	4302      	orrs	r2, r0
 800135e:	d001      	beq.n	8001364 <__gedf2+0x64>
 8001360:	4299      	cmp	r1, r3
 8001362:	d018      	beq.n	8001396 <__gedf2+0x96>
 8001364:	4248      	negs	r0, r1
 8001366:	2101      	movs	r1, #1
 8001368:	4308      	orrs	r0, r1
 800136a:	bc3c      	pop	{r2, r3, r4, r5}
 800136c:	4690      	mov	r8, r2
 800136e:	4699      	mov	r9, r3
 8001370:	46a2      	mov	sl, r4
 8001372:	46ab      	mov	fp, r5
 8001374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001376:	2800      	cmp	r0, #0
 8001378:	d0f2      	beq.n	8001360 <__gedf2+0x60>
 800137a:	2001      	movs	r0, #1
 800137c:	3b01      	subs	r3, #1
 800137e:	4318      	orrs	r0, r3
 8001380:	e7f3      	b.n	800136a <__gedf2+0x6a>
 8001382:	0037      	movs	r7, r6
 8001384:	4307      	orrs	r7, r0
 8001386:	d0d1      	beq.n	800132c <__gedf2+0x2c>
 8001388:	2002      	movs	r0, #2
 800138a:	4240      	negs	r0, r0
 800138c:	e7ed      	b.n	800136a <__gedf2+0x6a>
 800138e:	465f      	mov	r7, fp
 8001390:	4317      	orrs	r7, r2
 8001392:	d0ce      	beq.n	8001332 <__gedf2+0x32>
 8001394:	e7f8      	b.n	8001388 <__gedf2+0x88>
 8001396:	42ac      	cmp	r4, r5
 8001398:	dce4      	bgt.n	8001364 <__gedf2+0x64>
 800139a:	da03      	bge.n	80013a4 <__gedf2+0xa4>
 800139c:	1e48      	subs	r0, r1, #1
 800139e:	2101      	movs	r1, #1
 80013a0:	4308      	orrs	r0, r1
 80013a2:	e7e2      	b.n	800136a <__gedf2+0x6a>
 80013a4:	455e      	cmp	r6, fp
 80013a6:	d8dd      	bhi.n	8001364 <__gedf2+0x64>
 80013a8:	d006      	beq.n	80013b8 <__gedf2+0xb8>
 80013aa:	2000      	movs	r0, #0
 80013ac:	455e      	cmp	r6, fp
 80013ae:	d2dc      	bcs.n	800136a <__gedf2+0x6a>
 80013b0:	2301      	movs	r3, #1
 80013b2:	1e48      	subs	r0, r1, #1
 80013b4:	4318      	orrs	r0, r3
 80013b6:	e7d8      	b.n	800136a <__gedf2+0x6a>
 80013b8:	45c4      	cmp	ip, r8
 80013ba:	d8d3      	bhi.n	8001364 <__gedf2+0x64>
 80013bc:	2000      	movs	r0, #0
 80013be:	45c4      	cmp	ip, r8
 80013c0:	d3f6      	bcc.n	80013b0 <__gedf2+0xb0>
 80013c2:	e7d2      	b.n	800136a <__gedf2+0x6a>
 80013c4:	000007ff 	.word	0x000007ff

080013c8 <__ledf2>:
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	464e      	mov	r6, r9
 80013cc:	4645      	mov	r5, r8
 80013ce:	46de      	mov	lr, fp
 80013d0:	4657      	mov	r7, sl
 80013d2:	005c      	lsls	r4, r3, #1
 80013d4:	b5e0      	push	{r5, r6, r7, lr}
 80013d6:	031f      	lsls	r7, r3, #12
 80013d8:	0fdb      	lsrs	r3, r3, #31
 80013da:	4699      	mov	r9, r3
 80013dc:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <__ledf2+0xc0>)
 80013de:	030e      	lsls	r6, r1, #12
 80013e0:	004d      	lsls	r5, r1, #1
 80013e2:	0fc9      	lsrs	r1, r1, #31
 80013e4:	4684      	mov	ip, r0
 80013e6:	0b36      	lsrs	r6, r6, #12
 80013e8:	0d6d      	lsrs	r5, r5, #21
 80013ea:	468b      	mov	fp, r1
 80013ec:	4690      	mov	r8, r2
 80013ee:	0b3f      	lsrs	r7, r7, #12
 80013f0:	0d64      	lsrs	r4, r4, #21
 80013f2:	429d      	cmp	r5, r3
 80013f4:	d020      	beq.n	8001438 <__ledf2+0x70>
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <__ledf2+0xc0>)
 80013f8:	429c      	cmp	r4, r3
 80013fa:	d022      	beq.n	8001442 <__ledf2+0x7a>
 80013fc:	2d00      	cmp	r5, #0
 80013fe:	d112      	bne.n	8001426 <__ledf2+0x5e>
 8001400:	4330      	orrs	r0, r6
 8001402:	4243      	negs	r3, r0
 8001404:	4143      	adcs	r3, r0
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2c00      	cmp	r4, #0
 800140a:	d01f      	beq.n	800144c <__ledf2+0x84>
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00c      	beq.n	800142a <__ledf2+0x62>
 8001410:	464b      	mov	r3, r9
 8001412:	2001      	movs	r0, #1
 8001414:	3b01      	subs	r3, #1
 8001416:	4303      	orrs	r3, r0
 8001418:	0018      	movs	r0, r3
 800141a:	bc3c      	pop	{r2, r3, r4, r5}
 800141c:	4690      	mov	r8, r2
 800141e:	4699      	mov	r9, r3
 8001420:	46a2      	mov	sl, r4
 8001422:	46ab      	mov	fp, r5
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001426:	2c00      	cmp	r4, #0
 8001428:	d016      	beq.n	8001458 <__ledf2+0x90>
 800142a:	45cb      	cmp	fp, r9
 800142c:	d017      	beq.n	800145e <__ledf2+0x96>
 800142e:	465b      	mov	r3, fp
 8001430:	4259      	negs	r1, r3
 8001432:	2301      	movs	r3, #1
 8001434:	430b      	orrs	r3, r1
 8001436:	e7ef      	b.n	8001418 <__ledf2+0x50>
 8001438:	0031      	movs	r1, r6
 800143a:	2302      	movs	r3, #2
 800143c:	4301      	orrs	r1, r0
 800143e:	d1eb      	bne.n	8001418 <__ledf2+0x50>
 8001440:	e7d9      	b.n	80013f6 <__ledf2+0x2e>
 8001442:	0039      	movs	r1, r7
 8001444:	2302      	movs	r3, #2
 8001446:	4311      	orrs	r1, r2
 8001448:	d1e6      	bne.n	8001418 <__ledf2+0x50>
 800144a:	e7d7      	b.n	80013fc <__ledf2+0x34>
 800144c:	433a      	orrs	r2, r7
 800144e:	d1dd      	bne.n	800140c <__ledf2+0x44>
 8001450:	2300      	movs	r3, #0
 8001452:	2800      	cmp	r0, #0
 8001454:	d0e0      	beq.n	8001418 <__ledf2+0x50>
 8001456:	e7ea      	b.n	800142e <__ledf2+0x66>
 8001458:	433a      	orrs	r2, r7
 800145a:	d1e6      	bne.n	800142a <__ledf2+0x62>
 800145c:	e7e7      	b.n	800142e <__ledf2+0x66>
 800145e:	42a5      	cmp	r5, r4
 8001460:	dce5      	bgt.n	800142e <__ledf2+0x66>
 8001462:	db05      	blt.n	8001470 <__ledf2+0xa8>
 8001464:	42be      	cmp	r6, r7
 8001466:	d8e2      	bhi.n	800142e <__ledf2+0x66>
 8001468:	d007      	beq.n	800147a <__ledf2+0xb2>
 800146a:	2300      	movs	r3, #0
 800146c:	42be      	cmp	r6, r7
 800146e:	d2d3      	bcs.n	8001418 <__ledf2+0x50>
 8001470:	4659      	mov	r1, fp
 8001472:	2301      	movs	r3, #1
 8001474:	3901      	subs	r1, #1
 8001476:	430b      	orrs	r3, r1
 8001478:	e7ce      	b.n	8001418 <__ledf2+0x50>
 800147a:	45c4      	cmp	ip, r8
 800147c:	d8d7      	bhi.n	800142e <__ledf2+0x66>
 800147e:	2300      	movs	r3, #0
 8001480:	45c4      	cmp	ip, r8
 8001482:	d3f5      	bcc.n	8001470 <__ledf2+0xa8>
 8001484:	e7c8      	b.n	8001418 <__ledf2+0x50>
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	000007ff 	.word	0x000007ff

0800148c <__aeabi_dmul>:
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	4657      	mov	r7, sl
 8001490:	4645      	mov	r5, r8
 8001492:	46de      	mov	lr, fp
 8001494:	464e      	mov	r6, r9
 8001496:	b5e0      	push	{r5, r6, r7, lr}
 8001498:	030c      	lsls	r4, r1, #12
 800149a:	4698      	mov	r8, r3
 800149c:	004e      	lsls	r6, r1, #1
 800149e:	0b23      	lsrs	r3, r4, #12
 80014a0:	b087      	sub	sp, #28
 80014a2:	0007      	movs	r7, r0
 80014a4:	4692      	mov	sl, r2
 80014a6:	469b      	mov	fp, r3
 80014a8:	0d76      	lsrs	r6, r6, #21
 80014aa:	0fcd      	lsrs	r5, r1, #31
 80014ac:	2e00      	cmp	r6, #0
 80014ae:	d06b      	beq.n	8001588 <__aeabi_dmul+0xfc>
 80014b0:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <__aeabi_dmul+0x1dc>)
 80014b2:	429e      	cmp	r6, r3
 80014b4:	d035      	beq.n	8001522 <__aeabi_dmul+0x96>
 80014b6:	2480      	movs	r4, #128	; 0x80
 80014b8:	465b      	mov	r3, fp
 80014ba:	0f42      	lsrs	r2, r0, #29
 80014bc:	0424      	lsls	r4, r4, #16
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4314      	orrs	r4, r2
 80014c2:	431c      	orrs	r4, r3
 80014c4:	00c3      	lsls	r3, r0, #3
 80014c6:	4699      	mov	r9, r3
 80014c8:	4b68      	ldr	r3, [pc, #416]	; (800166c <__aeabi_dmul+0x1e0>)
 80014ca:	46a3      	mov	fp, r4
 80014cc:	469c      	mov	ip, r3
 80014ce:	2300      	movs	r3, #0
 80014d0:	2700      	movs	r7, #0
 80014d2:	4466      	add	r6, ip
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	4643      	mov	r3, r8
 80014d8:	031c      	lsls	r4, r3, #12
 80014da:	005a      	lsls	r2, r3, #1
 80014dc:	0fdb      	lsrs	r3, r3, #31
 80014de:	4650      	mov	r0, sl
 80014e0:	0b24      	lsrs	r4, r4, #12
 80014e2:	0d52      	lsrs	r2, r2, #21
 80014e4:	4698      	mov	r8, r3
 80014e6:	d100      	bne.n	80014ea <__aeabi_dmul+0x5e>
 80014e8:	e076      	b.n	80015d8 <__aeabi_dmul+0x14c>
 80014ea:	4b5f      	ldr	r3, [pc, #380]	; (8001668 <__aeabi_dmul+0x1dc>)
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d06d      	beq.n	80015cc <__aeabi_dmul+0x140>
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	0f41      	lsrs	r1, r0, #29
 80014f4:	041b      	lsls	r3, r3, #16
 80014f6:	430b      	orrs	r3, r1
 80014f8:	495c      	ldr	r1, [pc, #368]	; (800166c <__aeabi_dmul+0x1e0>)
 80014fa:	00e4      	lsls	r4, r4, #3
 80014fc:	468c      	mov	ip, r1
 80014fe:	431c      	orrs	r4, r3
 8001500:	00c3      	lsls	r3, r0, #3
 8001502:	2000      	movs	r0, #0
 8001504:	4462      	add	r2, ip
 8001506:	4641      	mov	r1, r8
 8001508:	18b6      	adds	r6, r6, r2
 800150a:	4069      	eors	r1, r5
 800150c:	1c72      	adds	r2, r6, #1
 800150e:	9101      	str	r1, [sp, #4]
 8001510:	4694      	mov	ip, r2
 8001512:	4307      	orrs	r7, r0
 8001514:	2f0f      	cmp	r7, #15
 8001516:	d900      	bls.n	800151a <__aeabi_dmul+0x8e>
 8001518:	e0b0      	b.n	800167c <__aeabi_dmul+0x1f0>
 800151a:	4a55      	ldr	r2, [pc, #340]	; (8001670 <__aeabi_dmul+0x1e4>)
 800151c:	00bf      	lsls	r7, r7, #2
 800151e:	59d2      	ldr	r2, [r2, r7]
 8001520:	4697      	mov	pc, r2
 8001522:	465b      	mov	r3, fp
 8001524:	4303      	orrs	r3, r0
 8001526:	4699      	mov	r9, r3
 8001528:	d000      	beq.n	800152c <__aeabi_dmul+0xa0>
 800152a:	e087      	b.n	800163c <__aeabi_dmul+0x1b0>
 800152c:	2300      	movs	r3, #0
 800152e:	469b      	mov	fp, r3
 8001530:	3302      	adds	r3, #2
 8001532:	2708      	movs	r7, #8
 8001534:	9302      	str	r3, [sp, #8]
 8001536:	e7ce      	b.n	80014d6 <__aeabi_dmul+0x4a>
 8001538:	4642      	mov	r2, r8
 800153a:	9201      	str	r2, [sp, #4]
 800153c:	2802      	cmp	r0, #2
 800153e:	d067      	beq.n	8001610 <__aeabi_dmul+0x184>
 8001540:	2803      	cmp	r0, #3
 8001542:	d100      	bne.n	8001546 <__aeabi_dmul+0xba>
 8001544:	e20e      	b.n	8001964 <__aeabi_dmul+0x4d8>
 8001546:	2801      	cmp	r0, #1
 8001548:	d000      	beq.n	800154c <__aeabi_dmul+0xc0>
 800154a:	e162      	b.n	8001812 <__aeabi_dmul+0x386>
 800154c:	2300      	movs	r3, #0
 800154e:	2400      	movs	r4, #0
 8001550:	2200      	movs	r2, #0
 8001552:	4699      	mov	r9, r3
 8001554:	9901      	ldr	r1, [sp, #4]
 8001556:	4001      	ands	r1, r0
 8001558:	b2cd      	uxtb	r5, r1
 800155a:	2100      	movs	r1, #0
 800155c:	0312      	lsls	r2, r2, #12
 800155e:	0d0b      	lsrs	r3, r1, #20
 8001560:	0b12      	lsrs	r2, r2, #12
 8001562:	051b      	lsls	r3, r3, #20
 8001564:	4313      	orrs	r3, r2
 8001566:	4a43      	ldr	r2, [pc, #268]	; (8001674 <__aeabi_dmul+0x1e8>)
 8001568:	0524      	lsls	r4, r4, #20
 800156a:	4013      	ands	r3, r2
 800156c:	431c      	orrs	r4, r3
 800156e:	0064      	lsls	r4, r4, #1
 8001570:	07ed      	lsls	r5, r5, #31
 8001572:	0864      	lsrs	r4, r4, #1
 8001574:	432c      	orrs	r4, r5
 8001576:	4648      	mov	r0, r9
 8001578:	0021      	movs	r1, r4
 800157a:	b007      	add	sp, #28
 800157c:	bc3c      	pop	{r2, r3, r4, r5}
 800157e:	4690      	mov	r8, r2
 8001580:	4699      	mov	r9, r3
 8001582:	46a2      	mov	sl, r4
 8001584:	46ab      	mov	fp, r5
 8001586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001588:	4303      	orrs	r3, r0
 800158a:	4699      	mov	r9, r3
 800158c:	d04f      	beq.n	800162e <__aeabi_dmul+0x1a2>
 800158e:	465b      	mov	r3, fp
 8001590:	2b00      	cmp	r3, #0
 8001592:	d100      	bne.n	8001596 <__aeabi_dmul+0x10a>
 8001594:	e189      	b.n	80018aa <__aeabi_dmul+0x41e>
 8001596:	4658      	mov	r0, fp
 8001598:	f000 fdcc 	bl	8002134 <__clzsi2>
 800159c:	0003      	movs	r3, r0
 800159e:	3b0b      	subs	r3, #11
 80015a0:	2b1c      	cmp	r3, #28
 80015a2:	dd00      	ble.n	80015a6 <__aeabi_dmul+0x11a>
 80015a4:	e17a      	b.n	800189c <__aeabi_dmul+0x410>
 80015a6:	221d      	movs	r2, #29
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	003a      	movs	r2, r7
 80015ac:	0001      	movs	r1, r0
 80015ae:	465c      	mov	r4, fp
 80015b0:	40da      	lsrs	r2, r3
 80015b2:	3908      	subs	r1, #8
 80015b4:	408c      	lsls	r4, r1
 80015b6:	0013      	movs	r3, r2
 80015b8:	408f      	lsls	r7, r1
 80015ba:	4323      	orrs	r3, r4
 80015bc:	469b      	mov	fp, r3
 80015be:	46b9      	mov	r9, r7
 80015c0:	2300      	movs	r3, #0
 80015c2:	4e2d      	ldr	r6, [pc, #180]	; (8001678 <__aeabi_dmul+0x1ec>)
 80015c4:	2700      	movs	r7, #0
 80015c6:	1a36      	subs	r6, r6, r0
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	e784      	b.n	80014d6 <__aeabi_dmul+0x4a>
 80015cc:	4653      	mov	r3, sl
 80015ce:	4323      	orrs	r3, r4
 80015d0:	d12a      	bne.n	8001628 <__aeabi_dmul+0x19c>
 80015d2:	2400      	movs	r4, #0
 80015d4:	2002      	movs	r0, #2
 80015d6:	e796      	b.n	8001506 <__aeabi_dmul+0x7a>
 80015d8:	4653      	mov	r3, sl
 80015da:	4323      	orrs	r3, r4
 80015dc:	d020      	beq.n	8001620 <__aeabi_dmul+0x194>
 80015de:	2c00      	cmp	r4, #0
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dmul+0x158>
 80015e2:	e157      	b.n	8001894 <__aeabi_dmul+0x408>
 80015e4:	0020      	movs	r0, r4
 80015e6:	f000 fda5 	bl	8002134 <__clzsi2>
 80015ea:	0003      	movs	r3, r0
 80015ec:	3b0b      	subs	r3, #11
 80015ee:	2b1c      	cmp	r3, #28
 80015f0:	dd00      	ble.n	80015f4 <__aeabi_dmul+0x168>
 80015f2:	e149      	b.n	8001888 <__aeabi_dmul+0x3fc>
 80015f4:	211d      	movs	r1, #29
 80015f6:	1acb      	subs	r3, r1, r3
 80015f8:	4651      	mov	r1, sl
 80015fa:	0002      	movs	r2, r0
 80015fc:	40d9      	lsrs	r1, r3
 80015fe:	4653      	mov	r3, sl
 8001600:	3a08      	subs	r2, #8
 8001602:	4094      	lsls	r4, r2
 8001604:	4093      	lsls	r3, r2
 8001606:	430c      	orrs	r4, r1
 8001608:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <__aeabi_dmul+0x1ec>)
 800160a:	1a12      	subs	r2, r2, r0
 800160c:	2000      	movs	r0, #0
 800160e:	e77a      	b.n	8001506 <__aeabi_dmul+0x7a>
 8001610:	2501      	movs	r5, #1
 8001612:	9b01      	ldr	r3, [sp, #4]
 8001614:	4c14      	ldr	r4, [pc, #80]	; (8001668 <__aeabi_dmul+0x1dc>)
 8001616:	401d      	ands	r5, r3
 8001618:	2300      	movs	r3, #0
 800161a:	2200      	movs	r2, #0
 800161c:	4699      	mov	r9, r3
 800161e:	e79c      	b.n	800155a <__aeabi_dmul+0xce>
 8001620:	2400      	movs	r4, #0
 8001622:	2200      	movs	r2, #0
 8001624:	2001      	movs	r0, #1
 8001626:	e76e      	b.n	8001506 <__aeabi_dmul+0x7a>
 8001628:	4653      	mov	r3, sl
 800162a:	2003      	movs	r0, #3
 800162c:	e76b      	b.n	8001506 <__aeabi_dmul+0x7a>
 800162e:	2300      	movs	r3, #0
 8001630:	469b      	mov	fp, r3
 8001632:	3301      	adds	r3, #1
 8001634:	2704      	movs	r7, #4
 8001636:	2600      	movs	r6, #0
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	e74c      	b.n	80014d6 <__aeabi_dmul+0x4a>
 800163c:	2303      	movs	r3, #3
 800163e:	4681      	mov	r9, r0
 8001640:	270c      	movs	r7, #12
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	e747      	b.n	80014d6 <__aeabi_dmul+0x4a>
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	2300      	movs	r3, #0
 800164a:	2500      	movs	r5, #0
 800164c:	0312      	lsls	r2, r2, #12
 800164e:	4699      	mov	r9, r3
 8001650:	4c05      	ldr	r4, [pc, #20]	; (8001668 <__aeabi_dmul+0x1dc>)
 8001652:	e782      	b.n	800155a <__aeabi_dmul+0xce>
 8001654:	465c      	mov	r4, fp
 8001656:	464b      	mov	r3, r9
 8001658:	9802      	ldr	r0, [sp, #8]
 800165a:	e76f      	b.n	800153c <__aeabi_dmul+0xb0>
 800165c:	465c      	mov	r4, fp
 800165e:	464b      	mov	r3, r9
 8001660:	9501      	str	r5, [sp, #4]
 8001662:	9802      	ldr	r0, [sp, #8]
 8001664:	e76a      	b.n	800153c <__aeabi_dmul+0xb0>
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	000007ff 	.word	0x000007ff
 800166c:	fffffc01 	.word	0xfffffc01
 8001670:	08008af4 	.word	0x08008af4
 8001674:	800fffff 	.word	0x800fffff
 8001678:	fffffc0d 	.word	0xfffffc0d
 800167c:	464a      	mov	r2, r9
 800167e:	4649      	mov	r1, r9
 8001680:	0c17      	lsrs	r7, r2, #16
 8001682:	0c1a      	lsrs	r2, r3, #16
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	0c1b      	lsrs	r3, r3, #16
 8001688:	0408      	lsls	r0, r1, #16
 800168a:	0019      	movs	r1, r3
 800168c:	0c00      	lsrs	r0, r0, #16
 800168e:	4341      	muls	r1, r0
 8001690:	0015      	movs	r5, r2
 8001692:	4688      	mov	r8, r1
 8001694:	0019      	movs	r1, r3
 8001696:	437d      	muls	r5, r7
 8001698:	4379      	muls	r1, r7
 800169a:	9503      	str	r5, [sp, #12]
 800169c:	4689      	mov	r9, r1
 800169e:	0029      	movs	r1, r5
 80016a0:	0015      	movs	r5, r2
 80016a2:	4345      	muls	r5, r0
 80016a4:	444d      	add	r5, r9
 80016a6:	9502      	str	r5, [sp, #8]
 80016a8:	4645      	mov	r5, r8
 80016aa:	0c2d      	lsrs	r5, r5, #16
 80016ac:	46aa      	mov	sl, r5
 80016ae:	9d02      	ldr	r5, [sp, #8]
 80016b0:	4455      	add	r5, sl
 80016b2:	45a9      	cmp	r9, r5
 80016b4:	d906      	bls.n	80016c4 <__aeabi_dmul+0x238>
 80016b6:	468a      	mov	sl, r1
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	0249      	lsls	r1, r1, #9
 80016bc:	4689      	mov	r9, r1
 80016be:	44ca      	add	sl, r9
 80016c0:	4651      	mov	r1, sl
 80016c2:	9103      	str	r1, [sp, #12]
 80016c4:	0c29      	lsrs	r1, r5, #16
 80016c6:	9104      	str	r1, [sp, #16]
 80016c8:	4641      	mov	r1, r8
 80016ca:	0409      	lsls	r1, r1, #16
 80016cc:	042d      	lsls	r5, r5, #16
 80016ce:	0c09      	lsrs	r1, r1, #16
 80016d0:	4688      	mov	r8, r1
 80016d2:	0029      	movs	r1, r5
 80016d4:	0c25      	lsrs	r5, r4, #16
 80016d6:	0424      	lsls	r4, r4, #16
 80016d8:	4441      	add	r1, r8
 80016da:	0c24      	lsrs	r4, r4, #16
 80016dc:	9105      	str	r1, [sp, #20]
 80016de:	0021      	movs	r1, r4
 80016e0:	4341      	muls	r1, r0
 80016e2:	4688      	mov	r8, r1
 80016e4:	0021      	movs	r1, r4
 80016e6:	4379      	muls	r1, r7
 80016e8:	468a      	mov	sl, r1
 80016ea:	4368      	muls	r0, r5
 80016ec:	4641      	mov	r1, r8
 80016ee:	4450      	add	r0, sl
 80016f0:	4681      	mov	r9, r0
 80016f2:	0c08      	lsrs	r0, r1, #16
 80016f4:	4448      	add	r0, r9
 80016f6:	436f      	muls	r7, r5
 80016f8:	4582      	cmp	sl, r0
 80016fa:	d903      	bls.n	8001704 <__aeabi_dmul+0x278>
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	0249      	lsls	r1, r1, #9
 8001700:	4689      	mov	r9, r1
 8001702:	444f      	add	r7, r9
 8001704:	0c01      	lsrs	r1, r0, #16
 8001706:	4689      	mov	r9, r1
 8001708:	0039      	movs	r1, r7
 800170a:	4449      	add	r1, r9
 800170c:	9102      	str	r1, [sp, #8]
 800170e:	4641      	mov	r1, r8
 8001710:	040f      	lsls	r7, r1, #16
 8001712:	9904      	ldr	r1, [sp, #16]
 8001714:	0c3f      	lsrs	r7, r7, #16
 8001716:	4688      	mov	r8, r1
 8001718:	0400      	lsls	r0, r0, #16
 800171a:	19c0      	adds	r0, r0, r7
 800171c:	4480      	add	r8, r0
 800171e:	4641      	mov	r1, r8
 8001720:	9104      	str	r1, [sp, #16]
 8001722:	4659      	mov	r1, fp
 8001724:	0c0f      	lsrs	r7, r1, #16
 8001726:	0409      	lsls	r1, r1, #16
 8001728:	0c09      	lsrs	r1, r1, #16
 800172a:	4688      	mov	r8, r1
 800172c:	4359      	muls	r1, r3
 800172e:	468a      	mov	sl, r1
 8001730:	0039      	movs	r1, r7
 8001732:	4351      	muls	r1, r2
 8001734:	4689      	mov	r9, r1
 8001736:	4641      	mov	r1, r8
 8001738:	434a      	muls	r2, r1
 800173a:	4651      	mov	r1, sl
 800173c:	0c09      	lsrs	r1, r1, #16
 800173e:	468b      	mov	fp, r1
 8001740:	437b      	muls	r3, r7
 8001742:	18d2      	adds	r2, r2, r3
 8001744:	445a      	add	r2, fp
 8001746:	4293      	cmp	r3, r2
 8001748:	d903      	bls.n	8001752 <__aeabi_dmul+0x2c6>
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	025b      	lsls	r3, r3, #9
 800174e:	469b      	mov	fp, r3
 8001750:	44d9      	add	r9, fp
 8001752:	4651      	mov	r1, sl
 8001754:	0409      	lsls	r1, r1, #16
 8001756:	0c09      	lsrs	r1, r1, #16
 8001758:	468a      	mov	sl, r1
 800175a:	4641      	mov	r1, r8
 800175c:	4361      	muls	r1, r4
 800175e:	437c      	muls	r4, r7
 8001760:	0c13      	lsrs	r3, r2, #16
 8001762:	0412      	lsls	r2, r2, #16
 8001764:	444b      	add	r3, r9
 8001766:	4452      	add	r2, sl
 8001768:	46a1      	mov	r9, r4
 800176a:	468a      	mov	sl, r1
 800176c:	003c      	movs	r4, r7
 800176e:	4641      	mov	r1, r8
 8001770:	436c      	muls	r4, r5
 8001772:	434d      	muls	r5, r1
 8001774:	4651      	mov	r1, sl
 8001776:	444d      	add	r5, r9
 8001778:	0c0f      	lsrs	r7, r1, #16
 800177a:	197d      	adds	r5, r7, r5
 800177c:	45a9      	cmp	r9, r5
 800177e:	d903      	bls.n	8001788 <__aeabi_dmul+0x2fc>
 8001780:	2180      	movs	r1, #128	; 0x80
 8001782:	0249      	lsls	r1, r1, #9
 8001784:	4688      	mov	r8, r1
 8001786:	4444      	add	r4, r8
 8001788:	9f04      	ldr	r7, [sp, #16]
 800178a:	9903      	ldr	r1, [sp, #12]
 800178c:	46b8      	mov	r8, r7
 800178e:	4441      	add	r1, r8
 8001790:	468b      	mov	fp, r1
 8001792:	4583      	cmp	fp, r0
 8001794:	4180      	sbcs	r0, r0
 8001796:	4241      	negs	r1, r0
 8001798:	4688      	mov	r8, r1
 800179a:	4651      	mov	r1, sl
 800179c:	0408      	lsls	r0, r1, #16
 800179e:	042f      	lsls	r7, r5, #16
 80017a0:	0c00      	lsrs	r0, r0, #16
 80017a2:	183f      	adds	r7, r7, r0
 80017a4:	4658      	mov	r0, fp
 80017a6:	9902      	ldr	r1, [sp, #8]
 80017a8:	1810      	adds	r0, r2, r0
 80017aa:	4689      	mov	r9, r1
 80017ac:	4290      	cmp	r0, r2
 80017ae:	4192      	sbcs	r2, r2
 80017b0:	444f      	add	r7, r9
 80017b2:	46ba      	mov	sl, r7
 80017b4:	4252      	negs	r2, r2
 80017b6:	4699      	mov	r9, r3
 80017b8:	4693      	mov	fp, r2
 80017ba:	44c2      	add	sl, r8
 80017bc:	44d1      	add	r9, sl
 80017be:	44cb      	add	fp, r9
 80017c0:	428f      	cmp	r7, r1
 80017c2:	41bf      	sbcs	r7, r7
 80017c4:	45c2      	cmp	sl, r8
 80017c6:	4189      	sbcs	r1, r1
 80017c8:	4599      	cmp	r9, r3
 80017ca:	419b      	sbcs	r3, r3
 80017cc:	4593      	cmp	fp, r2
 80017ce:	4192      	sbcs	r2, r2
 80017d0:	427f      	negs	r7, r7
 80017d2:	4249      	negs	r1, r1
 80017d4:	0c2d      	lsrs	r5, r5, #16
 80017d6:	4252      	negs	r2, r2
 80017d8:	430f      	orrs	r7, r1
 80017da:	425b      	negs	r3, r3
 80017dc:	4313      	orrs	r3, r2
 80017de:	197f      	adds	r7, r7, r5
 80017e0:	18ff      	adds	r7, r7, r3
 80017e2:	465b      	mov	r3, fp
 80017e4:	193c      	adds	r4, r7, r4
 80017e6:	0ddb      	lsrs	r3, r3, #23
 80017e8:	9a05      	ldr	r2, [sp, #20]
 80017ea:	0264      	lsls	r4, r4, #9
 80017ec:	431c      	orrs	r4, r3
 80017ee:	0243      	lsls	r3, r0, #9
 80017f0:	4313      	orrs	r3, r2
 80017f2:	1e5d      	subs	r5, r3, #1
 80017f4:	41ab      	sbcs	r3, r5
 80017f6:	465a      	mov	r2, fp
 80017f8:	0dc0      	lsrs	r0, r0, #23
 80017fa:	4303      	orrs	r3, r0
 80017fc:	0252      	lsls	r2, r2, #9
 80017fe:	4313      	orrs	r3, r2
 8001800:	01e2      	lsls	r2, r4, #7
 8001802:	d556      	bpl.n	80018b2 <__aeabi_dmul+0x426>
 8001804:	2001      	movs	r0, #1
 8001806:	085a      	lsrs	r2, r3, #1
 8001808:	4003      	ands	r3, r0
 800180a:	4313      	orrs	r3, r2
 800180c:	07e2      	lsls	r2, r4, #31
 800180e:	4313      	orrs	r3, r2
 8001810:	0864      	lsrs	r4, r4, #1
 8001812:	485a      	ldr	r0, [pc, #360]	; (800197c <__aeabi_dmul+0x4f0>)
 8001814:	4460      	add	r0, ip
 8001816:	2800      	cmp	r0, #0
 8001818:	dd4d      	ble.n	80018b6 <__aeabi_dmul+0x42a>
 800181a:	075a      	lsls	r2, r3, #29
 800181c:	d009      	beq.n	8001832 <__aeabi_dmul+0x3a6>
 800181e:	220f      	movs	r2, #15
 8001820:	401a      	ands	r2, r3
 8001822:	2a04      	cmp	r2, #4
 8001824:	d005      	beq.n	8001832 <__aeabi_dmul+0x3a6>
 8001826:	1d1a      	adds	r2, r3, #4
 8001828:	429a      	cmp	r2, r3
 800182a:	419b      	sbcs	r3, r3
 800182c:	425b      	negs	r3, r3
 800182e:	18e4      	adds	r4, r4, r3
 8001830:	0013      	movs	r3, r2
 8001832:	01e2      	lsls	r2, r4, #7
 8001834:	d504      	bpl.n	8001840 <__aeabi_dmul+0x3b4>
 8001836:	2080      	movs	r0, #128	; 0x80
 8001838:	4a51      	ldr	r2, [pc, #324]	; (8001980 <__aeabi_dmul+0x4f4>)
 800183a:	00c0      	lsls	r0, r0, #3
 800183c:	4014      	ands	r4, r2
 800183e:	4460      	add	r0, ip
 8001840:	4a50      	ldr	r2, [pc, #320]	; (8001984 <__aeabi_dmul+0x4f8>)
 8001842:	4290      	cmp	r0, r2
 8001844:	dd00      	ble.n	8001848 <__aeabi_dmul+0x3bc>
 8001846:	e6e3      	b.n	8001610 <__aeabi_dmul+0x184>
 8001848:	2501      	movs	r5, #1
 800184a:	08db      	lsrs	r3, r3, #3
 800184c:	0762      	lsls	r2, r4, #29
 800184e:	431a      	orrs	r2, r3
 8001850:	0264      	lsls	r4, r4, #9
 8001852:	9b01      	ldr	r3, [sp, #4]
 8001854:	4691      	mov	r9, r2
 8001856:	0b22      	lsrs	r2, r4, #12
 8001858:	0544      	lsls	r4, r0, #21
 800185a:	0d64      	lsrs	r4, r4, #21
 800185c:	401d      	ands	r5, r3
 800185e:	e67c      	b.n	800155a <__aeabi_dmul+0xce>
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	4659      	mov	r1, fp
 8001864:	0312      	lsls	r2, r2, #12
 8001866:	4211      	tst	r1, r2
 8001868:	d008      	beq.n	800187c <__aeabi_dmul+0x3f0>
 800186a:	4214      	tst	r4, r2
 800186c:	d106      	bne.n	800187c <__aeabi_dmul+0x3f0>
 800186e:	4322      	orrs	r2, r4
 8001870:	0312      	lsls	r2, r2, #12
 8001872:	0b12      	lsrs	r2, r2, #12
 8001874:	4645      	mov	r5, r8
 8001876:	4699      	mov	r9, r3
 8001878:	4c43      	ldr	r4, [pc, #268]	; (8001988 <__aeabi_dmul+0x4fc>)
 800187a:	e66e      	b.n	800155a <__aeabi_dmul+0xce>
 800187c:	465b      	mov	r3, fp
 800187e:	431a      	orrs	r2, r3
 8001880:	0312      	lsls	r2, r2, #12
 8001882:	0b12      	lsrs	r2, r2, #12
 8001884:	4c40      	ldr	r4, [pc, #256]	; (8001988 <__aeabi_dmul+0x4fc>)
 8001886:	e668      	b.n	800155a <__aeabi_dmul+0xce>
 8001888:	0003      	movs	r3, r0
 800188a:	4654      	mov	r4, sl
 800188c:	3b28      	subs	r3, #40	; 0x28
 800188e:	409c      	lsls	r4, r3
 8001890:	2300      	movs	r3, #0
 8001892:	e6b9      	b.n	8001608 <__aeabi_dmul+0x17c>
 8001894:	f000 fc4e 	bl	8002134 <__clzsi2>
 8001898:	3020      	adds	r0, #32
 800189a:	e6a6      	b.n	80015ea <__aeabi_dmul+0x15e>
 800189c:	0003      	movs	r3, r0
 800189e:	3b28      	subs	r3, #40	; 0x28
 80018a0:	409f      	lsls	r7, r3
 80018a2:	2300      	movs	r3, #0
 80018a4:	46bb      	mov	fp, r7
 80018a6:	4699      	mov	r9, r3
 80018a8:	e68a      	b.n	80015c0 <__aeabi_dmul+0x134>
 80018aa:	f000 fc43 	bl	8002134 <__clzsi2>
 80018ae:	3020      	adds	r0, #32
 80018b0:	e674      	b.n	800159c <__aeabi_dmul+0x110>
 80018b2:	46b4      	mov	ip, r6
 80018b4:	e7ad      	b.n	8001812 <__aeabi_dmul+0x386>
 80018b6:	2501      	movs	r5, #1
 80018b8:	1a2a      	subs	r2, r5, r0
 80018ba:	2a38      	cmp	r2, #56	; 0x38
 80018bc:	dd06      	ble.n	80018cc <__aeabi_dmul+0x440>
 80018be:	9b01      	ldr	r3, [sp, #4]
 80018c0:	2400      	movs	r4, #0
 80018c2:	401d      	ands	r5, r3
 80018c4:	2300      	movs	r3, #0
 80018c6:	2200      	movs	r2, #0
 80018c8:	4699      	mov	r9, r3
 80018ca:	e646      	b.n	800155a <__aeabi_dmul+0xce>
 80018cc:	2a1f      	cmp	r2, #31
 80018ce:	dc21      	bgt.n	8001914 <__aeabi_dmul+0x488>
 80018d0:	2520      	movs	r5, #32
 80018d2:	0020      	movs	r0, r4
 80018d4:	1aad      	subs	r5, r5, r2
 80018d6:	001e      	movs	r6, r3
 80018d8:	40ab      	lsls	r3, r5
 80018da:	40a8      	lsls	r0, r5
 80018dc:	40d6      	lsrs	r6, r2
 80018de:	1e5d      	subs	r5, r3, #1
 80018e0:	41ab      	sbcs	r3, r5
 80018e2:	4330      	orrs	r0, r6
 80018e4:	4318      	orrs	r0, r3
 80018e6:	40d4      	lsrs	r4, r2
 80018e8:	0743      	lsls	r3, r0, #29
 80018ea:	d009      	beq.n	8001900 <__aeabi_dmul+0x474>
 80018ec:	230f      	movs	r3, #15
 80018ee:	4003      	ands	r3, r0
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d005      	beq.n	8001900 <__aeabi_dmul+0x474>
 80018f4:	0003      	movs	r3, r0
 80018f6:	1d18      	adds	r0, r3, #4
 80018f8:	4298      	cmp	r0, r3
 80018fa:	419b      	sbcs	r3, r3
 80018fc:	425b      	negs	r3, r3
 80018fe:	18e4      	adds	r4, r4, r3
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d521      	bpl.n	8001948 <__aeabi_dmul+0x4bc>
 8001904:	2501      	movs	r5, #1
 8001906:	9b01      	ldr	r3, [sp, #4]
 8001908:	2401      	movs	r4, #1
 800190a:	401d      	ands	r5, r3
 800190c:	2300      	movs	r3, #0
 800190e:	2200      	movs	r2, #0
 8001910:	4699      	mov	r9, r3
 8001912:	e622      	b.n	800155a <__aeabi_dmul+0xce>
 8001914:	251f      	movs	r5, #31
 8001916:	0021      	movs	r1, r4
 8001918:	426d      	negs	r5, r5
 800191a:	1a28      	subs	r0, r5, r0
 800191c:	40c1      	lsrs	r1, r0
 800191e:	0008      	movs	r0, r1
 8001920:	2a20      	cmp	r2, #32
 8001922:	d01d      	beq.n	8001960 <__aeabi_dmul+0x4d4>
 8001924:	355f      	adds	r5, #95	; 0x5f
 8001926:	1aaa      	subs	r2, r5, r2
 8001928:	4094      	lsls	r4, r2
 800192a:	4323      	orrs	r3, r4
 800192c:	1e5c      	subs	r4, r3, #1
 800192e:	41a3      	sbcs	r3, r4
 8001930:	2507      	movs	r5, #7
 8001932:	4303      	orrs	r3, r0
 8001934:	401d      	ands	r5, r3
 8001936:	2200      	movs	r2, #0
 8001938:	2d00      	cmp	r5, #0
 800193a:	d009      	beq.n	8001950 <__aeabi_dmul+0x4c4>
 800193c:	220f      	movs	r2, #15
 800193e:	2400      	movs	r4, #0
 8001940:	401a      	ands	r2, r3
 8001942:	0018      	movs	r0, r3
 8001944:	2a04      	cmp	r2, #4
 8001946:	d1d6      	bne.n	80018f6 <__aeabi_dmul+0x46a>
 8001948:	0003      	movs	r3, r0
 800194a:	0765      	lsls	r5, r4, #29
 800194c:	0264      	lsls	r4, r4, #9
 800194e:	0b22      	lsrs	r2, r4, #12
 8001950:	08db      	lsrs	r3, r3, #3
 8001952:	432b      	orrs	r3, r5
 8001954:	2501      	movs	r5, #1
 8001956:	4699      	mov	r9, r3
 8001958:	9b01      	ldr	r3, [sp, #4]
 800195a:	2400      	movs	r4, #0
 800195c:	401d      	ands	r5, r3
 800195e:	e5fc      	b.n	800155a <__aeabi_dmul+0xce>
 8001960:	2400      	movs	r4, #0
 8001962:	e7e2      	b.n	800192a <__aeabi_dmul+0x49e>
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	2501      	movs	r5, #1
 8001968:	0312      	lsls	r2, r2, #12
 800196a:	4322      	orrs	r2, r4
 800196c:	9901      	ldr	r1, [sp, #4]
 800196e:	0312      	lsls	r2, r2, #12
 8001970:	0b12      	lsrs	r2, r2, #12
 8001972:	400d      	ands	r5, r1
 8001974:	4699      	mov	r9, r3
 8001976:	4c04      	ldr	r4, [pc, #16]	; (8001988 <__aeabi_dmul+0x4fc>)
 8001978:	e5ef      	b.n	800155a <__aeabi_dmul+0xce>
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	000003ff 	.word	0x000003ff
 8001980:	feffffff 	.word	0xfeffffff
 8001984:	000007fe 	.word	0x000007fe
 8001988:	000007ff 	.word	0x000007ff

0800198c <__aeabi_dsub>:
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198e:	4646      	mov	r6, r8
 8001990:	46d6      	mov	lr, sl
 8001992:	464f      	mov	r7, r9
 8001994:	030c      	lsls	r4, r1, #12
 8001996:	b5c0      	push	{r6, r7, lr}
 8001998:	0fcd      	lsrs	r5, r1, #31
 800199a:	004e      	lsls	r6, r1, #1
 800199c:	0a61      	lsrs	r1, r4, #9
 800199e:	0f44      	lsrs	r4, r0, #29
 80019a0:	430c      	orrs	r4, r1
 80019a2:	00c1      	lsls	r1, r0, #3
 80019a4:	0058      	lsls	r0, r3, #1
 80019a6:	0d40      	lsrs	r0, r0, #21
 80019a8:	4684      	mov	ip, r0
 80019aa:	468a      	mov	sl, r1
 80019ac:	000f      	movs	r7, r1
 80019ae:	0319      	lsls	r1, r3, #12
 80019b0:	0f50      	lsrs	r0, r2, #29
 80019b2:	0a49      	lsrs	r1, r1, #9
 80019b4:	4301      	orrs	r1, r0
 80019b6:	48c6      	ldr	r0, [pc, #792]	; (8001cd0 <__aeabi_dsub+0x344>)
 80019b8:	0d76      	lsrs	r6, r6, #21
 80019ba:	46a8      	mov	r8, r5
 80019bc:	0fdb      	lsrs	r3, r3, #31
 80019be:	00d2      	lsls	r2, r2, #3
 80019c0:	4584      	cmp	ip, r0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dsub+0x3a>
 80019c4:	e0d8      	b.n	8001b78 <__aeabi_dsub+0x1ec>
 80019c6:	2001      	movs	r0, #1
 80019c8:	4043      	eors	r3, r0
 80019ca:	42ab      	cmp	r3, r5
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x44>
 80019ce:	e0a6      	b.n	8001b1e <__aeabi_dsub+0x192>
 80019d0:	4660      	mov	r0, ip
 80019d2:	1a35      	subs	r5, r6, r0
 80019d4:	2d00      	cmp	r5, #0
 80019d6:	dc00      	bgt.n	80019da <__aeabi_dsub+0x4e>
 80019d8:	e105      	b.n	8001be6 <__aeabi_dsub+0x25a>
 80019da:	2800      	cmp	r0, #0
 80019dc:	d110      	bne.n	8001a00 <__aeabi_dsub+0x74>
 80019de:	000b      	movs	r3, r1
 80019e0:	4313      	orrs	r3, r2
 80019e2:	d100      	bne.n	80019e6 <__aeabi_dsub+0x5a>
 80019e4:	e0d7      	b.n	8001b96 <__aeabi_dsub+0x20a>
 80019e6:	1e6b      	subs	r3, r5, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d000      	beq.n	80019ee <__aeabi_dsub+0x62>
 80019ec:	e14b      	b.n	8001c86 <__aeabi_dsub+0x2fa>
 80019ee:	4653      	mov	r3, sl
 80019f0:	1a9f      	subs	r7, r3, r2
 80019f2:	45ba      	cmp	sl, r7
 80019f4:	4180      	sbcs	r0, r0
 80019f6:	1a64      	subs	r4, r4, r1
 80019f8:	4240      	negs	r0, r0
 80019fa:	1a24      	subs	r4, r4, r0
 80019fc:	2601      	movs	r6, #1
 80019fe:	e01e      	b.n	8001a3e <__aeabi_dsub+0xb2>
 8001a00:	4bb3      	ldr	r3, [pc, #716]	; (8001cd0 <__aeabi_dsub+0x344>)
 8001a02:	429e      	cmp	r6, r3
 8001a04:	d048      	beq.n	8001a98 <__aeabi_dsub+0x10c>
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	041b      	lsls	r3, r3, #16
 8001a0a:	4319      	orrs	r1, r3
 8001a0c:	2d38      	cmp	r5, #56	; 0x38
 8001a0e:	dd00      	ble.n	8001a12 <__aeabi_dsub+0x86>
 8001a10:	e119      	b.n	8001c46 <__aeabi_dsub+0x2ba>
 8001a12:	2d1f      	cmp	r5, #31
 8001a14:	dd00      	ble.n	8001a18 <__aeabi_dsub+0x8c>
 8001a16:	e14c      	b.n	8001cb2 <__aeabi_dsub+0x326>
 8001a18:	2320      	movs	r3, #32
 8001a1a:	000f      	movs	r7, r1
 8001a1c:	1b5b      	subs	r3, r3, r5
 8001a1e:	0010      	movs	r0, r2
 8001a20:	409a      	lsls	r2, r3
 8001a22:	409f      	lsls	r7, r3
 8001a24:	40e8      	lsrs	r0, r5
 8001a26:	1e53      	subs	r3, r2, #1
 8001a28:	419a      	sbcs	r2, r3
 8001a2a:	40e9      	lsrs	r1, r5
 8001a2c:	4307      	orrs	r7, r0
 8001a2e:	4317      	orrs	r7, r2
 8001a30:	4653      	mov	r3, sl
 8001a32:	1bdf      	subs	r7, r3, r7
 8001a34:	1a61      	subs	r1, r4, r1
 8001a36:	45ba      	cmp	sl, r7
 8001a38:	41a4      	sbcs	r4, r4
 8001a3a:	4264      	negs	r4, r4
 8001a3c:	1b0c      	subs	r4, r1, r4
 8001a3e:	0223      	lsls	r3, r4, #8
 8001a40:	d400      	bmi.n	8001a44 <__aeabi_dsub+0xb8>
 8001a42:	e0c5      	b.n	8001bd0 <__aeabi_dsub+0x244>
 8001a44:	0264      	lsls	r4, r4, #9
 8001a46:	0a65      	lsrs	r5, r4, #9
 8001a48:	2d00      	cmp	r5, #0
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0xc2>
 8001a4c:	e0f6      	b.n	8001c3c <__aeabi_dsub+0x2b0>
 8001a4e:	0028      	movs	r0, r5
 8001a50:	f000 fb70 	bl	8002134 <__clzsi2>
 8001a54:	0003      	movs	r3, r0
 8001a56:	3b08      	subs	r3, #8
 8001a58:	2b1f      	cmp	r3, #31
 8001a5a:	dd00      	ble.n	8001a5e <__aeabi_dsub+0xd2>
 8001a5c:	e0e9      	b.n	8001c32 <__aeabi_dsub+0x2a6>
 8001a5e:	2220      	movs	r2, #32
 8001a60:	003c      	movs	r4, r7
 8001a62:	1ad2      	subs	r2, r2, r3
 8001a64:	409d      	lsls	r5, r3
 8001a66:	40d4      	lsrs	r4, r2
 8001a68:	409f      	lsls	r7, r3
 8001a6a:	4325      	orrs	r5, r4
 8001a6c:	429e      	cmp	r6, r3
 8001a6e:	dd00      	ble.n	8001a72 <__aeabi_dsub+0xe6>
 8001a70:	e0db      	b.n	8001c2a <__aeabi_dsub+0x29e>
 8001a72:	1b9e      	subs	r6, r3, r6
 8001a74:	1c73      	adds	r3, r6, #1
 8001a76:	2b1f      	cmp	r3, #31
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0xf0>
 8001a7a:	e10a      	b.n	8001c92 <__aeabi_dsub+0x306>
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	0038      	movs	r0, r7
 8001a80:	1ad2      	subs	r2, r2, r3
 8001a82:	0029      	movs	r1, r5
 8001a84:	4097      	lsls	r7, r2
 8001a86:	002c      	movs	r4, r5
 8001a88:	4091      	lsls	r1, r2
 8001a8a:	40d8      	lsrs	r0, r3
 8001a8c:	1e7a      	subs	r2, r7, #1
 8001a8e:	4197      	sbcs	r7, r2
 8001a90:	40dc      	lsrs	r4, r3
 8001a92:	2600      	movs	r6, #0
 8001a94:	4301      	orrs	r1, r0
 8001a96:	430f      	orrs	r7, r1
 8001a98:	077b      	lsls	r3, r7, #29
 8001a9a:	d009      	beq.n	8001ab0 <__aeabi_dsub+0x124>
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	403b      	ands	r3, r7
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d005      	beq.n	8001ab0 <__aeabi_dsub+0x124>
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	42bb      	cmp	r3, r7
 8001aa8:	41bf      	sbcs	r7, r7
 8001aaa:	427f      	negs	r7, r7
 8001aac:	19e4      	adds	r4, r4, r7
 8001aae:	001f      	movs	r7, r3
 8001ab0:	0223      	lsls	r3, r4, #8
 8001ab2:	d525      	bpl.n	8001b00 <__aeabi_dsub+0x174>
 8001ab4:	4b86      	ldr	r3, [pc, #536]	; (8001cd0 <__aeabi_dsub+0x344>)
 8001ab6:	3601      	adds	r6, #1
 8001ab8:	429e      	cmp	r6, r3
 8001aba:	d100      	bne.n	8001abe <__aeabi_dsub+0x132>
 8001abc:	e0af      	b.n	8001c1e <__aeabi_dsub+0x292>
 8001abe:	4b85      	ldr	r3, [pc, #532]	; (8001cd4 <__aeabi_dsub+0x348>)
 8001ac0:	2501      	movs	r5, #1
 8001ac2:	401c      	ands	r4, r3
 8001ac4:	4643      	mov	r3, r8
 8001ac6:	0762      	lsls	r2, r4, #29
 8001ac8:	08ff      	lsrs	r7, r7, #3
 8001aca:	0264      	lsls	r4, r4, #9
 8001acc:	0576      	lsls	r6, r6, #21
 8001ace:	4317      	orrs	r7, r2
 8001ad0:	0b24      	lsrs	r4, r4, #12
 8001ad2:	0d76      	lsrs	r6, r6, #21
 8001ad4:	401d      	ands	r5, r3
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	0324      	lsls	r4, r4, #12
 8001ada:	0b23      	lsrs	r3, r4, #12
 8001adc:	0d0c      	lsrs	r4, r1, #20
 8001ade:	4a7e      	ldr	r2, [pc, #504]	; (8001cd8 <__aeabi_dsub+0x34c>)
 8001ae0:	0524      	lsls	r4, r4, #20
 8001ae2:	431c      	orrs	r4, r3
 8001ae4:	4014      	ands	r4, r2
 8001ae6:	0533      	lsls	r3, r6, #20
 8001ae8:	4323      	orrs	r3, r4
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	07ed      	lsls	r5, r5, #31
 8001aee:	085b      	lsrs	r3, r3, #1
 8001af0:	432b      	orrs	r3, r5
 8001af2:	0038      	movs	r0, r7
 8001af4:	0019      	movs	r1, r3
 8001af6:	bc1c      	pop	{r2, r3, r4}
 8001af8:	4690      	mov	r8, r2
 8001afa:	4699      	mov	r9, r3
 8001afc:	46a2      	mov	sl, r4
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b00:	2501      	movs	r5, #1
 8001b02:	4643      	mov	r3, r8
 8001b04:	0762      	lsls	r2, r4, #29
 8001b06:	08ff      	lsrs	r7, r7, #3
 8001b08:	4317      	orrs	r7, r2
 8001b0a:	08e4      	lsrs	r4, r4, #3
 8001b0c:	401d      	ands	r5, r3
 8001b0e:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <__aeabi_dsub+0x344>)
 8001b10:	429e      	cmp	r6, r3
 8001b12:	d036      	beq.n	8001b82 <__aeabi_dsub+0x1f6>
 8001b14:	0324      	lsls	r4, r4, #12
 8001b16:	0576      	lsls	r6, r6, #21
 8001b18:	0b24      	lsrs	r4, r4, #12
 8001b1a:	0d76      	lsrs	r6, r6, #21
 8001b1c:	e7db      	b.n	8001ad6 <__aeabi_dsub+0x14a>
 8001b1e:	4663      	mov	r3, ip
 8001b20:	1af3      	subs	r3, r6, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	dc00      	bgt.n	8001b28 <__aeabi_dsub+0x19c>
 8001b26:	e094      	b.n	8001c52 <__aeabi_dsub+0x2c6>
 8001b28:	4660      	mov	r0, ip
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	d035      	beq.n	8001b9a <__aeabi_dsub+0x20e>
 8001b2e:	4868      	ldr	r0, [pc, #416]	; (8001cd0 <__aeabi_dsub+0x344>)
 8001b30:	4286      	cmp	r6, r0
 8001b32:	d0b1      	beq.n	8001a98 <__aeabi_dsub+0x10c>
 8001b34:	2780      	movs	r7, #128	; 0x80
 8001b36:	043f      	lsls	r7, r7, #16
 8001b38:	4339      	orrs	r1, r7
 8001b3a:	2b38      	cmp	r3, #56	; 0x38
 8001b3c:	dc00      	bgt.n	8001b40 <__aeabi_dsub+0x1b4>
 8001b3e:	e0fd      	b.n	8001d3c <__aeabi_dsub+0x3b0>
 8001b40:	430a      	orrs	r2, r1
 8001b42:	0017      	movs	r7, r2
 8001b44:	2100      	movs	r1, #0
 8001b46:	1e7a      	subs	r2, r7, #1
 8001b48:	4197      	sbcs	r7, r2
 8001b4a:	4457      	add	r7, sl
 8001b4c:	4557      	cmp	r7, sl
 8001b4e:	4180      	sbcs	r0, r0
 8001b50:	1909      	adds	r1, r1, r4
 8001b52:	4244      	negs	r4, r0
 8001b54:	190c      	adds	r4, r1, r4
 8001b56:	0223      	lsls	r3, r4, #8
 8001b58:	d53a      	bpl.n	8001bd0 <__aeabi_dsub+0x244>
 8001b5a:	4b5d      	ldr	r3, [pc, #372]	; (8001cd0 <__aeabi_dsub+0x344>)
 8001b5c:	3601      	adds	r6, #1
 8001b5e:	429e      	cmp	r6, r3
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dsub+0x1d8>
 8001b62:	e14b      	b.n	8001dfc <__aeabi_dsub+0x470>
 8001b64:	2201      	movs	r2, #1
 8001b66:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <__aeabi_dsub+0x348>)
 8001b68:	401c      	ands	r4, r3
 8001b6a:	087b      	lsrs	r3, r7, #1
 8001b6c:	4017      	ands	r7, r2
 8001b6e:	431f      	orrs	r7, r3
 8001b70:	07e2      	lsls	r2, r4, #31
 8001b72:	4317      	orrs	r7, r2
 8001b74:	0864      	lsrs	r4, r4, #1
 8001b76:	e78f      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001b78:	0008      	movs	r0, r1
 8001b7a:	4310      	orrs	r0, r2
 8001b7c:	d000      	beq.n	8001b80 <__aeabi_dsub+0x1f4>
 8001b7e:	e724      	b.n	80019ca <__aeabi_dsub+0x3e>
 8001b80:	e721      	b.n	80019c6 <__aeabi_dsub+0x3a>
 8001b82:	0023      	movs	r3, r4
 8001b84:	433b      	orrs	r3, r7
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dsub+0x1fe>
 8001b88:	e1b9      	b.n	8001efe <__aeabi_dsub+0x572>
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	0312      	lsls	r2, r2, #12
 8001b8e:	4314      	orrs	r4, r2
 8001b90:	0324      	lsls	r4, r4, #12
 8001b92:	0b24      	lsrs	r4, r4, #12
 8001b94:	e79f      	b.n	8001ad6 <__aeabi_dsub+0x14a>
 8001b96:	002e      	movs	r6, r5
 8001b98:	e77e      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001b9a:	0008      	movs	r0, r1
 8001b9c:	4310      	orrs	r0, r2
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x216>
 8001ba0:	e0ca      	b.n	8001d38 <__aeabi_dsub+0x3ac>
 8001ba2:	1e58      	subs	r0, r3, #1
 8001ba4:	4684      	mov	ip, r0
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	d000      	beq.n	8001bac <__aeabi_dsub+0x220>
 8001baa:	e0e7      	b.n	8001d7c <__aeabi_dsub+0x3f0>
 8001bac:	4452      	add	r2, sl
 8001bae:	4552      	cmp	r2, sl
 8001bb0:	4180      	sbcs	r0, r0
 8001bb2:	1864      	adds	r4, r4, r1
 8001bb4:	4240      	negs	r0, r0
 8001bb6:	1824      	adds	r4, r4, r0
 8001bb8:	0017      	movs	r7, r2
 8001bba:	2601      	movs	r6, #1
 8001bbc:	0223      	lsls	r3, r4, #8
 8001bbe:	d507      	bpl.n	8001bd0 <__aeabi_dsub+0x244>
 8001bc0:	2602      	movs	r6, #2
 8001bc2:	e7cf      	b.n	8001b64 <__aeabi_dsub+0x1d8>
 8001bc4:	4664      	mov	r4, ip
 8001bc6:	432c      	orrs	r4, r5
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x240>
 8001bca:	e1b3      	b.n	8001f34 <__aeabi_dsub+0x5a8>
 8001bcc:	002c      	movs	r4, r5
 8001bce:	4667      	mov	r7, ip
 8001bd0:	077b      	lsls	r3, r7, #29
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dsub+0x24a>
 8001bd4:	e762      	b.n	8001a9c <__aeabi_dsub+0x110>
 8001bd6:	0763      	lsls	r3, r4, #29
 8001bd8:	08ff      	lsrs	r7, r7, #3
 8001bda:	431f      	orrs	r7, r3
 8001bdc:	2501      	movs	r5, #1
 8001bde:	4643      	mov	r3, r8
 8001be0:	08e4      	lsrs	r4, r4, #3
 8001be2:	401d      	ands	r5, r3
 8001be4:	e793      	b.n	8001b0e <__aeabi_dsub+0x182>
 8001be6:	2d00      	cmp	r5, #0
 8001be8:	d178      	bne.n	8001cdc <__aeabi_dsub+0x350>
 8001bea:	1c75      	adds	r5, r6, #1
 8001bec:	056d      	lsls	r5, r5, #21
 8001bee:	0d6d      	lsrs	r5, r5, #21
 8001bf0:	2d01      	cmp	r5, #1
 8001bf2:	dc00      	bgt.n	8001bf6 <__aeabi_dsub+0x26a>
 8001bf4:	e0f2      	b.n	8001ddc <__aeabi_dsub+0x450>
 8001bf6:	4650      	mov	r0, sl
 8001bf8:	1a80      	subs	r0, r0, r2
 8001bfa:	4582      	cmp	sl, r0
 8001bfc:	41bf      	sbcs	r7, r7
 8001bfe:	1a65      	subs	r5, r4, r1
 8001c00:	427f      	negs	r7, r7
 8001c02:	1bed      	subs	r5, r5, r7
 8001c04:	4684      	mov	ip, r0
 8001c06:	0228      	lsls	r0, r5, #8
 8001c08:	d400      	bmi.n	8001c0c <__aeabi_dsub+0x280>
 8001c0a:	e08c      	b.n	8001d26 <__aeabi_dsub+0x39a>
 8001c0c:	4650      	mov	r0, sl
 8001c0e:	1a17      	subs	r7, r2, r0
 8001c10:	42ba      	cmp	r2, r7
 8001c12:	4192      	sbcs	r2, r2
 8001c14:	1b0c      	subs	r4, r1, r4
 8001c16:	4255      	negs	r5, r2
 8001c18:	1b65      	subs	r5, r4, r5
 8001c1a:	4698      	mov	r8, r3
 8001c1c:	e714      	b.n	8001a48 <__aeabi_dsub+0xbc>
 8001c1e:	2501      	movs	r5, #1
 8001c20:	4643      	mov	r3, r8
 8001c22:	2400      	movs	r4, #0
 8001c24:	401d      	ands	r5, r3
 8001c26:	2700      	movs	r7, #0
 8001c28:	e755      	b.n	8001ad6 <__aeabi_dsub+0x14a>
 8001c2a:	4c2a      	ldr	r4, [pc, #168]	; (8001cd4 <__aeabi_dsub+0x348>)
 8001c2c:	1af6      	subs	r6, r6, r3
 8001c2e:	402c      	ands	r4, r5
 8001c30:	e732      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001c32:	003d      	movs	r5, r7
 8001c34:	3828      	subs	r0, #40	; 0x28
 8001c36:	4085      	lsls	r5, r0
 8001c38:	2700      	movs	r7, #0
 8001c3a:	e717      	b.n	8001a6c <__aeabi_dsub+0xe0>
 8001c3c:	0038      	movs	r0, r7
 8001c3e:	f000 fa79 	bl	8002134 <__clzsi2>
 8001c42:	3020      	adds	r0, #32
 8001c44:	e706      	b.n	8001a54 <__aeabi_dsub+0xc8>
 8001c46:	430a      	orrs	r2, r1
 8001c48:	0017      	movs	r7, r2
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	1e7a      	subs	r2, r7, #1
 8001c4e:	4197      	sbcs	r7, r2
 8001c50:	e6ee      	b.n	8001a30 <__aeabi_dsub+0xa4>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d000      	beq.n	8001c58 <__aeabi_dsub+0x2cc>
 8001c56:	e0e5      	b.n	8001e24 <__aeabi_dsub+0x498>
 8001c58:	1c73      	adds	r3, r6, #1
 8001c5a:	469c      	mov	ip, r3
 8001c5c:	055b      	lsls	r3, r3, #21
 8001c5e:	0d5b      	lsrs	r3, r3, #21
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	dc00      	bgt.n	8001c66 <__aeabi_dsub+0x2da>
 8001c64:	e09f      	b.n	8001da6 <__aeabi_dsub+0x41a>
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <__aeabi_dsub+0x344>)
 8001c68:	459c      	cmp	ip, r3
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dsub+0x2e2>
 8001c6c:	e0c5      	b.n	8001dfa <__aeabi_dsub+0x46e>
 8001c6e:	4452      	add	r2, sl
 8001c70:	4552      	cmp	r2, sl
 8001c72:	4180      	sbcs	r0, r0
 8001c74:	1864      	adds	r4, r4, r1
 8001c76:	4240      	negs	r0, r0
 8001c78:	1824      	adds	r4, r4, r0
 8001c7a:	07e7      	lsls	r7, r4, #31
 8001c7c:	0852      	lsrs	r2, r2, #1
 8001c7e:	4317      	orrs	r7, r2
 8001c80:	0864      	lsrs	r4, r4, #1
 8001c82:	4666      	mov	r6, ip
 8001c84:	e708      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001c86:	4812      	ldr	r0, [pc, #72]	; (8001cd0 <__aeabi_dsub+0x344>)
 8001c88:	4285      	cmp	r5, r0
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x302>
 8001c8c:	e085      	b.n	8001d9a <__aeabi_dsub+0x40e>
 8001c8e:	001d      	movs	r5, r3
 8001c90:	e6bc      	b.n	8001a0c <__aeabi_dsub+0x80>
 8001c92:	0029      	movs	r1, r5
 8001c94:	3e1f      	subs	r6, #31
 8001c96:	40f1      	lsrs	r1, r6
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x312>
 8001c9c:	e07f      	b.n	8001d9e <__aeabi_dsub+0x412>
 8001c9e:	2240      	movs	r2, #64	; 0x40
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	409d      	lsls	r5, r3
 8001ca4:	432f      	orrs	r7, r5
 8001ca6:	1e7d      	subs	r5, r7, #1
 8001ca8:	41af      	sbcs	r7, r5
 8001caa:	2400      	movs	r4, #0
 8001cac:	430f      	orrs	r7, r1
 8001cae:	2600      	movs	r6, #0
 8001cb0:	e78e      	b.n	8001bd0 <__aeabi_dsub+0x244>
 8001cb2:	002b      	movs	r3, r5
 8001cb4:	000f      	movs	r7, r1
 8001cb6:	3b20      	subs	r3, #32
 8001cb8:	40df      	lsrs	r7, r3
 8001cba:	2d20      	cmp	r5, #32
 8001cbc:	d071      	beq.n	8001da2 <__aeabi_dsub+0x416>
 8001cbe:	2340      	movs	r3, #64	; 0x40
 8001cc0:	1b5d      	subs	r5, r3, r5
 8001cc2:	40a9      	lsls	r1, r5
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	1e51      	subs	r1, r2, #1
 8001cc8:	418a      	sbcs	r2, r1
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4317      	orrs	r7, r2
 8001cce:	e6af      	b.n	8001a30 <__aeabi_dsub+0xa4>
 8001cd0:	000007ff 	.word	0x000007ff
 8001cd4:	ff7fffff 	.word	0xff7fffff
 8001cd8:	800fffff 	.word	0x800fffff
 8001cdc:	2e00      	cmp	r6, #0
 8001cde:	d03e      	beq.n	8001d5e <__aeabi_dsub+0x3d2>
 8001ce0:	4eb3      	ldr	r6, [pc, #716]	; (8001fb0 <__aeabi_dsub+0x624>)
 8001ce2:	45b4      	cmp	ip, r6
 8001ce4:	d045      	beq.n	8001d72 <__aeabi_dsub+0x3e6>
 8001ce6:	2680      	movs	r6, #128	; 0x80
 8001ce8:	0436      	lsls	r6, r6, #16
 8001cea:	426d      	negs	r5, r5
 8001cec:	4334      	orrs	r4, r6
 8001cee:	2d38      	cmp	r5, #56	; 0x38
 8001cf0:	dd00      	ble.n	8001cf4 <__aeabi_dsub+0x368>
 8001cf2:	e0a8      	b.n	8001e46 <__aeabi_dsub+0x4ba>
 8001cf4:	2d1f      	cmp	r5, #31
 8001cf6:	dd00      	ble.n	8001cfa <__aeabi_dsub+0x36e>
 8001cf8:	e11f      	b.n	8001f3a <__aeabi_dsub+0x5ae>
 8001cfa:	2620      	movs	r6, #32
 8001cfc:	0027      	movs	r7, r4
 8001cfe:	4650      	mov	r0, sl
 8001d00:	1b76      	subs	r6, r6, r5
 8001d02:	40b7      	lsls	r7, r6
 8001d04:	40e8      	lsrs	r0, r5
 8001d06:	4307      	orrs	r7, r0
 8001d08:	4650      	mov	r0, sl
 8001d0a:	40b0      	lsls	r0, r6
 8001d0c:	1e46      	subs	r6, r0, #1
 8001d0e:	41b0      	sbcs	r0, r6
 8001d10:	40ec      	lsrs	r4, r5
 8001d12:	4338      	orrs	r0, r7
 8001d14:	1a17      	subs	r7, r2, r0
 8001d16:	42ba      	cmp	r2, r7
 8001d18:	4192      	sbcs	r2, r2
 8001d1a:	1b0c      	subs	r4, r1, r4
 8001d1c:	4252      	negs	r2, r2
 8001d1e:	1aa4      	subs	r4, r4, r2
 8001d20:	4666      	mov	r6, ip
 8001d22:	4698      	mov	r8, r3
 8001d24:	e68b      	b.n	8001a3e <__aeabi_dsub+0xb2>
 8001d26:	4664      	mov	r4, ip
 8001d28:	4667      	mov	r7, ip
 8001d2a:	432c      	orrs	r4, r5
 8001d2c:	d000      	beq.n	8001d30 <__aeabi_dsub+0x3a4>
 8001d2e:	e68b      	b.n	8001a48 <__aeabi_dsub+0xbc>
 8001d30:	2500      	movs	r5, #0
 8001d32:	2600      	movs	r6, #0
 8001d34:	2700      	movs	r7, #0
 8001d36:	e6ea      	b.n	8001b0e <__aeabi_dsub+0x182>
 8001d38:	001e      	movs	r6, r3
 8001d3a:	e6ad      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001d3c:	2b1f      	cmp	r3, #31
 8001d3e:	dc60      	bgt.n	8001e02 <__aeabi_dsub+0x476>
 8001d40:	2720      	movs	r7, #32
 8001d42:	1af8      	subs	r0, r7, r3
 8001d44:	000f      	movs	r7, r1
 8001d46:	4684      	mov	ip, r0
 8001d48:	4087      	lsls	r7, r0
 8001d4a:	0010      	movs	r0, r2
 8001d4c:	40d8      	lsrs	r0, r3
 8001d4e:	4307      	orrs	r7, r0
 8001d50:	4660      	mov	r0, ip
 8001d52:	4082      	lsls	r2, r0
 8001d54:	1e50      	subs	r0, r2, #1
 8001d56:	4182      	sbcs	r2, r0
 8001d58:	40d9      	lsrs	r1, r3
 8001d5a:	4317      	orrs	r7, r2
 8001d5c:	e6f5      	b.n	8001b4a <__aeabi_dsub+0x1be>
 8001d5e:	0026      	movs	r6, r4
 8001d60:	4650      	mov	r0, sl
 8001d62:	4306      	orrs	r6, r0
 8001d64:	d005      	beq.n	8001d72 <__aeabi_dsub+0x3e6>
 8001d66:	43ed      	mvns	r5, r5
 8001d68:	2d00      	cmp	r5, #0
 8001d6a:	d0d3      	beq.n	8001d14 <__aeabi_dsub+0x388>
 8001d6c:	4e90      	ldr	r6, [pc, #576]	; (8001fb0 <__aeabi_dsub+0x624>)
 8001d6e:	45b4      	cmp	ip, r6
 8001d70:	d1bd      	bne.n	8001cee <__aeabi_dsub+0x362>
 8001d72:	000c      	movs	r4, r1
 8001d74:	0017      	movs	r7, r2
 8001d76:	4666      	mov	r6, ip
 8001d78:	4698      	mov	r8, r3
 8001d7a:	e68d      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001d7c:	488c      	ldr	r0, [pc, #560]	; (8001fb0 <__aeabi_dsub+0x624>)
 8001d7e:	4283      	cmp	r3, r0
 8001d80:	d00b      	beq.n	8001d9a <__aeabi_dsub+0x40e>
 8001d82:	4663      	mov	r3, ip
 8001d84:	e6d9      	b.n	8001b3a <__aeabi_dsub+0x1ae>
 8001d86:	2d00      	cmp	r5, #0
 8001d88:	d000      	beq.n	8001d8c <__aeabi_dsub+0x400>
 8001d8a:	e096      	b.n	8001eba <__aeabi_dsub+0x52e>
 8001d8c:	0008      	movs	r0, r1
 8001d8e:	4310      	orrs	r0, r2
 8001d90:	d100      	bne.n	8001d94 <__aeabi_dsub+0x408>
 8001d92:	e0e2      	b.n	8001f5a <__aeabi_dsub+0x5ce>
 8001d94:	000c      	movs	r4, r1
 8001d96:	0017      	movs	r7, r2
 8001d98:	4698      	mov	r8, r3
 8001d9a:	4e85      	ldr	r6, [pc, #532]	; (8001fb0 <__aeabi_dsub+0x624>)
 8001d9c:	e67c      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001d9e:	2500      	movs	r5, #0
 8001da0:	e780      	b.n	8001ca4 <__aeabi_dsub+0x318>
 8001da2:	2100      	movs	r1, #0
 8001da4:	e78e      	b.n	8001cc4 <__aeabi_dsub+0x338>
 8001da6:	0023      	movs	r3, r4
 8001da8:	4650      	mov	r0, sl
 8001daa:	4303      	orrs	r3, r0
 8001dac:	2e00      	cmp	r6, #0
 8001dae:	d000      	beq.n	8001db2 <__aeabi_dsub+0x426>
 8001db0:	e0a8      	b.n	8001f04 <__aeabi_dsub+0x578>
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x42c>
 8001db6:	e0de      	b.n	8001f76 <__aeabi_dsub+0x5ea>
 8001db8:	000b      	movs	r3, r1
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	d100      	bne.n	8001dc0 <__aeabi_dsub+0x434>
 8001dbe:	e66b      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001dc0:	4452      	add	r2, sl
 8001dc2:	4552      	cmp	r2, sl
 8001dc4:	4180      	sbcs	r0, r0
 8001dc6:	1864      	adds	r4, r4, r1
 8001dc8:	4240      	negs	r0, r0
 8001dca:	1824      	adds	r4, r4, r0
 8001dcc:	0017      	movs	r7, r2
 8001dce:	0223      	lsls	r3, r4, #8
 8001dd0:	d400      	bmi.n	8001dd4 <__aeabi_dsub+0x448>
 8001dd2:	e6fd      	b.n	8001bd0 <__aeabi_dsub+0x244>
 8001dd4:	4b77      	ldr	r3, [pc, #476]	; (8001fb4 <__aeabi_dsub+0x628>)
 8001dd6:	4666      	mov	r6, ip
 8001dd8:	401c      	ands	r4, r3
 8001dda:	e65d      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001ddc:	0025      	movs	r5, r4
 8001dde:	4650      	mov	r0, sl
 8001de0:	4305      	orrs	r5, r0
 8001de2:	2e00      	cmp	r6, #0
 8001de4:	d1cf      	bne.n	8001d86 <__aeabi_dsub+0x3fa>
 8001de6:	2d00      	cmp	r5, #0
 8001de8:	d14f      	bne.n	8001e8a <__aeabi_dsub+0x4fe>
 8001dea:	000c      	movs	r4, r1
 8001dec:	4314      	orrs	r4, r2
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x466>
 8001df0:	e0a0      	b.n	8001f34 <__aeabi_dsub+0x5a8>
 8001df2:	000c      	movs	r4, r1
 8001df4:	0017      	movs	r7, r2
 8001df6:	4698      	mov	r8, r3
 8001df8:	e64e      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001dfa:	4666      	mov	r6, ip
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	2700      	movs	r7, #0
 8001e00:	e685      	b.n	8001b0e <__aeabi_dsub+0x182>
 8001e02:	001f      	movs	r7, r3
 8001e04:	0008      	movs	r0, r1
 8001e06:	3f20      	subs	r7, #32
 8001e08:	40f8      	lsrs	r0, r7
 8001e0a:	0007      	movs	r7, r0
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_dsub+0x486>
 8001e10:	e08e      	b.n	8001f30 <__aeabi_dsub+0x5a4>
 8001e12:	2040      	movs	r0, #64	; 0x40
 8001e14:	1ac3      	subs	r3, r0, r3
 8001e16:	4099      	lsls	r1, r3
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	1e51      	subs	r1, r2, #1
 8001e1c:	418a      	sbcs	r2, r1
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4317      	orrs	r7, r2
 8001e22:	e692      	b.n	8001b4a <__aeabi_dsub+0x1be>
 8001e24:	2e00      	cmp	r6, #0
 8001e26:	d114      	bne.n	8001e52 <__aeabi_dsub+0x4c6>
 8001e28:	0026      	movs	r6, r4
 8001e2a:	4650      	mov	r0, sl
 8001e2c:	4306      	orrs	r6, r0
 8001e2e:	d062      	beq.n	8001ef6 <__aeabi_dsub+0x56a>
 8001e30:	43db      	mvns	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d15c      	bne.n	8001ef0 <__aeabi_dsub+0x564>
 8001e36:	1887      	adds	r7, r0, r2
 8001e38:	4297      	cmp	r7, r2
 8001e3a:	4192      	sbcs	r2, r2
 8001e3c:	1864      	adds	r4, r4, r1
 8001e3e:	4252      	negs	r2, r2
 8001e40:	18a4      	adds	r4, r4, r2
 8001e42:	4666      	mov	r6, ip
 8001e44:	e687      	b.n	8001b56 <__aeabi_dsub+0x1ca>
 8001e46:	4650      	mov	r0, sl
 8001e48:	4320      	orrs	r0, r4
 8001e4a:	1e44      	subs	r4, r0, #1
 8001e4c:	41a0      	sbcs	r0, r4
 8001e4e:	2400      	movs	r4, #0
 8001e50:	e760      	b.n	8001d14 <__aeabi_dsub+0x388>
 8001e52:	4e57      	ldr	r6, [pc, #348]	; (8001fb0 <__aeabi_dsub+0x624>)
 8001e54:	45b4      	cmp	ip, r6
 8001e56:	d04e      	beq.n	8001ef6 <__aeabi_dsub+0x56a>
 8001e58:	2680      	movs	r6, #128	; 0x80
 8001e5a:	0436      	lsls	r6, r6, #16
 8001e5c:	425b      	negs	r3, r3
 8001e5e:	4334      	orrs	r4, r6
 8001e60:	2b38      	cmp	r3, #56	; 0x38
 8001e62:	dd00      	ble.n	8001e66 <__aeabi_dsub+0x4da>
 8001e64:	e07f      	b.n	8001f66 <__aeabi_dsub+0x5da>
 8001e66:	2b1f      	cmp	r3, #31
 8001e68:	dd00      	ble.n	8001e6c <__aeabi_dsub+0x4e0>
 8001e6a:	e08b      	b.n	8001f84 <__aeabi_dsub+0x5f8>
 8001e6c:	2620      	movs	r6, #32
 8001e6e:	0027      	movs	r7, r4
 8001e70:	4650      	mov	r0, sl
 8001e72:	1af6      	subs	r6, r6, r3
 8001e74:	40b7      	lsls	r7, r6
 8001e76:	40d8      	lsrs	r0, r3
 8001e78:	4307      	orrs	r7, r0
 8001e7a:	4650      	mov	r0, sl
 8001e7c:	40b0      	lsls	r0, r6
 8001e7e:	1e46      	subs	r6, r0, #1
 8001e80:	41b0      	sbcs	r0, r6
 8001e82:	4307      	orrs	r7, r0
 8001e84:	40dc      	lsrs	r4, r3
 8001e86:	18bf      	adds	r7, r7, r2
 8001e88:	e7d6      	b.n	8001e38 <__aeabi_dsub+0x4ac>
 8001e8a:	000d      	movs	r5, r1
 8001e8c:	4315      	orrs	r5, r2
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_dsub+0x506>
 8001e90:	e602      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001e92:	4650      	mov	r0, sl
 8001e94:	1a80      	subs	r0, r0, r2
 8001e96:	4582      	cmp	sl, r0
 8001e98:	41bf      	sbcs	r7, r7
 8001e9a:	1a65      	subs	r5, r4, r1
 8001e9c:	427f      	negs	r7, r7
 8001e9e:	1bed      	subs	r5, r5, r7
 8001ea0:	4684      	mov	ip, r0
 8001ea2:	0228      	lsls	r0, r5, #8
 8001ea4:	d400      	bmi.n	8001ea8 <__aeabi_dsub+0x51c>
 8001ea6:	e68d      	b.n	8001bc4 <__aeabi_dsub+0x238>
 8001ea8:	4650      	mov	r0, sl
 8001eaa:	1a17      	subs	r7, r2, r0
 8001eac:	42ba      	cmp	r2, r7
 8001eae:	4192      	sbcs	r2, r2
 8001eb0:	1b0c      	subs	r4, r1, r4
 8001eb2:	4252      	negs	r2, r2
 8001eb4:	1aa4      	subs	r4, r4, r2
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	e5ee      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001eba:	000d      	movs	r5, r1
 8001ebc:	4315      	orrs	r5, r2
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x536>
 8001ec0:	e76b      	b.n	8001d9a <__aeabi_dsub+0x40e>
 8001ec2:	4650      	mov	r0, sl
 8001ec4:	0767      	lsls	r7, r4, #29
 8001ec6:	08c0      	lsrs	r0, r0, #3
 8001ec8:	4307      	orrs	r7, r0
 8001eca:	2080      	movs	r0, #128	; 0x80
 8001ecc:	08e4      	lsrs	r4, r4, #3
 8001ece:	0300      	lsls	r0, r0, #12
 8001ed0:	4204      	tst	r4, r0
 8001ed2:	d007      	beq.n	8001ee4 <__aeabi_dsub+0x558>
 8001ed4:	08cd      	lsrs	r5, r1, #3
 8001ed6:	4205      	tst	r5, r0
 8001ed8:	d104      	bne.n	8001ee4 <__aeabi_dsub+0x558>
 8001eda:	002c      	movs	r4, r5
 8001edc:	4698      	mov	r8, r3
 8001ede:	08d7      	lsrs	r7, r2, #3
 8001ee0:	0749      	lsls	r1, r1, #29
 8001ee2:	430f      	orrs	r7, r1
 8001ee4:	0f7b      	lsrs	r3, r7, #29
 8001ee6:	00e4      	lsls	r4, r4, #3
 8001ee8:	431c      	orrs	r4, r3
 8001eea:	00ff      	lsls	r7, r7, #3
 8001eec:	4e30      	ldr	r6, [pc, #192]	; (8001fb0 <__aeabi_dsub+0x624>)
 8001eee:	e5d3      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001ef0:	4e2f      	ldr	r6, [pc, #188]	; (8001fb0 <__aeabi_dsub+0x624>)
 8001ef2:	45b4      	cmp	ip, r6
 8001ef4:	d1b4      	bne.n	8001e60 <__aeabi_dsub+0x4d4>
 8001ef6:	000c      	movs	r4, r1
 8001ef8:	0017      	movs	r7, r2
 8001efa:	4666      	mov	r6, ip
 8001efc:	e5cc      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001efe:	2700      	movs	r7, #0
 8001f00:	2400      	movs	r4, #0
 8001f02:	e5e8      	b.n	8001ad6 <__aeabi_dsub+0x14a>
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d039      	beq.n	8001f7c <__aeabi_dsub+0x5f0>
 8001f08:	000b      	movs	r3, r1
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dsub+0x584>
 8001f0e:	e744      	b.n	8001d9a <__aeabi_dsub+0x40e>
 8001f10:	08c0      	lsrs	r0, r0, #3
 8001f12:	0767      	lsls	r7, r4, #29
 8001f14:	4307      	orrs	r7, r0
 8001f16:	2080      	movs	r0, #128	; 0x80
 8001f18:	08e4      	lsrs	r4, r4, #3
 8001f1a:	0300      	lsls	r0, r0, #12
 8001f1c:	4204      	tst	r4, r0
 8001f1e:	d0e1      	beq.n	8001ee4 <__aeabi_dsub+0x558>
 8001f20:	08cb      	lsrs	r3, r1, #3
 8001f22:	4203      	tst	r3, r0
 8001f24:	d1de      	bne.n	8001ee4 <__aeabi_dsub+0x558>
 8001f26:	08d7      	lsrs	r7, r2, #3
 8001f28:	0749      	lsls	r1, r1, #29
 8001f2a:	430f      	orrs	r7, r1
 8001f2c:	001c      	movs	r4, r3
 8001f2e:	e7d9      	b.n	8001ee4 <__aeabi_dsub+0x558>
 8001f30:	2100      	movs	r1, #0
 8001f32:	e771      	b.n	8001e18 <__aeabi_dsub+0x48c>
 8001f34:	2500      	movs	r5, #0
 8001f36:	2700      	movs	r7, #0
 8001f38:	e5e9      	b.n	8001b0e <__aeabi_dsub+0x182>
 8001f3a:	002e      	movs	r6, r5
 8001f3c:	0027      	movs	r7, r4
 8001f3e:	3e20      	subs	r6, #32
 8001f40:	40f7      	lsrs	r7, r6
 8001f42:	2d20      	cmp	r5, #32
 8001f44:	d02f      	beq.n	8001fa6 <__aeabi_dsub+0x61a>
 8001f46:	2640      	movs	r6, #64	; 0x40
 8001f48:	1b75      	subs	r5, r6, r5
 8001f4a:	40ac      	lsls	r4, r5
 8001f4c:	4650      	mov	r0, sl
 8001f4e:	4320      	orrs	r0, r4
 8001f50:	1e44      	subs	r4, r0, #1
 8001f52:	41a0      	sbcs	r0, r4
 8001f54:	2400      	movs	r4, #0
 8001f56:	4338      	orrs	r0, r7
 8001f58:	e6dc      	b.n	8001d14 <__aeabi_dsub+0x388>
 8001f5a:	2480      	movs	r4, #128	; 0x80
 8001f5c:	2500      	movs	r5, #0
 8001f5e:	0324      	lsls	r4, r4, #12
 8001f60:	4e13      	ldr	r6, [pc, #76]	; (8001fb0 <__aeabi_dsub+0x624>)
 8001f62:	2700      	movs	r7, #0
 8001f64:	e5d3      	b.n	8001b0e <__aeabi_dsub+0x182>
 8001f66:	4650      	mov	r0, sl
 8001f68:	4320      	orrs	r0, r4
 8001f6a:	0007      	movs	r7, r0
 8001f6c:	1e78      	subs	r0, r7, #1
 8001f6e:	4187      	sbcs	r7, r0
 8001f70:	2400      	movs	r4, #0
 8001f72:	18bf      	adds	r7, r7, r2
 8001f74:	e760      	b.n	8001e38 <__aeabi_dsub+0x4ac>
 8001f76:	000c      	movs	r4, r1
 8001f78:	0017      	movs	r7, r2
 8001f7a:	e58d      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001f7c:	000c      	movs	r4, r1
 8001f7e:	0017      	movs	r7, r2
 8001f80:	4e0b      	ldr	r6, [pc, #44]	; (8001fb0 <__aeabi_dsub+0x624>)
 8001f82:	e589      	b.n	8001a98 <__aeabi_dsub+0x10c>
 8001f84:	001e      	movs	r6, r3
 8001f86:	0027      	movs	r7, r4
 8001f88:	3e20      	subs	r6, #32
 8001f8a:	40f7      	lsrs	r7, r6
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	d00c      	beq.n	8001faa <__aeabi_dsub+0x61e>
 8001f90:	2640      	movs	r6, #64	; 0x40
 8001f92:	1af3      	subs	r3, r6, r3
 8001f94:	409c      	lsls	r4, r3
 8001f96:	4650      	mov	r0, sl
 8001f98:	4320      	orrs	r0, r4
 8001f9a:	1e44      	subs	r4, r0, #1
 8001f9c:	41a0      	sbcs	r0, r4
 8001f9e:	4307      	orrs	r7, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	18bf      	adds	r7, r7, r2
 8001fa4:	e748      	b.n	8001e38 <__aeabi_dsub+0x4ac>
 8001fa6:	2400      	movs	r4, #0
 8001fa8:	e7d0      	b.n	8001f4c <__aeabi_dsub+0x5c0>
 8001faa:	2400      	movs	r4, #0
 8001fac:	e7f3      	b.n	8001f96 <__aeabi_dsub+0x60a>
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	ff7fffff 	.word	0xff7fffff

08001fb8 <__aeabi_d2iz>:
 8001fb8:	b530      	push	{r4, r5, lr}
 8001fba:	4d13      	ldr	r5, [pc, #76]	; (8002008 <__aeabi_d2iz+0x50>)
 8001fbc:	030a      	lsls	r2, r1, #12
 8001fbe:	004b      	lsls	r3, r1, #1
 8001fc0:	0b12      	lsrs	r2, r2, #12
 8001fc2:	0d5b      	lsrs	r3, r3, #21
 8001fc4:	0fc9      	lsrs	r1, r1, #31
 8001fc6:	2400      	movs	r4, #0
 8001fc8:	42ab      	cmp	r3, r5
 8001fca:	dd10      	ble.n	8001fee <__aeabi_d2iz+0x36>
 8001fcc:	4c0f      	ldr	r4, [pc, #60]	; (800200c <__aeabi_d2iz+0x54>)
 8001fce:	42a3      	cmp	r3, r4
 8001fd0:	dc0f      	bgt.n	8001ff2 <__aeabi_d2iz+0x3a>
 8001fd2:	2480      	movs	r4, #128	; 0x80
 8001fd4:	4d0e      	ldr	r5, [pc, #56]	; (8002010 <__aeabi_d2iz+0x58>)
 8001fd6:	0364      	lsls	r4, r4, #13
 8001fd8:	4322      	orrs	r2, r4
 8001fda:	1aed      	subs	r5, r5, r3
 8001fdc:	2d1f      	cmp	r5, #31
 8001fde:	dd0b      	ble.n	8001ff8 <__aeabi_d2iz+0x40>
 8001fe0:	480c      	ldr	r0, [pc, #48]	; (8002014 <__aeabi_d2iz+0x5c>)
 8001fe2:	1ac3      	subs	r3, r0, r3
 8001fe4:	40da      	lsrs	r2, r3
 8001fe6:	4254      	negs	r4, r2
 8001fe8:	2900      	cmp	r1, #0
 8001fea:	d100      	bne.n	8001fee <__aeabi_d2iz+0x36>
 8001fec:	0014      	movs	r4, r2
 8001fee:	0020      	movs	r0, r4
 8001ff0:	bd30      	pop	{r4, r5, pc}
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <__aeabi_d2iz+0x60>)
 8001ff4:	18cc      	adds	r4, r1, r3
 8001ff6:	e7fa      	b.n	8001fee <__aeabi_d2iz+0x36>
 8001ff8:	4c08      	ldr	r4, [pc, #32]	; (800201c <__aeabi_d2iz+0x64>)
 8001ffa:	40e8      	lsrs	r0, r5
 8001ffc:	46a4      	mov	ip, r4
 8001ffe:	4463      	add	r3, ip
 8002000:	409a      	lsls	r2, r3
 8002002:	4302      	orrs	r2, r0
 8002004:	e7ef      	b.n	8001fe6 <__aeabi_d2iz+0x2e>
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	000003fe 	.word	0x000003fe
 800200c:	0000041d 	.word	0x0000041d
 8002010:	00000433 	.word	0x00000433
 8002014:	00000413 	.word	0x00000413
 8002018:	7fffffff 	.word	0x7fffffff
 800201c:	fffffbed 	.word	0xfffffbed

08002020 <__aeabi_ui2d>:
 8002020:	b510      	push	{r4, lr}
 8002022:	1e04      	subs	r4, r0, #0
 8002024:	d028      	beq.n	8002078 <__aeabi_ui2d+0x58>
 8002026:	f000 f885 	bl	8002134 <__clzsi2>
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <__aeabi_ui2d+0x60>)
 800202c:	4a15      	ldr	r2, [pc, #84]	; (8002084 <__aeabi_ui2d+0x64>)
 800202e:	1a1b      	subs	r3, r3, r0
 8002030:	1ad2      	subs	r2, r2, r3
 8002032:	2a1f      	cmp	r2, #31
 8002034:	dd15      	ble.n	8002062 <__aeabi_ui2d+0x42>
 8002036:	4a14      	ldr	r2, [pc, #80]	; (8002088 <__aeabi_ui2d+0x68>)
 8002038:	1ad2      	subs	r2, r2, r3
 800203a:	4094      	lsls	r4, r2
 800203c:	2200      	movs	r2, #0
 800203e:	0324      	lsls	r4, r4, #12
 8002040:	055b      	lsls	r3, r3, #21
 8002042:	0b24      	lsrs	r4, r4, #12
 8002044:	0d5b      	lsrs	r3, r3, #21
 8002046:	2100      	movs	r1, #0
 8002048:	0010      	movs	r0, r2
 800204a:	0324      	lsls	r4, r4, #12
 800204c:	0d0a      	lsrs	r2, r1, #20
 800204e:	0b24      	lsrs	r4, r4, #12
 8002050:	0512      	lsls	r2, r2, #20
 8002052:	4322      	orrs	r2, r4
 8002054:	4c0d      	ldr	r4, [pc, #52]	; (800208c <__aeabi_ui2d+0x6c>)
 8002056:	051b      	lsls	r3, r3, #20
 8002058:	4022      	ands	r2, r4
 800205a:	4313      	orrs	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	0859      	lsrs	r1, r3, #1
 8002060:	bd10      	pop	{r4, pc}
 8002062:	0021      	movs	r1, r4
 8002064:	4091      	lsls	r1, r2
 8002066:	000a      	movs	r2, r1
 8002068:	210b      	movs	r1, #11
 800206a:	1a08      	subs	r0, r1, r0
 800206c:	40c4      	lsrs	r4, r0
 800206e:	055b      	lsls	r3, r3, #21
 8002070:	0324      	lsls	r4, r4, #12
 8002072:	0b24      	lsrs	r4, r4, #12
 8002074:	0d5b      	lsrs	r3, r3, #21
 8002076:	e7e6      	b.n	8002046 <__aeabi_ui2d+0x26>
 8002078:	2300      	movs	r3, #0
 800207a:	2400      	movs	r4, #0
 800207c:	2200      	movs	r2, #0
 800207e:	e7e2      	b.n	8002046 <__aeabi_ui2d+0x26>
 8002080:	0000041e 	.word	0x0000041e
 8002084:	00000433 	.word	0x00000433
 8002088:	00000413 	.word	0x00000413
 800208c:	800fffff 	.word	0x800fffff

08002090 <__aeabi_f2d>:
 8002090:	0041      	lsls	r1, r0, #1
 8002092:	0e09      	lsrs	r1, r1, #24
 8002094:	1c4b      	adds	r3, r1, #1
 8002096:	b570      	push	{r4, r5, r6, lr}
 8002098:	b2db      	uxtb	r3, r3
 800209a:	0246      	lsls	r6, r0, #9
 800209c:	0a75      	lsrs	r5, r6, #9
 800209e:	0fc4      	lsrs	r4, r0, #31
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	dd14      	ble.n	80020ce <__aeabi_f2d+0x3e>
 80020a4:	23e0      	movs	r3, #224	; 0xe0
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	076d      	lsls	r5, r5, #29
 80020aa:	0b36      	lsrs	r6, r6, #12
 80020ac:	18cb      	adds	r3, r1, r3
 80020ae:	2100      	movs	r1, #0
 80020b0:	0d0a      	lsrs	r2, r1, #20
 80020b2:	0028      	movs	r0, r5
 80020b4:	0512      	lsls	r2, r2, #20
 80020b6:	4d1c      	ldr	r5, [pc, #112]	; (8002128 <__aeabi_f2d+0x98>)
 80020b8:	4332      	orrs	r2, r6
 80020ba:	055b      	lsls	r3, r3, #21
 80020bc:	402a      	ands	r2, r5
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	4313      	orrs	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	07e4      	lsls	r4, r4, #31
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	4323      	orrs	r3, r4
 80020ca:	0019      	movs	r1, r3
 80020cc:	bd70      	pop	{r4, r5, r6, pc}
 80020ce:	2900      	cmp	r1, #0
 80020d0:	d114      	bne.n	80020fc <__aeabi_f2d+0x6c>
 80020d2:	2d00      	cmp	r5, #0
 80020d4:	d01e      	beq.n	8002114 <__aeabi_f2d+0x84>
 80020d6:	0028      	movs	r0, r5
 80020d8:	f000 f82c 	bl	8002134 <__clzsi2>
 80020dc:	280a      	cmp	r0, #10
 80020de:	dc1c      	bgt.n	800211a <__aeabi_f2d+0x8a>
 80020e0:	230b      	movs	r3, #11
 80020e2:	002a      	movs	r2, r5
 80020e4:	1a1b      	subs	r3, r3, r0
 80020e6:	40da      	lsrs	r2, r3
 80020e8:	0003      	movs	r3, r0
 80020ea:	3315      	adds	r3, #21
 80020ec:	409d      	lsls	r5, r3
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <__aeabi_f2d+0x9c>)
 80020f0:	0312      	lsls	r2, r2, #12
 80020f2:	1a1b      	subs	r3, r3, r0
 80020f4:	055b      	lsls	r3, r3, #21
 80020f6:	0b16      	lsrs	r6, r2, #12
 80020f8:	0d5b      	lsrs	r3, r3, #21
 80020fa:	e7d8      	b.n	80020ae <__aeabi_f2d+0x1e>
 80020fc:	2d00      	cmp	r5, #0
 80020fe:	d006      	beq.n	800210e <__aeabi_f2d+0x7e>
 8002100:	0b32      	lsrs	r2, r6, #12
 8002102:	2680      	movs	r6, #128	; 0x80
 8002104:	0336      	lsls	r6, r6, #12
 8002106:	076d      	lsls	r5, r5, #29
 8002108:	4316      	orrs	r6, r2
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <__aeabi_f2d+0xa0>)
 800210c:	e7cf      	b.n	80020ae <__aeabi_f2d+0x1e>
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <__aeabi_f2d+0xa0>)
 8002110:	2600      	movs	r6, #0
 8002112:	e7cc      	b.n	80020ae <__aeabi_f2d+0x1e>
 8002114:	2300      	movs	r3, #0
 8002116:	2600      	movs	r6, #0
 8002118:	e7c9      	b.n	80020ae <__aeabi_f2d+0x1e>
 800211a:	0003      	movs	r3, r0
 800211c:	002a      	movs	r2, r5
 800211e:	3b0b      	subs	r3, #11
 8002120:	409a      	lsls	r2, r3
 8002122:	2500      	movs	r5, #0
 8002124:	e7e3      	b.n	80020ee <__aeabi_f2d+0x5e>
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	800fffff 	.word	0x800fffff
 800212c:	00000389 	.word	0x00000389
 8002130:	000007ff 	.word	0x000007ff

08002134 <__clzsi2>:
 8002134:	211c      	movs	r1, #28
 8002136:	2301      	movs	r3, #1
 8002138:	041b      	lsls	r3, r3, #16
 800213a:	4298      	cmp	r0, r3
 800213c:	d301      	bcc.n	8002142 <__clzsi2+0xe>
 800213e:	0c00      	lsrs	r0, r0, #16
 8002140:	3910      	subs	r1, #16
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	4298      	cmp	r0, r3
 8002146:	d301      	bcc.n	800214c <__clzsi2+0x18>
 8002148:	0a00      	lsrs	r0, r0, #8
 800214a:	3908      	subs	r1, #8
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	4298      	cmp	r0, r3
 8002150:	d301      	bcc.n	8002156 <__clzsi2+0x22>
 8002152:	0900      	lsrs	r0, r0, #4
 8002154:	3904      	subs	r1, #4
 8002156:	a202      	add	r2, pc, #8	; (adr r2, 8002160 <__clzsi2+0x2c>)
 8002158:	5c10      	ldrb	r0, [r2, r0]
 800215a:	1840      	adds	r0, r0, r1
 800215c:	4770      	bx	lr
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	02020304 	.word	0x02020304
 8002164:	01010101 	.word	0x01010101
	...

08002170 <__clzdi2>:
 8002170:	b510      	push	{r4, lr}
 8002172:	2900      	cmp	r1, #0
 8002174:	d103      	bne.n	800217e <__clzdi2+0xe>
 8002176:	f7ff ffdd 	bl	8002134 <__clzsi2>
 800217a:	3020      	adds	r0, #32
 800217c:	e002      	b.n	8002184 <__clzdi2+0x14>
 800217e:	1c08      	adds	r0, r1, #0
 8002180:	f7ff ffd8 	bl	8002134 <__clzsi2>
 8002184:	bd10      	pop	{r4, pc}
 8002186:	46c0      	nop			; (mov r8, r8)

08002188 <_ZN4mbed8AnalogInD1Ev>:
    }

    virtual ~AnalogIn()
    {
        // Do nothing
    }
 8002188:	4770      	bx	lr
	...

0800218c <_ZN4mbed8AnalogIn4lockEv>:
     * @returns
     *   A pointer to the singleton
     */
    T *get()
    {
        if (NULL == _ptr) {
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <_ZN4mbed8AnalogIn4lockEv+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d000      	beq.n	8002196 <_ZN4mbed8AnalogIn4lockEv+0xa>
protected:

    virtual void lock()
    {
        _mutex->lock();
    }
 8002194:	4770      	bx	lr
            singleton_lock();
            if (NULL == _ptr) {
                _ptr = new (_data) T();
 8002196:	4b02      	ldr	r3, [pc, #8]	; (80021a0 <_ZN4mbed8AnalogIn4lockEv+0x14>)
 8002198:	1d1a      	adds	r2, r3, #4
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e7fa      	b.n	8002194 <_ZN4mbed8AnalogIn4lockEv+0x8>
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	200008e0 	.word	0x200008e0

080021a4 <_ZN4mbed8AnalogIn6unlockEv>:
        if (NULL == _ptr) {
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <_ZN4mbed8AnalogIn6unlockEv+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d000      	beq.n	80021ae <_ZN4mbed8AnalogIn6unlockEv+0xa>

    virtual void unlock()
    {
        _mutex->unlock();
    }
 80021ac:	4770      	bx	lr
                _ptr = new (_data) T();
 80021ae:	4b02      	ldr	r3, [pc, #8]	; (80021b8 <_ZN4mbed8AnalogIn6unlockEv+0x14>)
 80021b0:	1d1a      	adds	r2, r3, #4
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	e7fa      	b.n	80021ac <_ZN4mbed8AnalogIn6unlockEv+0x8>
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	200008e0 	.word	0x200008e0

080021bc <_ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv>:
        _ops = &ops;
    }

    // Function attributes
    template <typename F>
    static R function_call(const void *p)
 80021bc:	b510      	push	{r4, lr}
    {
        return (*(F *)p)();
 80021be:	6803      	ldr	r3, [r0, #0]
 80021c0:	4798      	blx	r3
    }
 80021c2:	bd10      	pop	{r4, pc}

080021c4 <_ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv>:

    template <typename F>
    static void function_move(void *d, const void *p)
    {
        new (d) F(*(F *)p);
 80021c4:	2800      	cmp	r0, #0
 80021c6:	d001      	beq.n	80021cc <_ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv+0x8>
 80021c8:	680b      	ldr	r3, [r1, #0]
 80021ca:	6003      	str	r3, [r0, #0]
    }
 80021cc:	4770      	bx	lr

080021ce <_ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv>:

    template <typename F>
    static void function_dtor(void *p)
    {
        ((F *)p)->~F();
    }
 80021ce:	4770      	bx	lr

080021d0 <_Z13lectura_seriev>:
    pc.putc ('S');
    pc.putc (posicion_servo);
}

void lectura_serie (void)
{
 80021d0:	b510      	push	{r4, lr}
 80021d2:	e006      	b.n	80021e2 <_Z13lectura_seriev+0x12>
    while (pc.readable() )
    {
        dato = pc.getc();
        if (esperando_posicion_servo)
        {
            if (dato < 0) dato = 0;
 80021d4:	2000      	movs	r0, #0
 80021d6:	e013      	b.n	8002200 <_Z13lectura_seriev+0x30>
            if (dato > 90) dato = 90;
            posicion_servo = dato;
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <_Z13lectura_seriev+0x64>)
 80021da:	6018      	str	r0, [r3, #0]
            esperando_posicion_servo = false;
 80021dc:	2200      	movs	r2, #0
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <_Z13lectura_seriev+0x68>)
 80021e0:	701a      	strb	r2, [r3, #0]
     * the calls from the SerialBase instead for backwards compatibility. This problem is
     * part of why Stream and Serial should be deprecated.
     */
    bool readable()
    {
        return SerialBase::readable();
 80021e2:	4816      	ldr	r0, [pc, #88]	; (800223c <_Z13lectura_seriev+0x6c>)
 80021e4:	f000 fba2 	bl	800292c <_ZN4mbed10SerialBase8readableEv>
    while (pc.readable() )
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d022      	beq.n	8002232 <_Z13lectura_seriev+0x62>
        dato = pc.getc();
 80021ec:	4813      	ldr	r0, [pc, #76]	; (800223c <_Z13lectura_seriev+0x6c>)
 80021ee:	30bc      	adds	r0, #188	; 0xbc
 80021f0:	f001 fa5e 	bl	80036b0 <_ZN4mbed6Stream4getcEv>
        if (esperando_posicion_servo)
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <_Z13lectura_seriev+0x68>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <_Z13lectura_seriev+0x38>
            if (dato < 0) dato = 0;
 80021fc:	2800      	cmp	r0, #0
 80021fe:	dbe9      	blt.n	80021d4 <_Z13lectura_seriev+0x4>
            if (dato > 90) dato = 90;
 8002200:	285a      	cmp	r0, #90	; 0x5a
 8002202:	dde9      	ble.n	80021d8 <_Z13lectura_seriev+0x8>
 8002204:	205a      	movs	r0, #90	; 0x5a
 8002206:	e7e7      	b.n	80021d8 <_Z13lectura_seriev+0x8>
        }
        else
        {
            switch (dato)
 8002208:	2853      	cmp	r0, #83	; 0x53
 800220a:	d00b      	beq.n	8002224 <_Z13lectura_seriev+0x54>
 800220c:	2870      	cmp	r0, #112	; 0x70
 800220e:	d005      	beq.n	800221c <_Z13lectura_seriev+0x4c>
 8002210:	2850      	cmp	r0, #80	; 0x50
 8002212:	d1e6      	bne.n	80021e2 <_Z13lectura_seriev+0x12>
            {
                case 'P':
                    servo_por_potenciometro = true;
 8002214:	2201      	movs	r2, #1
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <_Z13lectura_seriev+0x70>)
 8002218:	701a      	strb	r2, [r3, #0]
                    break;
 800221a:	e7e2      	b.n	80021e2 <_Z13lectura_seriev+0x12>
                case 'p':
                    servo_por_potenciometro = false;
 800221c:	2200      	movs	r2, #0
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <_Z13lectura_seriev+0x70>)
 8002220:	701a      	strb	r2, [r3, #0]
                    break;
 8002222:	e7de      	b.n	80021e2 <_Z13lectura_seriev+0x12>
                case 'S':
                    esperando_posicion_servo = true;
 8002224:	2201      	movs	r2, #1
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <_Z13lectura_seriev+0x68>)
 8002228:	701a      	strb	r2, [r3, #0]
                    servo_por_potenciometro = false;
 800222a:	2200      	movs	r2, #0
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <_Z13lectura_seriev+0x70>)
 800222e:	701a      	strb	r2, [r3, #0]
                    break;
 8002230:	e7d7      	b.n	80021e2 <_Z13lectura_seriev+0x12>
            }
        }
    }
}
 8002232:	bd10      	pop	{r4, pc}
 8002234:	200007e8 	.word	0x200007e8
 8002238:	2000070c 	.word	0x2000070c
 800223c:	20000710 	.word	0x20000710
 8002240:	200000c4 	.word	0x200000c4

08002244 <_Z11mover_servov>:
        enviar_posicion_servo();
    }
}

void mover_servo (void)
{
 8002244:	b510      	push	{r4, lr}
    servo.pulsewidth_us (500 + posicion_servo*1500/180);
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <_Z11mover_servov+0x28>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4809      	ldr	r0, [pc, #36]	; (8002270 <_Z11mover_servov+0x2c>)
 800224c:	4358      	muls	r0, r3
 800224e:	21b4      	movs	r1, #180	; 0xb4
 8002250:	f7fd fff6 	bl	8000240 <__divsi3>
 8002254:	30f5      	adds	r0, #245	; 0xf5
 8002256:	30ff      	adds	r0, #255	; 0xff
 8002258:	0004      	movs	r4, r0
    /** Set the PWM pulsewidth, specified in micro-seconds (int), keeping the period the same.
     *  @param us Change the pulse width of a PWM signal specified in micro-seconds
     */
    void pulsewidth_us(int us)
    {
        core_util_critical_section_enter();
 800225a:	f001 fa77 	bl	800374c <core_util_critical_section_enter>
        pwmout_pulsewidth_us(&_pwm, us);
 800225e:	0021      	movs	r1, r4
 8002260:	4804      	ldr	r0, [pc, #16]	; (8002274 <_Z11mover_servov+0x30>)
 8002262:	f004 f856 	bl	8006312 <pwmout_pulsewidth_us>
        core_util_critical_section_exit();
 8002266:	f001 fa7b 	bl	8003760 <core_util_critical_section_exit>
}
 800226a:	bd10      	pop	{r4, pc}
 800226c:	200007e8 	.word	0x200007e8
 8002270:	000005dc 	.word	0x000005dc
 8002274:	20000840 	.word	0x20000840

08002278 <_ZN4mbed8AnalogInD0Ev>:
    virtual ~AnalogIn()
 8002278:	b510      	push	{r4, lr}
 800227a:	0004      	movs	r4, r0
    }
 800227c:	f001 ff0e 	bl	800409c <_ZdlPv>
 8002280:	0020      	movs	r0, r4
 8002282:	bd10      	pop	{r4, pc}

08002284 <_ZN4mbed6TickerD1Ev>:
    void attach_us(T *obj, M method, us_timestamp_t t)
    {
        attach_us(Callback<void()>(obj, method), t);
    }

    virtual ~Ticker()
 8002284:	b510      	push	{r4, lr}
 8002286:	0004      	movs	r4, r0
    {
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <_ZN4mbed6TickerD1Ev+0x24>)
 800228a:	6003      	str	r3, [r0, #0]
        detach();
 800228c:	f000 fc30 	bl	8002af0 <_ZN4mbed6Ticker6detachEv>
    {
 8002290:	0020      	movs	r0, r4
 8002292:	3028      	adds	r0, #40	; 0x28
        if (_ops) {
 8002294:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <_ZN4mbed6TickerD1Ev+0x1a>
            _ops->dtor(this);
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4798      	blx	r3
 800229e:	0020      	movs	r0, r4
 80022a0:	f000 fca4 	bl	8002bec <_ZN4mbed10TimerEventD1Ev>
    }
 80022a4:	0020      	movs	r0, r4
 80022a6:	bd10      	pop	{r4, pc}
 80022a8:	08008330 	.word	0x08008330

080022ac <_ZN4mbed6SerialD1Ev>:
class Serial : public SerialBase, public Stream, private NonCopyable<Serial> {
 80022ac:	b510      	push	{r4, lr}
 80022ae:	0004      	movs	r4, r0
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <_ZN4mbed6SerialD1Ev+0x28>)
 80022b2:	6003      	str	r3, [r0, #0]
 80022b4:	0019      	movs	r1, r3
 80022b6:	3120      	adds	r1, #32
 80022b8:	22bc      	movs	r2, #188	; 0xbc
 80022ba:	5081      	str	r1, [r0, r2]
 80022bc:	3380      	adds	r3, #128	; 0x80
 80022be:	3204      	adds	r2, #4
 80022c0:	5083      	str	r3, [r0, r2]
 80022c2:	30bc      	adds	r0, #188	; 0xbc
 80022c4:	f001 f9c8 	bl	8003658 <_ZN4mbed6StreamD1Ev>
 80022c8:	0020      	movs	r0, r4
 80022ca:	f000 fba9 	bl	8002a20 <_ZN4mbed10SerialBaseD1Ev>
 80022ce:	0020      	movs	r0, r4
 80022d0:	bd10      	pop	{r4, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	08008288 	.word	0x08008288

080022d8 <_ZThn188_N4mbed6SerialD1Ev>:
 80022d8:	b408      	push	{r3}
 80022da:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <_ZThn188_N4mbed6SerialD1Ev+0xc>)
 80022dc:	469c      	mov	ip, r3
 80022de:	38bc      	subs	r0, #188	; 0xbc
 80022e0:	bc08      	pop	{r3}
 80022e2:	4760      	bx	ip
 80022e4:	080022ad 	.word	0x080022ad

080022e8 <_ZThn192_N4mbed6SerialD1Ev>:
 80022e8:	b408      	push	{r3}
 80022ea:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <_ZThn192_N4mbed6SerialD1Ev+0xc>)
 80022ec:	469c      	mov	ip, r3
 80022ee:	38c0      	subs	r0, #192	; 0xc0
 80022f0:	bc08      	pop	{r3}
 80022f2:	4760      	bx	ip
 80022f4:	080022ad 	.word	0x080022ad

080022f8 <_ZN4mbed6PwmOutD1Ev>:
    ~PwmOut()
 80022f8:	b510      	push	{r4, lr}
 80022fa:	0004      	movs	r4, r0
        core_util_critical_section_enter();
 80022fc:	f001 fa26 	bl	800374c <core_util_critical_section_enter>
    }

    /** Unlock deep sleep in case it is locked */
    void unlock_deep_sleep()
    {
        if (_deep_sleep_locked == true) {
 8002300:	7e23      	ldrb	r3, [r4, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <_ZN4mbed6PwmOutD1Ev+0x16>
        core_util_critical_section_exit();
 8002306:	f001 fa2b 	bl	8003760 <core_util_critical_section_exit>
    }
 800230a:	0020      	movs	r0, r4
 800230c:	bd10      	pop	{r4, pc}
            sleep_manager_unlock_deep_sleep();
 800230e:	f000 fd77 	bl	8002e00 <sleep_manager_unlock_deep_sleep_internal>
            _deep_sleep_locked = false;
 8002312:	2300      	movs	r3, #0
 8002314:	7623      	strb	r3, [r4, #24]
 8002316:	e7f6      	b.n	8002306 <_ZN4mbed6PwmOutD1Ev+0xe>

08002318 <_ZN4mbed6TickerC1Ev>:
    Ticker() : TimerEvent(), _function(0), _lock_deepsleep(true)
 8002318:	b510      	push	{r4, lr}
 800231a:	0004      	movs	r4, r0
 800231c:	f000 fc3c 	bl	8002b98 <_ZN4mbed10TimerEventC1Ev>
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <_ZN4mbed6TickerC1Ev+0x24>)
 8002322:	6023      	str	r3, [r4, #0]
 8002324:	0020      	movs	r0, r4
 8002326:	3028      	adds	r0, #40	; 0x28
            memset(this, 0, sizeof(Callback));
 8002328:	2210      	movs	r2, #16
 800232a:	2100      	movs	r1, #0
 800232c:	f005 faf7 	bl	800791e <memset>
 8002330:	2201      	movs	r2, #1
 8002332:	2338      	movs	r3, #56	; 0x38
 8002334:	54e2      	strb	r2, [r4, r3]
    }
 8002336:	0020      	movs	r0, r4
 8002338:	bd10      	pop	{r4, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	08008330 	.word	0x08008330

08002340 <_Z41__static_initialization_and_destruction_0ii>:
    pc.attach (lectura_serie, Serial::RxIrq);

    while(1) 
    {
    }
}
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	2801      	cmp	r0, #1
 8002346:	d001      	beq.n	800234c <_Z41__static_initialization_and_destruction_0ii+0xc>
 8002348:	b002      	add	sp, #8
 800234a:	bd70      	pop	{r4, r5, r6, pc}
 800234c:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800234e:	4299      	cmp	r1, r3
 8002350:	d1fa      	bne.n	8002348 <_Z41__static_initialization_and_destruction_0ii+0x8>
    {
 8002352:	4a29      	ldr	r2, [pc, #164]	; (80023f8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002354:	4b29      	ldr	r3, [pc, #164]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002356:	601a      	str	r2, [r3, #0]
        if (NULL == _ptr) {
 8002358:	4b29      	ldr	r3, [pc, #164]	; (8002400 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d041      	beq.n	80023e4 <_Z41__static_initialization_and_destruction_0ii+0xa4>
        analogin_init(&_adc, pin);
 8002360:	2100      	movs	r1, #0
 8002362:	4826      	ldr	r0, [pc, #152]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002364:	3004      	adds	r0, #4
 8002366:	f001 ffcd 	bl	8004304 <analogin_init>
 800236a:	4b25      	ldr	r3, [pc, #148]	; (8002400 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d03c      	beq.n	80023ec <_Z41__static_initialization_and_destruction_0ii+0xac>
AnalogIn pot(A0);
 8002372:	4c24      	ldr	r4, [pc, #144]	; (8002404 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002374:	0022      	movs	r2, r4
 8002376:	4924      	ldr	r1, [pc, #144]	; (8002408 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8002378:	4820      	ldr	r0, [pc, #128]	; (80023fc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800237a:	f001 fe3f 	bl	8003ffc <__aeabi_atexit>
    PwmOut(PinName pin) : _deep_sleep_locked(false)
 800237e:	4d23      	ldr	r5, [pc, #140]	; (800240c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002380:	2600      	movs	r6, #0
 8002382:	762e      	strb	r6, [r5, #24]
        core_util_critical_section_enter();
 8002384:	f001 f9e2 	bl	800374c <core_util_critical_section_enter>
        pwmout_init(&_pwm, pin);
 8002388:	2127      	movs	r1, #39	; 0x27
 800238a:	0028      	movs	r0, r5
 800238c:	f003 ff28 	bl	80061e0 <pwmout_init>
        core_util_critical_section_exit();
 8002390:	f001 f9e6 	bl	8003760 <core_util_critical_section_exit>
PwmOut servo (D9);
 8002394:	0022      	movs	r2, r4
 8002396:	491e      	ldr	r1, [pc, #120]	; (8002410 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002398:	0028      	movs	r0, r5
 800239a:	f001 fe2f 	bl	8003ffc <__aeabi_atexit>
Serial pc(SERIAL_TX, SERIAL_RX);
 800239e:	4d1d      	ldr	r5, [pc, #116]	; (8002414 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80023a0:	2396      	movs	r3, #150	; 0x96
 80023a2:	019b      	lsls	r3, r3, #6
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	0033      	movs	r3, r6
 80023a8:	2203      	movs	r2, #3
 80023aa:	2102      	movs	r1, #2
 80023ac:	0028      	movs	r0, r5
 80023ae:	f000 f9f1 	bl	8002794 <_ZN4mbed6SerialC1E7PinNameS1_PKci>
 80023b2:	0022      	movs	r2, r4
 80023b4:	4918      	ldr	r1, [pc, #96]	; (8002418 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80023b6:	0028      	movs	r0, r5
 80023b8:	f001 fe20 	bl	8003ffc <__aeabi_atexit>
Ticker tickpotenciometro;
 80023bc:	4d17      	ldr	r5, [pc, #92]	; (800241c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80023be:	0028      	movs	r0, r5
 80023c0:	f7ff ffaa 	bl	8002318 <_ZN4mbed6TickerC1Ev>
 80023c4:	4e16      	ldr	r6, [pc, #88]	; (8002420 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80023c6:	0022      	movs	r2, r4
 80023c8:	0031      	movs	r1, r6
 80023ca:	0028      	movs	r0, r5
 80023cc:	f001 fe16 	bl	8003ffc <__aeabi_atexit>
Ticker tickservo;
 80023d0:	4d14      	ldr	r5, [pc, #80]	; (8002424 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80023d2:	0028      	movs	r0, r5
 80023d4:	f7ff ffa0 	bl	8002318 <_ZN4mbed6TickerC1Ev>
 80023d8:	0022      	movs	r2, r4
 80023da:	0031      	movs	r1, r6
 80023dc:	0028      	movs	r0, r5
 80023de:	f001 fe0d 	bl	8003ffc <__aeabi_atexit>
}
 80023e2:	e7b1      	b.n	8002348 <_Z41__static_initialization_and_destruction_0ii+0x8>
                _ptr = new (_data) T();
 80023e4:	4a10      	ldr	r2, [pc, #64]	; (8002428 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e7b9      	b.n	8002360 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80023ec:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e7be      	b.n	8002372 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80023f4:	0000ffff 	.word	0x0000ffff
 80023f8:	08008264 	.word	0x08008264
 80023fc:	200007ec 	.word	0x200007ec
 8002400:	200008e0 	.word	0x200008e0
 8002404:	200000c0 	.word	0x200000c0
 8002408:	08002189 	.word	0x08002189
 800240c:	20000840 	.word	0x20000840
 8002410:	080022f9 	.word	0x080022f9
 8002414:	20000710 	.word	0x20000710
 8002418:	080022ad 	.word	0x080022ad
 800241c:	20000860 	.word	0x20000860
 8002420:	08002285 	.word	0x08002285
 8002424:	200008a0 	.word	0x200008a0
 8002428:	200008e4 	.word	0x200008e4

0800242c <_ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf>:
    void attach(Callback<void()> func, float t)
 800242c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800242e:	b085      	sub	sp, #20
 8002430:	0005      	movs	r5, r0
 8002432:	000c      	movs	r4, r1
 8002434:	1c16      	adds	r6, r2, #0
        if (func._ops) {
 8002436:	68cb      	ldr	r3, [r1, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <_ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf+0x16>
            func._ops->move(this, &func);
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4668      	mov	r0, sp
 8002440:	4798      	blx	r3
        _ops = func._ops;
 8002442:	68e3      	ldr	r3, [r4, #12]
 8002444:	9303      	str	r3, [sp, #12]
        attach_us(func, t * 1000000.0f);
 8002446:	491c      	ldr	r1, [pc, #112]	; (80024b8 <_ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf+0x8c>)
 8002448:	1c30      	adds	r0, r6, #0
 800244a:	f7fe fbad 	bl	8000ba8 <__aeabi_fmul>
 800244e:	f7fe f8db 	bl	8000608 <__aeabi_f2ulz>
 8002452:	0006      	movs	r6, r0
 8002454:	000f      	movs	r7, r1
        core_util_critical_section_enter();
 8002456:	f001 f979 	bl	800374c <core_util_critical_section_enter>
        if (!_function && _lock_deepsleep) {
 800245a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800245c:	2b00      	cmp	r3, #0
 800245e:	d025      	beq.n	80024ac <_ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf+0x80>
 8002460:	2300      	movs	r3, #0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d125      	bne.n	80024b2 <_ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf+0x86>
        _function = func;
 8002466:	002c      	movs	r4, r5
 8002468:	3428      	adds	r4, #40	; 0x28
        if (this != &that) {
 800246a:	466b      	mov	r3, sp
 800246c:	429c      	cmp	r4, r3
 800246e:	d00e      	beq.n	800248e <_ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf+0x62>
        if (_ops) {
 8002470:	68e3      	ldr	r3, [r4, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <_ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf+0x50>
            _ops->dtor(this);
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	0020      	movs	r0, r4
 800247a:	4798      	blx	r3
        if (func._ops) {
 800247c:	9b03      	ldr	r3, [sp, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <_ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf+0x5e>
            func._ops->move(this, &func);
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4669      	mov	r1, sp
 8002486:	0020      	movs	r0, r4
 8002488:	4798      	blx	r3
        _ops = func._ops;
 800248a:	9b03      	ldr	r3, [sp, #12]
 800248c:	60e3      	str	r3, [r4, #12]
        setup(t);
 800248e:	0032      	movs	r2, r6
 8002490:	003b      	movs	r3, r7
 8002492:	0028      	movs	r0, r5
 8002494:	f000 fb62 	bl	8002b5c <_ZN4mbed6Ticker5setupEy>
        core_util_critical_section_exit();
 8002498:	f001 f962 	bl	8003760 <core_util_critical_section_exit>
        if (_ops) {
 800249c:	9b03      	ldr	r3, [sp, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <_ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf+0x7c>
            _ops->dtor(this);
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4668      	mov	r0, sp
 80024a6:	4798      	blx	r3
    }
 80024a8:	b005      	add	sp, #20
 80024aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!_function && _lock_deepsleep) {
 80024ac:	3338      	adds	r3, #56	; 0x38
 80024ae:	5ceb      	ldrb	r3, [r5, r3]
 80024b0:	e7d7      	b.n	8002462 <_ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf+0x36>
            sleep_manager_lock_deep_sleep();
 80024b2:	f000 fc83 	bl	8002dbc <sleep_manager_lock_deep_sleep_internal>
 80024b6:	e7d6      	b.n	8002466 <_ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf+0x3a>
 80024b8:	49742400 	.word	0x49742400

080024bc <_ZN4mbed6TickerD0Ev>:
    virtual ~Ticker()
 80024bc:	b510      	push	{r4, lr}
 80024be:	0004      	movs	r4, r0
    {
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <_ZN4mbed6TickerD0Ev+0x2c>)
 80024c2:	6003      	str	r3, [r0, #0]
        detach();
 80024c4:	f000 fb14 	bl	8002af0 <_ZN4mbed6Ticker6detachEv>
    {
 80024c8:	0020      	movs	r0, r4
 80024ca:	3028      	adds	r0, #40	; 0x28
        if (_ops) {
 80024cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <_ZN4mbed6TickerD0Ev+0x1a>
            _ops->dtor(this);
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4798      	blx	r3
 80024d6:	0020      	movs	r0, r4
 80024d8:	f000 fb88 	bl	8002bec <_ZN4mbed10TimerEventD1Ev>
    }
 80024dc:	0020      	movs	r0, r4
 80024de:	f001 fddd 	bl	800409c <_ZdlPv>
 80024e2:	0020      	movs	r0, r4
 80024e4:	bd10      	pop	{r4, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	08008330 	.word	0x08008330

080024ec <_Z21enviar_posicion_servov>:
{
 80024ec:	b510      	push	{r4, lr}
    pc.putc ('S');
 80024ee:	4c06      	ldr	r4, [pc, #24]	; (8002508 <_Z21enviar_posicion_servov+0x1c>)
 80024f0:	34bc      	adds	r4, #188	; 0xbc
 80024f2:	2153      	movs	r1, #83	; 0x53
 80024f4:	0020      	movs	r0, r4
 80024f6:	f001 f8c7 	bl	8003688 <_ZN4mbed6Stream4putcEi>
    pc.putc (posicion_servo);
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <_Z21enviar_posicion_servov+0x20>)
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	0020      	movs	r0, r4
 8002500:	f001 f8c2 	bl	8003688 <_ZN4mbed6Stream4putcEi>
}
 8002504:	bd10      	pop	{r4, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	20000710 	.word	0x20000710
 800250c:	200007e8 	.word	0x200007e8

08002510 <_Z21lectura_potenciometrov>:
{
 8002510:	b570      	push	{r4, r5, r6, lr}
        lock();
 8002512:	4c0e      	ldr	r4, [pc, #56]	; (800254c <_Z21lectura_potenciometrov+0x3c>)
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	0020      	movs	r0, r4
 800251a:	4798      	blx	r3
        float ret = analogin_read(&_adc);
 800251c:	1d20      	adds	r0, r4, #4
 800251e:	f003 fb71 	bl	8005c04 <analogin_read>
 8002522:	1c05      	adds	r5, r0, #0
        unlock();
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0020      	movs	r0, r4
 800252a:	4798      	blx	r3
    if (servo_por_potenciometro)
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <_Z21lectura_potenciometrov+0x40>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d100      	bne.n	8002536 <_Z21lectura_potenciometrov+0x26>
}
 8002534:	bd70      	pop	{r4, r5, r6, pc}
        posicion_servo = valor_potenciometro*90;
 8002536:	4907      	ldr	r1, [pc, #28]	; (8002554 <_Z21lectura_potenciometrov+0x44>)
 8002538:	1c28      	adds	r0, r5, #0
 800253a:	f7fe fb35 	bl	8000ba8 <__aeabi_fmul>
 800253e:	f7fe fdef 	bl	8001120 <__aeabi_f2iz>
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <_Z21lectura_potenciometrov+0x48>)
 8002544:	6018      	str	r0, [r3, #0]
        enviar_posicion_servo();
 8002546:	f7ff ffd1 	bl	80024ec <_Z21enviar_posicion_servov>
}
 800254a:	e7f3      	b.n	8002534 <_Z21lectura_potenciometrov+0x24>
 800254c:	200007ec 	.word	0x200007ec
 8002550:	200000c4 	.word	0x200000c4
 8002554:	42b40000 	.word	0x42b40000
 8002558:	200007e8 	.word	0x200007e8

0800255c <main>:
{
 800255c:	b500      	push	{lr}
 800255e:	b08d      	sub	sp, #52	; 0x34
        core_util_critical_section_enter();
 8002560:	f001 f8f4 	bl	800374c <core_util_critical_section_enter>
        pwmout_period_ms(&_pwm, ms);
 8002564:	210a      	movs	r1, #10
 8002566:	4821      	ldr	r0, [pc, #132]	; (80025ec <main+0x90>)
 8002568:	f003 fecc 	bl	8006304 <pwmout_period_ms>
        core_util_critical_section_exit();
 800256c:	f001 f8f8 	bl	8003760 <core_util_critical_section_exit>
        memset(this, 0, sizeof(Callback));
 8002570:	2210      	movs	r2, #16
 8002572:	2100      	movs	r1, #0
 8002574:	4668      	mov	r0, sp
 8002576:	f005 f9d2 	bl	800791e <memset>
        new (this) F(f);
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <main+0x94>)
 800257c:	9300      	str	r3, [sp, #0]
        _ops = &ops;
 800257e:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <main+0x98>)
 8002580:	9303      	str	r3, [sp, #12]
    tickpotenciometro.attach (lectura_potenciometro, 0.02);
 8002582:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <main+0x9c>)
 8002584:	4669      	mov	r1, sp
 8002586:	481d      	ldr	r0, [pc, #116]	; (80025fc <main+0xa0>)
 8002588:	f7ff ff50 	bl	800242c <_ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf>
        if (_ops) {
 800258c:	9b03      	ldr	r3, [sp, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <main+0x3c>
            _ops->dtor(this);
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4668      	mov	r0, sp
 8002596:	4798      	blx	r3
        memset(this, 0, sizeof(Callback));
 8002598:	2210      	movs	r2, #16
 800259a:	2100      	movs	r1, #0
 800259c:	a804      	add	r0, sp, #16
 800259e:	f005 f9be 	bl	800791e <memset>
        new (this) F(f);
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <main+0xa4>)
 80025a4:	9304      	str	r3, [sp, #16]
        _ops = &ops;
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <main+0x98>)
 80025a8:	9307      	str	r3, [sp, #28]
    tickservo.attach (mover_servo, 0.01);
 80025aa:	4a16      	ldr	r2, [pc, #88]	; (8002604 <main+0xa8>)
 80025ac:	a904      	add	r1, sp, #16
 80025ae:	4816      	ldr	r0, [pc, #88]	; (8002608 <main+0xac>)
 80025b0:	f7ff ff3c 	bl	800242c <_ZN4mbed6Ticker6attachENS_8CallbackIFvvEEEf>
        if (_ops) {
 80025b4:	9b07      	ldr	r3, [sp, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <main+0x64>
            _ops->dtor(this);
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	a804      	add	r0, sp, #16
 80025be:	4798      	blx	r3
        memset(this, 0, sizeof(Callback));
 80025c0:	2210      	movs	r2, #16
 80025c2:	2100      	movs	r1, #0
 80025c4:	a808      	add	r0, sp, #32
 80025c6:	f005 f9aa 	bl	800791e <memset>
        new (this) F(f);
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <main+0xb0>)
 80025cc:	9308      	str	r3, [sp, #32]
        _ops = &ops;
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <main+0x98>)
 80025d0:	930b      	str	r3, [sp, #44]	; 0x2c
    pc.attach (lectura_serie, Serial::RxIrq);
 80025d2:	2200      	movs	r2, #0
 80025d4:	a908      	add	r1, sp, #32
 80025d6:	480e      	ldr	r0, [pc, #56]	; (8002610 <main+0xb4>)
 80025d8:	f000 f9b8 	bl	800294c <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE>
        if (_ops) {
 80025dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <main+0x8c>
            _ops->dtor(this);
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	a808      	add	r0, sp, #32
 80025e6:	4798      	blx	r3
 80025e8:	e7fe      	b.n	80025e8 <main+0x8c>
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	20000840 	.word	0x20000840
 80025f0:	08002511 	.word	0x08002511
 80025f4:	08008274 	.word	0x08008274
 80025f8:	3ca3d70a 	.word	0x3ca3d70a
 80025fc:	20000860 	.word	0x20000860
 8002600:	08002245 	.word	0x08002245
 8002604:	3c23d70a 	.word	0x3c23d70a
 8002608:	200008a0 	.word	0x200008a0
 800260c:	080021d1 	.word	0x080021d1
 8002610:	20000710 	.word	0x20000710

08002614 <_ZN4mbed6SerialD0Ev>:
 8002614:	b510      	push	{r4, lr}
 8002616:	0004      	movs	r4, r0
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <_ZN4mbed6SerialD0Ev+0x2c>)
 800261a:	6003      	str	r3, [r0, #0]
 800261c:	0019      	movs	r1, r3
 800261e:	3120      	adds	r1, #32
 8002620:	22bc      	movs	r2, #188	; 0xbc
 8002622:	5081      	str	r1, [r0, r2]
 8002624:	3380      	adds	r3, #128	; 0x80
 8002626:	3204      	adds	r2, #4
 8002628:	5083      	str	r3, [r0, r2]
 800262a:	30bc      	adds	r0, #188	; 0xbc
 800262c:	f001 f814 	bl	8003658 <_ZN4mbed6StreamD1Ev>
 8002630:	0020      	movs	r0, r4
 8002632:	f000 f9f5 	bl	8002a20 <_ZN4mbed10SerialBaseD1Ev>
 8002636:	0020      	movs	r0, r4
 8002638:	f001 fd30 	bl	800409c <_ZdlPv>
 800263c:	0020      	movs	r0, r4
 800263e:	bd10      	pop	{r4, pc}
 8002640:	08008288 	.word	0x08008288

08002644 <_ZThn188_N4mbed6SerialD0Ev>:
 8002644:	b408      	push	{r3}
 8002646:	4b02      	ldr	r3, [pc, #8]	; (8002650 <_ZThn188_N4mbed6SerialD0Ev+0xc>)
 8002648:	469c      	mov	ip, r3
 800264a:	38bc      	subs	r0, #188	; 0xbc
 800264c:	bc08      	pop	{r3}
 800264e:	4760      	bx	ip
 8002650:	08002615 	.word	0x08002615

08002654 <_ZThn192_N4mbed6SerialD0Ev>:
 8002654:	b408      	push	{r3}
 8002656:	4b02      	ldr	r3, [pc, #8]	; (8002660 <_ZThn192_N4mbed6SerialD0Ev+0xc>)
 8002658:	469c      	mov	ip, r3
 800265a:	38c0      	subs	r0, #192	; 0xc0
 800265c:	bc08      	pop	{r3}
 800265e:	4760      	bx	ip
 8002660:	08002615 	.word	0x08002615

08002664 <_GLOBAL__sub_I_pot>:
}
 8002664:	b510      	push	{r4, lr}
 8002666:	4902      	ldr	r1, [pc, #8]	; (8002670 <_GLOBAL__sub_I_pot+0xc>)
 8002668:	2001      	movs	r0, #1
 800266a:	f7ff fe69 	bl	8002340 <_Z41__static_initialization_and_destruction_0ii>
 800266e:	bd10      	pop	{r4, pc}
 8002670:	0000ffff 	.word	0x0000ffff

08002674 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev>:
            (BufferSize < (((uint64_t) 1) << (sizeof(CounterType) * 8))),
            "Invalid BufferSize for the CounterType"
        );
    }

    ~CircularBuffer()
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	0005      	movs	r5, r0
    {
    }
 8002678:	1e06      	subs	r6, r0, #0
 800267a:	d00c      	beq.n	8002696 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev+0x22>
 800267c:	0004      	movs	r4, r0
 800267e:	3458      	adds	r4, #88	; 0x58
 8002680:	42b4      	cmp	r4, r6
 8002682:	d008      	beq.n	8002696 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev+0x22>
 8002684:	3c2c      	subs	r4, #44	; 0x2c
    void *rx_buffer;           /**< Rx buffer */
    size_t rx_length;          /**< Length of Rx buffer */
    uint32_t event;            /**< Event for a transaction */
    event_callback_t callback; /**< User's callback */
    uint8_t width;             /**< Buffer's word width (8, 16, 32, 64) */
} transaction_t;
 8002686:	0020      	movs	r0, r4
 8002688:	3018      	adds	r0, #24

    /** Destroy a callback
     */
    ~Callback()
    {
        if (_ops) {
 800268a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f7      	beq.n	8002680 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev+0xc>
            _ops->dtor(this);
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	4798      	blx	r3
 8002694:	e7f4      	b.n	8002680 <_ZN4mbed14CircularBufferINS_11TransactionINS_3SPIEEELm2EmED1Ev+0xc>
 8002696:	0028      	movs	r0, r5
 8002698:	bd70      	pop	{r4, r5, r6, pc}
	...

0800269c <_Z41__static_initialization_and_destruction_0ii>:
#endif
}

#endif

} // namespace mbed
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	0004      	movs	r4, r0
 80026a0:	2801      	cmp	r0, #1
 80026a2:	d000      	beq.n	80026a6 <_Z41__static_initialization_and_destruction_0ii+0xa>
 80026a4:	bd70      	pop	{r4, r5, r6, pc}
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80026a8:	4299      	cmp	r1, r3
 80026aa:	d1fb      	bne.n	80026a4 <_Z41__static_initialization_and_destruction_0ii+0x8>
    CircularBuffer() : _head(0), _tail(0), _full(false)
 80026ac:	4d0f      	ldr	r5, [pc, #60]	; (80026ec <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80026ae:	2c00      	cmp	r4, #0
 80026b0:	db0f      	blt.n	80026d2 <_Z41__static_initialization_and_destruction_0ii+0x36>
public:
    Transaction(Class *tpointer, const transaction_t &transaction) : _obj(tpointer), _data(transaction)
    {
    }

    Transaction() : _obj(), _data()
 80026b2:	2600      	movs	r6, #0
 80026b4:	0028      	movs	r0, r5
 80026b6:	c040      	stmia	r0!, {r6}
 80026b8:	2228      	movs	r2, #40	; 0x28
 80026ba:	0031      	movs	r1, r6
 80026bc:	f005 f92f 	bl	800791e <memset>
} transaction_t;
 80026c0:	0028      	movs	r0, r5
 80026c2:	3018      	adds	r0, #24
            memset(this, 0, sizeof(Callback));
 80026c4:	2210      	movs	r2, #16
 80026c6:	0031      	movs	r1, r6
 80026c8:	f005 f929 	bl	800791e <memset>
 80026cc:	352c      	adds	r5, #44	; 0x2c
 80026ce:	3c01      	subs	r4, #1
 80026d0:	e7ed      	b.n	80026ae <_Z41__static_initialization_and_destruction_0ii+0x12>
 80026d2:	4806      	ldr	r0, [pc, #24]	; (80026ec <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80026d4:	2300      	movs	r3, #0
 80026d6:	6583      	str	r3, [r0, #88]	; 0x58
 80026d8:	65c3      	str	r3, [r0, #92]	; 0x5c
 80026da:	2260      	movs	r2, #96	; 0x60
 80026dc:	5483      	strb	r3, [r0, r2]
CircularBuffer<Transaction<SPI>, TRANSACTION_QUEUE_SIZE_SPI> SPI::_transaction_buffer;
 80026de:	4a04      	ldr	r2, [pc, #16]	; (80026f0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80026e0:	4904      	ldr	r1, [pc, #16]	; (80026f4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80026e2:	f001 fc8b 	bl	8003ffc <__aeabi_atexit>
} // namespace mbed
 80026e6:	e7dd      	b.n	80026a4 <_Z41__static_initialization_and_destruction_0ii+0x8>
 80026e8:	0000ffff 	.word	0x0000ffff
 80026ec:	200008e8 	.word	0x200008e8
 80026f0:	200000c0 	.word	0x200000c0
 80026f4:	08002675 	.word	0x08002675

080026f8 <_GLOBAL__sub_I__ZN4mbed3SPI19_transaction_bufferE>:
 80026f8:	b510      	push	{r4, lr}
 80026fa:	4902      	ldr	r1, [pc, #8]	; (8002704 <_GLOBAL__sub_I__ZN4mbed3SPI19_transaction_bufferE+0xc>)
 80026fc:	2001      	movs	r0, #1
 80026fe:	f7ff ffcd 	bl	800269c <_Z41__static_initialization_and_destruction_0ii>
 8002702:	bd10      	pop	{r4, pc}
 8002704:	0000ffff 	.word	0x0000ffff

08002708 <_ZN4mbed10FileHandle5lseekEli>:
     *    -1 on failure or unsupported
     *  @deprecated Replaced by `off_t FileHandle::seek(off_t offset, int whence = SEEK_SET)'
     *
     */
    MBED_DEPRECATED_SINCE("mbed-os-5.4", "Replaced by FileHandle::seek")
    virtual off_t lseek(off_t offset, int whence)
 8002708:	b510      	push	{r4, lr}
    {
        return seek(offset, whence);
 800270a:	6803      	ldr	r3, [r0, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	4798      	blx	r3
    }
 8002710:	bd10      	pop	{r4, pc}

08002712 <_ZN4mbed10FileHandle5fsyncEv>:
     *    0 on success or un-needed,
     *   -1 on error
     *  @deprecated Replaced by `int FileHandle::sync()'
     */
    MBED_DEPRECATED_SINCE("mbed-os-5.4", "Replaced by FileHandle::sync")
    virtual int fsync()
 8002712:	b510      	push	{r4, lr}
    {
        return sync();
 8002714:	6803      	ldr	r3, [r0, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4798      	blx	r3
    }
 800271a:	bd10      	pop	{r4, pc}

0800271c <_ZN4mbed10FileHandle4flenEv>:
     *  @returns
     *   Length of the file
     *  @deprecated Replaced by `off_t FileHandle::size()'
     */
    MBED_DEPRECATED_SINCE("mbed-os-5.4", "Replaced by FileHandle::size")
    virtual off_t flen()
 800271c:	b510      	push	{r4, lr}
    {
        return size();
 800271e:	6803      	ldr	r3, [r0, #0]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	4798      	blx	r3
    }
 8002724:	bd10      	pop	{r4, pc}

08002726 <_ZN4mbed10FileHandle12set_blockingEb>:
     *  @return             0 on success
     *  @return             Negative error code on failure
     */
    virtual int set_blocking(bool blocking)
    {
        return blocking ? 0 : -ENOTTY;
 8002726:	2900      	cmp	r1, #0
 8002728:	d001      	beq.n	800272e <_ZN4mbed10FileHandle12set_blockingEb+0x8>
 800272a:	2000      	movs	r0, #0
    }
 800272c:	4770      	bx	lr
        return blocking ? 0 : -ENOTTY;
 800272e:	2019      	movs	r0, #25
 8002730:	4240      	negs	r0, r0
 8002732:	e7fb      	b.n	800272c <_ZN4mbed10FileHandle12set_blockingEb+0x6>

08002734 <_ZNK4mbed10FileHandle11is_blockingEv>:
     *  @return             true for blocking mode, false for non-blocking mode.
     */
    virtual bool is_blocking() const
    {
        return true;
    }
 8002734:	2001      	movs	r0, #1
 8002736:	4770      	bx	lr

08002738 <_ZNK4mbed10FileHandle4pollEs>:
     */
    virtual short poll(short events) const
    {
        // Possible default for real files
        return POLLIN | POLLOUT;
    }
 8002738:	2011      	movs	r0, #17
 800273a:	4770      	bx	lr

0800273c <_ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE>:
     *  @param func     Function to call on state change
     */
    virtual void sigio(Callback<void()> func)
    {
        //Default for real files. Do nothing for real files.
    }
 800273c:	4770      	bx	lr

0800273e <_ZN4mbed6Serial4lockEv>:
}

void Serial::lock()
{
    _mutex.lock();
}
 800273e:	4770      	bx	lr

08002740 <_ZThn188_N4mbed6Serial4lockEv>:
    }

protected:
    virtual int _getc();
    virtual int _putc(int c);
    virtual void lock();
 8002740:	b408      	push	{r3}
 8002742:	4b02      	ldr	r3, [pc, #8]	; (800274c <_ZThn188_N4mbed6Serial4lockEv+0xc>)
 8002744:	469c      	mov	ip, r3
 8002746:	38bc      	subs	r0, #188	; 0xbc
 8002748:	bc08      	pop	{r3}
 800274a:	4760      	bx	ip
 800274c:	0800273f 	.word	0x0800273f

08002750 <_ZN4mbed6Serial6unlockEv>:

void Serial::unlock()
{
    _mutex.unlock();
}
 8002750:	4770      	bx	lr
	...

08002754 <_ZThn188_N4mbed6Serial6unlockEv>:
    virtual void unlock();
 8002754:	b408      	push	{r3}
 8002756:	4b02      	ldr	r3, [pc, #8]	; (8002760 <_ZThn188_N4mbed6Serial6unlockEv+0xc>)
 8002758:	469c      	mov	ip, r3
 800275a:	38bc      	subs	r0, #188	; 0xbc
 800275c:	bc08      	pop	{r3}
 800275e:	4760      	bx	ip
 8002760:	08002751 	.word	0x08002751

08002764 <_ZN4mbed6Serial5_getcEv>:
{
 8002764:	b510      	push	{r4, lr}
    return _base_getc();
 8002766:	f000 f9a4 	bl	8002ab2 <_ZN4mbed10SerialBase10_base_getcEv>
}
 800276a:	bd10      	pop	{r4, pc}

0800276c <_ZThn188_N4mbed6Serial5_getcEv>:
    virtual int _getc();
 800276c:	b408      	push	{r3}
 800276e:	4b02      	ldr	r3, [pc, #8]	; (8002778 <_ZThn188_N4mbed6Serial5_getcEv+0xc>)
 8002770:	469c      	mov	ip, r3
 8002772:	38bc      	subs	r0, #188	; 0xbc
 8002774:	bc08      	pop	{r3}
 8002776:	4760      	bx	ip
 8002778:	08002765 	.word	0x08002765

0800277c <_ZN4mbed6Serial5_putcEi>:
{
 800277c:	b510      	push	{r4, lr}
    return _base_putc(c);
 800277e:	f000 f99d 	bl	8002abc <_ZN4mbed10SerialBase10_base_putcEi>
}
 8002782:	bd10      	pop	{r4, pc}

08002784 <_ZThn188_N4mbed6Serial5_putcEi>:
    virtual int _putc(int c);
 8002784:	b408      	push	{r3}
 8002786:	4b02      	ldr	r3, [pc, #8]	; (8002790 <_ZThn188_N4mbed6Serial5_putcEi+0xc>)
 8002788:	469c      	mov	ip, r3
 800278a:	38bc      	subs	r0, #188	; 0xbc
 800278c:	bc08      	pop	{r3}
 800278e:	4760      	bx	ip
 8002790:	0800277d 	.word	0x0800277d

08002794 <_ZN4mbed6SerialC1E7PinNameS1_PKci>:
Serial::Serial(PinName tx, PinName rx, const char *name, int baud) : SerialBase(tx, rx, baud), Stream(name)
 8002794:	b570      	push	{r4, r5, r6, lr}
 8002796:	0004      	movs	r4, r0
 8002798:	001d      	movs	r5, r3
 800279a:	9b04      	ldr	r3, [sp, #16]
 800279c:	f000 f838 	bl	8002810 <_ZN4mbed10SerialBaseC1E7PinNameS1_i>
 80027a0:	0020      	movs	r0, r4
 80027a2:	30bc      	adds	r0, #188	; 0xbc
 80027a4:	0029      	movs	r1, r5
 80027a6:	f000 ff2b 	bl	8003600 <_ZN4mbed6StreamC1EPKc>
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <_ZN4mbed6SerialC1E7PinNameS1_PKci+0x30>)
 80027ac:	001a      	movs	r2, r3
 80027ae:	3208      	adds	r2, #8
 80027b0:	6022      	str	r2, [r4, #0]
 80027b2:	0019      	movs	r1, r3
 80027b4:	3128      	adds	r1, #40	; 0x28
 80027b6:	22bc      	movs	r2, #188	; 0xbc
 80027b8:	50a1      	str	r1, [r4, r2]
 80027ba:	3388      	adds	r3, #136	; 0x88
 80027bc:	3204      	adds	r2, #4
 80027be:	50a3      	str	r3, [r4, r2]
}
 80027c0:	0020      	movs	r0, r4
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	08008280 	.word	0x08008280

080027c8 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq>:
    core_util_critical_section_exit();
    unlock();
}

void SerialBase::_irq_handler(uint32_t id, SerialIrq irq_type)
{
 80027c8:	b510      	push	{r4, lr}
        return _ops;
 80027ca:	000b      	movs	r3, r1
 80027cc:	330a      	adds	r3, #10
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	18c3      	adds	r3, r0, r3
 80027d2:	685b      	ldr	r3, [r3, #4]
    SerialBase *handler = (SerialBase *)id;
    if (handler->_irq[irq_type]) {
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d004      	beq.n	80027e2 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x1a>
        handler->_irq[irq_type]();
 80027d8:	0109      	lsls	r1, r1, #4
 80027da:	3198      	adds	r1, #152	; 0x98
 80027dc:	1840      	adds	r0, r0, r1
        return _ops->call(this);
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4798      	blx	r3
    }
}
 80027e2:	bd10      	pop	{r4, pc}

080027e4 <_ZN4mbed10SerialBase4lockEv>:
}

void SerialBase::lock()
{
    // Stub
}
 80027e4:	4770      	bx	lr

080027e6 <_ZN4mbed10SerialBase6unlockEv>:

void SerialBase:: unlock()
{
    // Stub
}
 80027e6:	4770      	bx	lr

080027e8 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E>:
        volatile uint32_t callback;
        volatile uint32_t trampoline;
    } __attribute__((__packed__)) CThunkTrampoline;
#endif

    static void trampoline(T *instance, void *context, CCallback *callback)
 80027e8:	b510      	push	{r4, lr}
    {
        if (instance && *callback) {
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d00b      	beq.n	8002806 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>
 80027ee:	6814      	ldr	r4, [r2, #0]
 80027f0:	2c00      	cmp	r4, #0
 80027f2:	d009      	beq.n	8002808 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x20>
            (static_cast<T *>(instance)->**callback)(context);
 80027f4:	6853      	ldr	r3, [r2, #4]
 80027f6:	07da      	lsls	r2, r3, #31
 80027f8:	d502      	bpl.n	8002800 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
 80027fa:	105a      	asrs	r2, r3, #1
 80027fc:	5882      	ldr	r2, [r0, r2]
 80027fe:	5914      	ldr	r4, [r2, r4]
 8002800:	105b      	asrs	r3, r3, #1
 8002802:	18c0      	adds	r0, r0, r3
 8002804:	47a0      	blx	r4
        }
    }
 8002806:	bd10      	pop	{r4, pc}
        if (instance && *callback) {
 8002808:	6853      	ldr	r3, [r2, #4]
 800280a:	07db      	lsls	r3, r3, #31
 800280c:	d4f2      	bmi.n	80027f4 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0xc>
 800280e:	e7fa      	b.n	8002806 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>

08002810 <_ZN4mbed10SerialBaseC1E7PinNameS1_i>:
SerialBase::SerialBase(PinName tx, PinName rx, int baud) :
 8002810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002812:	b08b      	sub	sp, #44	; 0x2c
 8002814:	0004      	movs	r4, r0
 8002816:	9100      	str	r1, [sp, #0]
 8002818:	9201      	str	r2, [sp, #4]
 800281a:	001e      	movs	r6, r3
    _serial(), _baud(baud)
 800281c:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x108>)
 800281e:	3308      	adds	r3, #8
 8002820:	6003      	str	r3, [r0, #0]
        init(instance, NULL, NULL);
 8002822:	2500      	movs	r5, #0
 8002824:	9508      	str	r5, [sp, #32]
 8002826:	9509      	str	r5, [sp, #36]	; 0x24
 8002828:	af02      	add	r7, sp, #8
 800282a:	2208      	movs	r2, #8
 800282c:	a908      	add	r1, sp, #32
 800282e:	0038      	movs	r0, r7
 8002830:	f005 f86c 	bl	800790c <memcpy>

    inline void init(T *instance, CCallback callback, void *context)
    {
        /* remember callback - need to add this level of redirection
           as pointer size for member functions differs between platforms */
        m_callback = callback;
 8002834:	0022      	movs	r2, r4
 8002836:	3208      	adds	r2, #8
 8002838:	cf0a      	ldmia	r7!, {r1, r3}
 800283a:	c20a      	stmia	r2!, {r1, r3}

        /* populate thunking trampoline */
        CTHUNK_ASSIGMENT;
 800283c:	4b37      	ldr	r3, [pc, #220]	; (800291c <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x10c>)
 800283e:	6123      	str	r3, [r4, #16]
 8002840:	4b37      	ldr	r3, [pc, #220]	; (8002920 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x110>)
 8002842:	6163      	str	r3, [r4, #20]
        m_thunk.context = (uint32_t)context;
 8002844:	61e5      	str	r5, [r4, #28]
        m_thunk.instance = (uint32_t)instance;
 8002846:	61a4      	str	r4, [r4, #24]
        m_thunk.callback = (uint32_t)&m_callback;
 8002848:	0023      	movs	r3, r4
 800284a:	3308      	adds	r3, #8
 800284c:	6223      	str	r3, [r4, #32]
        m_thunk.trampoline = (uint32_t)&trampoline;
 800284e:	4b35      	ldr	r3, [pc, #212]	; (8002924 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x114>)
 8002850:	6263      	str	r3, [r4, #36]	; 0x24
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002852:	f3bf 8f6f 	isb	sy
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	2328      	movs	r3, #40	; 0x28
 800285c:	54e5      	strb	r5, [r4, r3]
 800285e:	3301      	adds	r3, #1
 8002860:	54e5      	strb	r5, [r4, r3]
 8002862:	0020      	movs	r0, r4
 8002864:	302c      	adds	r0, #44	; 0x2c
            memset(this, 0, sizeof(Callback));
 8002866:	2210      	movs	r2, #16
 8002868:	2100      	movs	r1, #0
 800286a:	f005 f858 	bl	800791e <memset>
 800286e:	0020      	movs	r0, r4
 8002870:	303c      	adds	r0, #60	; 0x3c
 8002872:	2210      	movs	r2, #16
 8002874:	2100      	movs	r1, #0
 8002876:	f005 f852 	bl	800791e <memset>
 800287a:	0020      	movs	r0, r4
 800287c:	304c      	adds	r0, #76	; 0x4c
 800287e:	224c      	movs	r2, #76	; 0x4c
 8002880:	2100      	movs	r1, #0
 8002882:	f005 f84c 	bl	800791e <memset>
 8002886:	0027      	movs	r7, r4
 8002888:	3798      	adds	r7, #152	; 0x98
 800288a:	3501      	adds	r5, #1
 800288c:	2d00      	cmp	r5, #0
 800288e:	db07      	blt.n	80028a0 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x90>
            memset(this, 0, sizeof(Callback));
 8002890:	2210      	movs	r2, #16
 8002892:	2100      	movs	r1, #0
 8002894:	0038      	movs	r0, r7
 8002896:	f005 f842 	bl	800791e <memset>
 800289a:	3710      	adds	r7, #16
 800289c:	3d01      	subs	r5, #1
 800289e:	e7f5      	b.n	800288c <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x7c>
 80028a0:	23b8      	movs	r3, #184	; 0xb8
 80028a2:	50e6      	str	r6, [r4, r3]
    for (size_t i = 0; i < sizeof _irq / sizeof _irq[0]; i++) {
 80028a4:	2600      	movs	r6, #0
 80028a6:	e008      	b.n	80028ba <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0xaa>
        _ops = func._ops;
 80028a8:	9b07      	ldr	r3, [sp, #28]
 80028aa:	60eb      	str	r3, [r5, #12]
        if (_ops) {
 80028ac:	9b07      	ldr	r3, [sp, #28]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0xa8>
            _ops->dtor(this);
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	a804      	add	r0, sp, #16
 80028b6:	4798      	blx	r3
 80028b8:	3601      	adds	r6, #1
 80028ba:	2e01      	cmp	r6, #1
 80028bc:	d818      	bhi.n	80028f0 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0xe0>
        _irq[i] = NULL;
 80028be:	0135      	lsls	r5, r6, #4
 80028c0:	3598      	adds	r5, #152	; 0x98
 80028c2:	1965      	adds	r5, r4, r5
            memset(this, 0, sizeof(Callback));
 80028c4:	af04      	add	r7, sp, #16
 80028c6:	2210      	movs	r2, #16
 80028c8:	2100      	movs	r1, #0
 80028ca:	0038      	movs	r0, r7
 80028cc:	f005 f827 	bl	800791e <memset>
        if (this != &that) {
 80028d0:	42bd      	cmp	r5, r7
 80028d2:	d0eb      	beq.n	80028ac <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x9c>
        if (_ops) {
 80028d4:	68eb      	ldr	r3, [r5, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0xd0>
            _ops->dtor(this);
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	0028      	movs	r0, r5
 80028de:	4798      	blx	r3
        if (func._ops) {
 80028e0:	9b07      	ldr	r3, [sp, #28]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0e0      	beq.n	80028a8 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x98>
            func._ops->move(this, &func);
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	a904      	add	r1, sp, #16
 80028ea:	0028      	movs	r0, r5
 80028ec:	4798      	blx	r3
 80028ee:	e7db      	b.n	80028a8 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x98>
    serial_init(&_serial, tx, rx);
 80028f0:	0025      	movs	r5, r4
 80028f2:	354c      	adds	r5, #76	; 0x4c
 80028f4:	9a01      	ldr	r2, [sp, #4]
 80028f6:	9900      	ldr	r1, [sp, #0]
 80028f8:	0028      	movs	r0, r5
 80028fa:	f003 fda9 	bl	8006450 <serial_init>
    serial_baud(&_serial, _baud);
 80028fe:	23b8      	movs	r3, #184	; 0xb8
 8002900:	58e1      	ldr	r1, [r4, r3]
 8002902:	0028      	movs	r0, r5
 8002904:	f003 fd7e 	bl	8006404 <serial_baud>
    serial_irq_handler(&_serial, SerialBase::_irq_handler, (uint32_t)this);
 8002908:	0022      	movs	r2, r4
 800290a:	4907      	ldr	r1, [pc, #28]	; (8002928 <_ZN4mbed10SerialBaseC1E7PinNameS1_i+0x118>)
 800290c:	0028      	movs	r0, r5
 800290e:	f003 f8bf 	bl	8005a90 <serial_irq_handler>
}
 8002912:	0020      	movs	r0, r4
 8002914:	b00b      	add	sp, #44	; 0x2c
 8002916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002918:	08008310 	.word	0x08008310
 800291c:	c80fa001 	.word	0xc80fa001
 8002920:	00004718 	.word	0x00004718
 8002924:	080027e9 	.word	0x080027e9
 8002928:	080027c9 	.word	0x080027c9

0800292c <_ZN4mbed10SerialBase8readableEv>:
{
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	0004      	movs	r4, r0
    lock();
 8002930:	6803      	ldr	r3, [r0, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4798      	blx	r3
    int ret = serial_readable(&_serial);
 8002936:	0020      	movs	r0, r4
 8002938:	304c      	adds	r0, #76	; 0x4c
 800293a:	f003 fcfd 	bl	8006338 <serial_readable>
 800293e:	0005      	movs	r5, r0
    unlock();
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	0020      	movs	r0, r4
 8002946:	4798      	blx	r3
}
 8002948:	0028      	movs	r0, r5
 800294a:	bd70      	pop	{r4, r5, r6, pc}

0800294c <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE>:
{
 800294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294e:	b085      	sub	sp, #20
 8002950:	0004      	movs	r4, r0
 8002952:	000e      	movs	r6, r1
 8002954:	0017      	movs	r7, r2
    lock();
 8002956:	6803      	ldr	r3, [r0, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4798      	blx	r3
    core_util_critical_section_enter();
 800295c:	f000 fef6 	bl	800374c <core_util_critical_section_enter>
    if (func) {
 8002960:	68f3      	ldr	r3, [r6, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d02b      	beq.n	80029be <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x72>
        return _ops;
 8002966:	003b      	movs	r3, r7
 8002968:	330a      	adds	r3, #10
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	18e3      	adds	r3, r4, r3
 800296e:	685b      	ldr	r3, [r3, #4]
        if (!_irq[type]) {
 8002970:	2b00      	cmp	r3, #0
 8002972:	d021      	beq.n	80029b8 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x6c>
        _irq[type] = func;
 8002974:	013d      	lsls	r5, r7, #4
 8002976:	3598      	adds	r5, #152	; 0x98
 8002978:	1965      	adds	r5, r4, r5
        if (this != &that) {
 800297a:	42ae      	cmp	r6, r5
 800297c:	d00e      	beq.n	800299c <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x50>
        if (_ops) {
 800297e:	68eb      	ldr	r3, [r5, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x3e>
            _ops->dtor(this);
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0028      	movs	r0, r5
 8002988:	4798      	blx	r3
        if (func._ops) {
 800298a:	68f3      	ldr	r3, [r6, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x4c>
            func._ops->move(this, &func);
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	0031      	movs	r1, r6
 8002994:	0028      	movs	r0, r5
 8002996:	4798      	blx	r3
        _ops = func._ops;
 8002998:	68f3      	ldr	r3, [r6, #12]
 800299a:	60eb      	str	r3, [r5, #12]
        serial_irq_set(&_serial, (SerialIrq)type, 1);
 800299c:	0020      	movs	r0, r4
 800299e:	304c      	adds	r0, #76	; 0x4c
 80029a0:	2201      	movs	r2, #1
 80029a2:	0039      	movs	r1, r7
 80029a4:	f003 f880 	bl	8005aa8 <serial_irq_set>
    core_util_critical_section_exit();
 80029a8:	f000 feda 	bl	8003760 <core_util_critical_section_exit>
    unlock();
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	0020      	movs	r0, r4
 80029b2:	4798      	blx	r3
}
 80029b4:	b005      	add	sp, #20
 80029b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            sleep_manager_lock_deep_sleep();
 80029b8:	f000 fa00 	bl	8002dbc <sleep_manager_lock_deep_sleep_internal>
 80029bc:	e7da      	b.n	8002974 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x28>
        return _ops;
 80029be:	003b      	movs	r3, r7
 80029c0:	330a      	adds	r3, #10
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	18e3      	adds	r3, r4, r3
 80029c6:	685b      	ldr	r3, [r3, #4]
        if (_irq[type]) {
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x84>
            sleep_manager_unlock_deep_sleep();
 80029cc:	f000 fa18 	bl	8002e00 <sleep_manager_unlock_deep_sleep_internal>
        _irq[type] = NULL;
 80029d0:	013d      	lsls	r5, r7, #4
 80029d2:	3598      	adds	r5, #152	; 0x98
 80029d4:	1965      	adds	r5, r4, r5
            memset(this, 0, sizeof(Callback));
 80029d6:	466e      	mov	r6, sp
 80029d8:	2210      	movs	r2, #16
 80029da:	2100      	movs	r1, #0
 80029dc:	4668      	mov	r0, sp
 80029de:	f004 ff9e 	bl	800791e <memset>
        if (this != &that) {
 80029e2:	42b5      	cmp	r5, r6
 80029e4:	d00e      	beq.n	8002a04 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0xb8>
        if (_ops) {
 80029e6:	68eb      	ldr	r3, [r5, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0xa6>
            _ops->dtor(this);
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0028      	movs	r0, r5
 80029f0:	4798      	blx	r3
        if (func._ops) {
 80029f2:	9b03      	ldr	r3, [sp, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0xb4>
            func._ops->move(this, &func);
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	4669      	mov	r1, sp
 80029fc:	0028      	movs	r0, r5
 80029fe:	4798      	blx	r3
        _ops = func._ops;
 8002a00:	9b03      	ldr	r3, [sp, #12]
 8002a02:	60eb      	str	r3, [r5, #12]
        if (_ops) {
 8002a04:	9b03      	ldr	r3, [sp, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0xc4>
            _ops->dtor(this);
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4668      	mov	r0, sp
 8002a0e:	4798      	blx	r3
        serial_irq_set(&_serial, (SerialIrq)type, 0);
 8002a10:	0020      	movs	r0, r4
 8002a12:	304c      	adds	r0, #76	; 0x4c
 8002a14:	2200      	movs	r2, #0
 8002a16:	0039      	movs	r1, r7
 8002a18:	f003 f846 	bl	8005aa8 <serial_irq_set>
 8002a1c:	e7c4      	b.n	80029a8 <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE+0x5c>
	...

08002a20 <_ZN4mbed10SerialBaseD1Ev>:

SerialBase::~SerialBase()
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	0006      	movs	r6, r0
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <_ZN4mbed10SerialBaseD1Ev+0x7c>)
 8002a28:	3308      	adds	r3, #8
 8002a2a:	6003      	str	r3, [r0, #0]
{
    // No lock needed in destructor

    // Detaching interrupts releases the sleep lock if it was locked
    for (int irq = 0; irq < IrqCnt; irq++) {
 8002a2c:	2400      	movs	r4, #0
 8002a2e:	e000      	b.n	8002a32 <_ZN4mbed10SerialBaseD1Ev+0x12>
 8002a30:	3401      	adds	r4, #1
 8002a32:	2c01      	cmp	r4, #1
 8002a34:	dc10      	bgt.n	8002a58 <_ZN4mbed10SerialBaseD1Ev+0x38>
            memset(this, 0, sizeof(Callback));
 8002a36:	2210      	movs	r2, #16
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4668      	mov	r0, sp
 8002a3c:	f004 ff6f 	bl	800791e <memset>
        attach(NULL, (IrqType)irq);
 8002a40:	b2e2      	uxtb	r2, r4
 8002a42:	4669      	mov	r1, sp
 8002a44:	0030      	movs	r0, r6
 8002a46:	f7ff ff81 	bl	800294c <_ZN4mbed10SerialBase6attachENS_8CallbackIFvvEEENS0_7IrqTypeE>
        if (_ops) {
 8002a4a:	9b03      	ldr	r3, [sp, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ef      	beq.n	8002a30 <_ZN4mbed10SerialBaseD1Ev+0x10>
            _ops->dtor(this);
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4668      	mov	r0, sp
 8002a54:	4798      	blx	r3
 8002a56:	e7eb      	b.n	8002a30 <_ZN4mbed10SerialBaseD1Ev+0x10>
SerialBase::~SerialBase()
 8002a58:	0035      	movs	r5, r6
 8002a5a:	3598      	adds	r5, #152	; 0x98
 8002a5c:	2d00      	cmp	r5, #0
 8002a5e:	d00b      	beq.n	8002a78 <_ZN4mbed10SerialBaseD1Ev+0x58>
 8002a60:	0034      	movs	r4, r6
 8002a62:	34b8      	adds	r4, #184	; 0xb8
 8002a64:	42ac      	cmp	r4, r5
 8002a66:	d007      	beq.n	8002a78 <_ZN4mbed10SerialBaseD1Ev+0x58>
 8002a68:	3c10      	subs	r4, #16
        if (_ops) {
 8002a6a:	68e3      	ldr	r3, [r4, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f9      	beq.n	8002a64 <_ZN4mbed10SerialBaseD1Ev+0x44>
            _ops->dtor(this);
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	0020      	movs	r0, r4
 8002a74:	4798      	blx	r3
 8002a76:	e7f5      	b.n	8002a64 <_ZN4mbed10SerialBaseD1Ev+0x44>
 8002a78:	0030      	movs	r0, r6
 8002a7a:	303c      	adds	r0, #60	; 0x3c
        if (_ops) {
 8002a7c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <_ZN4mbed10SerialBaseD1Ev+0x66>
            _ops->dtor(this);
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4798      	blx	r3
 8002a86:	0030      	movs	r0, r6
 8002a88:	302c      	adds	r0, #44	; 0x2c
        if (_ops) {
 8002a8a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <_ZN4mbed10SerialBaseD1Ev+0x74>
            _ops->dtor(this);
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	4798      	blx	r3
    }
}
 8002a94:	0030      	movs	r0, r6
 8002a96:	b004      	add	sp, #16
 8002a98:	bd70      	pop	{r4, r5, r6, pc}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	08008310 	.word	0x08008310

08002aa0 <_ZN4mbed10SerialBaseD0Ev>:
SerialBase::~SerialBase()
 8002aa0:	b510      	push	{r4, lr}
 8002aa2:	0004      	movs	r4, r0
}
 8002aa4:	f7ff ffbc 	bl	8002a20 <_ZN4mbed10SerialBaseD1Ev>
 8002aa8:	0020      	movs	r0, r4
 8002aaa:	f001 faf7 	bl	800409c <_ZdlPv>
 8002aae:	0020      	movs	r0, r4
 8002ab0:	bd10      	pop	{r4, pc}

08002ab2 <_ZN4mbed10SerialBase10_base_getcEv>:
{
 8002ab2:	b510      	push	{r4, lr}
    return serial_getc(&_serial);
 8002ab4:	304c      	adds	r0, #76	; 0x4c
 8002ab6:	f003 f87d 	bl	8005bb4 <serial_getc>
}
 8002aba:	bd10      	pop	{r4, pc}

08002abc <_ZN4mbed10SerialBase10_base_putcEi>:
{
 8002abc:	b510      	push	{r4, lr}
 8002abe:	000c      	movs	r4, r1
    serial_putc(&_serial, c);
 8002ac0:	304c      	adds	r0, #76	; 0x4c
 8002ac2:	f003 f88b 	bl	8005bdc <serial_putc>
}
 8002ac6:	0020      	movs	r0, r4
 8002ac8:	bd10      	pop	{r4, pc}

08002aca <_ZN4mbed6Ticker7handlerEv>:
    insert_absolute(_delay + ticker_read_us(_ticker_data));
    core_util_critical_section_exit();
}

void Ticker::handler()
{
 8002aca:	b510      	push	{r4, lr}
 8002acc:	0004      	movs	r4, r0
    insert_absolute(event.timestamp + _delay);
 8002ace:	6882      	ldr	r2, [r0, #8]
 8002ad0:	68c3      	ldr	r3, [r0, #12]
 8002ad2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002ad4:	6a00      	ldr	r0, [r0, #32]
 8002ad6:	1812      	adds	r2, r2, r0
 8002ad8:	414b      	adcs	r3, r1
 8002ada:	0020      	movs	r0, r4
 8002adc:	f000 f874 	bl	8002bc8 <_ZN4mbed10TimerEvent15insert_absoluteEy>
        return _ops;
 8002ae0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (_function) {
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <_ZN4mbed6Ticker7handlerEv+0x24>
        _function();
 8002ae6:	0020      	movs	r0, r4
 8002ae8:	3028      	adds	r0, #40	; 0x28
        return _ops->call(this);
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4798      	blx	r3
    }
}
 8002aee:	bd10      	pop	{r4, pc}

08002af0 <_ZN4mbed6Ticker6detachEv>:
{
 8002af0:	b530      	push	{r4, r5, lr}
 8002af2:	b085      	sub	sp, #20
 8002af4:	0004      	movs	r4, r0
    core_util_critical_section_enter();
 8002af6:	f000 fe29 	bl	800374c <core_util_critical_section_enter>
    remove();
 8002afa:	0020      	movs	r0, r4
 8002afc:	f000 f86f 	bl	8002bde <_ZN4mbed10TimerEvent6removeEv>
    if (_function && _lock_deepsleep) {
 8002b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d025      	beq.n	8002b52 <_ZN4mbed6Ticker6detachEv+0x62>
 8002b06:	2338      	movs	r3, #56	; 0x38
 8002b08:	5ce3      	ldrb	r3, [r4, r3]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d123      	bne.n	8002b56 <_ZN4mbed6Ticker6detachEv+0x66>
    _function = 0;
 8002b0e:	3428      	adds	r4, #40	; 0x28
            memset(this, 0, sizeof(Callback));
 8002b10:	466d      	mov	r5, sp
 8002b12:	2210      	movs	r2, #16
 8002b14:	2100      	movs	r1, #0
 8002b16:	4668      	mov	r0, sp
 8002b18:	f004 ff01 	bl	800791e <memset>
        if (this != &that) {
 8002b1c:	42ac      	cmp	r4, r5
 8002b1e:	d00e      	beq.n	8002b3e <_ZN4mbed6Ticker6detachEv+0x4e>
        if (_ops) {
 8002b20:	68e3      	ldr	r3, [r4, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <_ZN4mbed6Ticker6detachEv+0x3c>
            _ops->dtor(this);
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	0020      	movs	r0, r4
 8002b2a:	4798      	blx	r3
        if (func._ops) {
 8002b2c:	9b03      	ldr	r3, [sp, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <_ZN4mbed6Ticker6detachEv+0x4a>
            func._ops->move(this, &func);
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4669      	mov	r1, sp
 8002b36:	0020      	movs	r0, r4
 8002b38:	4798      	blx	r3
        _ops = func._ops;
 8002b3a:	9b03      	ldr	r3, [sp, #12]
 8002b3c:	60e3      	str	r3, [r4, #12]
        if (_ops) {
 8002b3e:	9b03      	ldr	r3, [sp, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <_ZN4mbed6Ticker6detachEv+0x5a>
            _ops->dtor(this);
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4668      	mov	r0, sp
 8002b48:	4798      	blx	r3
    core_util_critical_section_exit();
 8002b4a:	f000 fe09 	bl	8003760 <core_util_critical_section_exit>
}
 8002b4e:	b005      	add	sp, #20
 8002b50:	bd30      	pop	{r4, r5, pc}
    if (_function && _lock_deepsleep) {
 8002b52:	2300      	movs	r3, #0
 8002b54:	e7d9      	b.n	8002b0a <_ZN4mbed6Ticker6detachEv+0x1a>
        sleep_manager_unlock_deep_sleep();
 8002b56:	f000 f953 	bl	8002e00 <sleep_manager_unlock_deep_sleep_internal>
 8002b5a:	e7d8      	b.n	8002b0e <_ZN4mbed6Ticker6detachEv+0x1e>

08002b5c <_ZN4mbed6Ticker5setupEy>:
{
 8002b5c:	b5d0      	push	{r4, r6, r7, lr}
 8002b5e:	0004      	movs	r4, r0
 8002b60:	0016      	movs	r6, r2
 8002b62:	001f      	movs	r7, r3
    core_util_critical_section_enter();
 8002b64:	f000 fdf2 	bl	800374c <core_util_critical_section_enter>
    remove();
 8002b68:	0020      	movs	r0, r4
 8002b6a:	f000 f838 	bl	8002bde <_ZN4mbed10TimerEvent6removeEv>
    _delay = t;
 8002b6e:	6226      	str	r6, [r4, #32]
 8002b70:	6267      	str	r7, [r4, #36]	; 0x24
    insert_absolute(_delay + ticker_read_us(_ticker_data));
 8002b72:	69a0      	ldr	r0, [r4, #24]
 8002b74:	f000 fbbb 	bl	80032ee <ticker_read_us>
 8002b78:	0032      	movs	r2, r6
 8002b7a:	003b      	movs	r3, r7
 8002b7c:	1812      	adds	r2, r2, r0
 8002b7e:	414b      	adcs	r3, r1
 8002b80:	0020      	movs	r0, r4
 8002b82:	f000 f821 	bl	8002bc8 <_ZN4mbed10TimerEvent15insert_absoluteEy>
    core_util_critical_section_exit();
 8002b86:	f000 fdeb 	bl	8003760 <core_util_critical_section_exit>
}
 8002b8a:	bdd0      	pop	{r4, r6, r7, pc}

08002b8c <_ZN4mbed10TimerEvent3irqEm>:
{
    ticker_set_handler(_ticker_data, (&TimerEvent::irq));
}

void TimerEvent::irq(uint32_t id)
{
 8002b8c:	b510      	push	{r4, lr}
    TimerEvent *timer_event = (TimerEvent *)id;
    timer_event->handler();
 8002b8e:	6803      	ldr	r3, [r0, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	4798      	blx	r3
}
 8002b94:	bd10      	pop	{r4, pc}
	...

08002b98 <_ZN4mbed10TimerEventC1Ev>:
TimerEvent::TimerEvent() : event(), _ticker_data(get_us_ticker_data())
 8002b98:	b510      	push	{r4, lr}
 8002b9a:	0004      	movs	r4, r0
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <_ZN4mbed10TimerEventC1Ev+0x28>)
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	6003      	str	r3, [r0, #0]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	6082      	str	r2, [r0, #8]
 8002ba8:	60c3      	str	r3, [r0, #12]
 8002baa:	2300      	movs	r3, #0
 8002bac:	6103      	str	r3, [r0, #16]
 8002bae:	6143      	str	r3, [r0, #20]
 8002bb0:	f000 fbb0 	bl	8003314 <get_us_ticker_data>
 8002bb4:	61a0      	str	r0, [r4, #24]
    ticker_set_handler(_ticker_data, (&TimerEvent::irq));
 8002bb6:	4903      	ldr	r1, [pc, #12]	; (8002bc4 <_ZN4mbed10TimerEventC1Ev+0x2c>)
 8002bb8:	f000 fb16 	bl	80031e8 <ticker_set_handler>
}
 8002bbc:	0020      	movs	r0, r4
 8002bbe:	bd10      	pop	{r4, pc}
 8002bc0:	0800833c 	.word	0x0800833c
 8002bc4:	08002b8d 	.word	0x08002b8d

08002bc8 <_ZN4mbed10TimerEvent15insert_absoluteEy>:
{
    ticker_insert_event(_ticker_data, &event, timestamp, (uint32_t)this);
}

void TimerEvent::insert_absolute(us_timestamp_t timestamp)
{
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	b082      	sub	sp, #8
    ticker_insert_event_us(_ticker_data, &event, timestamp, (uint32_t)this);
 8002bcc:	6984      	ldr	r4, [r0, #24]
 8002bce:	0001      	movs	r1, r0
 8002bd0:	3108      	adds	r1, #8
 8002bd2:	9000      	str	r0, [sp, #0]
 8002bd4:	0020      	movs	r0, r4
 8002bd6:	f000 fb45 	bl	8003264 <ticker_insert_event_us>
}
 8002bda:	b002      	add	sp, #8
 8002bdc:	bd10      	pop	{r4, pc}

08002bde <_ZN4mbed10TimerEvent6removeEv>:

void TimerEvent::remove()
{
 8002bde:	b510      	push	{r4, lr}
 8002be0:	0001      	movs	r1, r0
    ticker_remove_event(_ticker_data, &event);
 8002be2:	6980      	ldr	r0, [r0, #24]
 8002be4:	3108      	adds	r1, #8
 8002be6:	f000 fb67 	bl	80032b8 <ticker_remove_event>
}
 8002bea:	bd10      	pop	{r4, pc}

08002bec <_ZN4mbed10TimerEventD1Ev>:
TimerEvent::~TimerEvent()
 8002bec:	b510      	push	{r4, lr}
 8002bee:	0004      	movs	r4, r0
 8002bf0:	4b03      	ldr	r3, [pc, #12]	; (8002c00 <_ZN4mbed10TimerEventD1Ev+0x14>)
 8002bf2:	3308      	adds	r3, #8
 8002bf4:	6003      	str	r3, [r0, #0]
    remove();
 8002bf6:	f7ff fff2 	bl	8002bde <_ZN4mbed10TimerEvent6removeEv>
}
 8002bfa:	0020      	movs	r0, r4
 8002bfc:	bd10      	pop	{r4, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	0800833c 	.word	0x0800833c

08002c04 <_ZN4mbed10FileHandle4tellEv>:
    virtual off_t tell()
 8002c04:	b510      	push	{r4, lr}
        return seek(0, SEEK_CUR);
 8002c06:	6803      	ldr	r3, [r0, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4798      	blx	r3
    }
 8002c10:	bd10      	pop	{r4, pc}

08002c12 <_ZN4mbed10FileHandle6rewindEv>:
    virtual void rewind()
 8002c12:	b510      	push	{r4, lr}
        seek(0, SEEK_SET);
 8002c14:	6803      	ldr	r3, [r0, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4798      	blx	r3
    }
 8002c1e:	bd10      	pop	{r4, pc}

08002c20 <are_interrupts_enabled>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c20:	f3ef 8310 	mrs	r3, PRIMASK
static bool are_interrupts_enabled(void)
{
#if defined(__CORTEX_A9)
    return ((__get_CPSR() & 0x80) == 0);
#else
    return ((__get_PRIMASK() & 0x1) == 0);
 8002c24:	2001      	movs	r0, #1
 8002c26:	4018      	ands	r0, r3
 8002c28:	4243      	negs	r3, r0
 8002c2a:	4158      	adcs	r0, r3
 8002c2c:	b2c0      	uxtb	r0, r0
#endif
}
 8002c2e:	4770      	bx	lr

08002c30 <hal_critical_section_enter>:


MBED_WEAK void hal_critical_section_enter(void)
{
 8002c30:	b510      	push	{r4, lr}
    const bool interrupt_state = are_interrupts_enabled();
 8002c32:	f7ff fff5 	bl	8002c20 <are_interrupts_enabled>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c36:	b672      	cpsid	i

    __disable_irq();

    if (state_saved == true) {
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <hal_critical_section_enter+0x1c>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d104      	bne.n	8002c4a <hal_critical_section_enter+0x1a>
        return;
    }

    critical_interrupts_enabled = interrupt_state;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <hal_critical_section_enter+0x20>)
 8002c42:	7018      	strb	r0, [r3, #0]
    state_saved = true;
 8002c44:	2201      	movs	r2, #1
 8002c46:	4b01      	ldr	r3, [pc, #4]	; (8002c4c <hal_critical_section_enter+0x1c>)
 8002c48:	701a      	strb	r2, [r3, #0]
}
 8002c4a:	bd10      	pop	{r4, pc}
 8002c4c:	2000094d 	.word	0x2000094d
 8002c50:	2000094c 	.word	0x2000094c

08002c54 <hal_critical_section_exit>:
{
#ifndef FEATURE_UVISOR
    // Interrupts must be disabled on invoking an exit from a critical section
    MBED_ASSERT(!are_interrupts_enabled());
#endif
    state_saved = false;
 8002c54:	2200      	movs	r2, #0
 8002c56:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <hal_critical_section_exit+0x14>)
 8002c58:	701a      	strb	r2, [r3, #0]

    // Restore the IRQs to their state prior to entering the critical section
    if (critical_interrupts_enabled == true) {
 8002c5a:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <hal_critical_section_exit+0x18>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d000      	beq.n	8002c64 <hal_critical_section_exit+0x10>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c62:	b662      	cpsie	i
        __enable_irq();
    }
}
 8002c64:	4770      	bx	lr
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	2000094d 	.word	0x2000094d
 8002c6c:	2000094c 	.word	0x2000094c

08002c70 <gpio_init_out_ex>:
{
    gpio_init_out_ex(gpio, pin, 0);
}

void gpio_init_out_ex(gpio_t *gpio, PinName pin, int value)
{
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	0004      	movs	r4, r0
 8002c74:	000d      	movs	r5, r1
 8002c76:	0016      	movs	r6, r2
    gpio_init(gpio, pin);
 8002c78:	f003 f834 	bl	8005ce4 <gpio_init>
    if (pin != NC) {
 8002c7c:	1c6b      	adds	r3, r5, #1
 8002c7e:	d00c      	beq.n	8002c9a <gpio_init_out_ex+0x2a>
    uint32_t ll_pin;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    if (value) {
 8002c80:	2e00      	cmp	r6, #0
 8002c82:	d00b      	beq.n	8002c9c <gpio_init_out_ex+0x2c>
        *obj->reg_set = obj->mask;
 8002c84:	68a3      	ldr	r3, [r4, #8]
 8002c86:	6822      	ldr	r2, [r4, #0]
 8002c88:	601a      	str	r2, [r3, #0]
        gpio_dir(gpio, PIN_OUTPUT);
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	0020      	movs	r0, r4
 8002c8e:	f003 f851 	bl	8005d34 <gpio_dir>
        gpio_mode(gpio, mode);
 8002c92:	2100      	movs	r1, #0
 8002c94:	0020      	movs	r0, r4
 8002c96:	f003 f847 	bl	8005d28 <gpio_mode>
    _gpio_init_out(gpio, pin, PullNone, value);
}
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
    } else {
#ifdef GPIO_IP_WITHOUT_BRR
        *obj->reg_clr = obj->mask << 16;
#else
        *obj->reg_clr = obj->mask;
 8002c9c:	68e3      	ldr	r3, [r4, #12]
 8002c9e:	6822      	ldr	r2, [r4, #0]
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e7f2      	b.n	8002c8a <gpio_init_out_ex+0x1a>

08002ca4 <gpio_init_out>:
{
 8002ca4:	b510      	push	{r4, lr}
    gpio_init_out_ex(gpio, pin, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f7ff ffe2 	bl	8002c70 <gpio_init_out_ex>
}
 8002cac:	bd10      	pop	{r4, pc}
	...

08002cb0 <pinmap_pinout>:
 */
#include "hal/pinmap.h"
#include "platform/mbed_error.h"

void pinmap_pinout(PinName pin, const PinMap *map)
{
 8002cb0:	b510      	push	{r4, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	0004      	movs	r4, r0
    if (pin == NC) {
 8002cb6:	1c43      	adds	r3, r0, #1
 8002cb8:	d017      	beq.n	8002cea <pinmap_pinout+0x3a>
        return;
    }

    while (map->pin != NC) {
 8002cba:	2200      	movs	r2, #0
 8002cbc:	5e8b      	ldrsh	r3, [r1, r2]
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	d00c      	beq.n	8002cdc <pinmap_pinout+0x2c>
        if (map->pin == pin) {
 8002cc2:	429c      	cmp	r4, r3
 8002cc4:	d001      	beq.n	8002cca <pinmap_pinout+0x1a>
            pin_function(pin, map->function);

            pin_mode(pin, PullNone);
            return;
        }
        map++;
 8002cc6:	310c      	adds	r1, #12
 8002cc8:	e7f7      	b.n	8002cba <pinmap_pinout+0xa>
            pin_function(pin, map->function);
 8002cca:	6889      	ldr	r1, [r1, #8]
 8002ccc:	0020      	movs	r0, r4
 8002cce:	f003 f889 	bl	8005de4 <pin_function>
            pin_mode(pin, PullNone);
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	0020      	movs	r0, r4
 8002cd6:	f003 f90f 	bl	8005ef8 <pin_mode>
            return;
 8002cda:	e006      	b.n	8002cea <pinmap_pinout+0x3a>
    }
    MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "could not pinout", pin);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	0022      	movs	r2, r4
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <pinmap_pinout+0x40>)
 8002ce6:	f000 fdd1 	bl	800388c <mbed_error>
}
 8002cea:	b002      	add	sp, #8
 8002cec:	bd10      	pop	{r4, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	80010130 	.word	0x80010130

08002cf4 <pinmap_merge>:

uint32_t pinmap_merge(uint32_t a, uint32_t b)
{
 8002cf4:	b500      	push	{lr}
 8002cf6:	b083      	sub	sp, #12
    // both are the same (inc both NC)
    if (a == b) {
 8002cf8:	4288      	cmp	r0, r1
 8002cfa:	d00c      	beq.n	8002d16 <pinmap_merge+0x22>
        return a;
    }

    // one (or both) is not connected
    if (a == (uint32_t)NC) {
 8002cfc:	1c43      	adds	r3, r0, #1
 8002cfe:	d00c      	beq.n	8002d1a <pinmap_merge+0x26>
        return b;
    }
    if (b == (uint32_t)NC) {
 8002d00:	1c4b      	adds	r3, r1, #1
 8002d02:	d008      	beq.n	8002d16 <pinmap_merge+0x22>
        return a;
    }

    // mis-match error case
    MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "pinmap mis-match", a);
 8002d04:	2300      	movs	r3, #0
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	0002      	movs	r2, r0
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4804      	ldr	r0, [pc, #16]	; (8002d20 <pinmap_merge+0x2c>)
 8002d0e:	f000 fdbd 	bl	800388c <mbed_error>
    return (uint32_t)NC;
 8002d12:	2001      	movs	r0, #1
 8002d14:	4240      	negs	r0, r0
}
 8002d16:	b003      	add	sp, #12
 8002d18:	bd00      	pop	{pc}
        return b;
 8002d1a:	0008      	movs	r0, r1
 8002d1c:	e7fb      	b.n	8002d16 <pinmap_merge+0x22>
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	80010130 	.word	0x80010130

08002d24 <pinmap_find_peripheral>:

uint32_t pinmap_find_peripheral(PinName pin, const PinMap *map)
{
    while (map->pin != NC) {
 8002d24:	2200      	movs	r2, #0
 8002d26:	5e8b      	ldrsh	r3, [r1, r2]
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	d005      	beq.n	8002d38 <pinmap_find_peripheral+0x14>
        if (map->pin == pin) {
 8002d2c:	4283      	cmp	r3, r0
 8002d2e:	d001      	beq.n	8002d34 <pinmap_find_peripheral+0x10>
            return map->peripheral;
        }
        map++;
 8002d30:	310c      	adds	r1, #12
 8002d32:	e7f7      	b.n	8002d24 <pinmap_find_peripheral>
            return map->peripheral;
 8002d34:	6848      	ldr	r0, [r1, #4]
 8002d36:	e001      	b.n	8002d3c <pinmap_find_peripheral+0x18>
    }
    return (uint32_t)NC;
 8002d38:	2001      	movs	r0, #1
 8002d3a:	4240      	negs	r0, r0
}
 8002d3c:	4770      	bx	lr
	...

08002d40 <pinmap_peripheral>:

uint32_t pinmap_peripheral(PinName pin, const PinMap *map)
{
 8002d40:	b510      	push	{r4, lr}
 8002d42:	b082      	sub	sp, #8
    uint32_t peripheral = (uint32_t)NC;

    if (pin == (PinName)NC) {
 8002d44:	1c43      	adds	r3, r0, #1
 8002d46:	d104      	bne.n	8002d52 <pinmap_peripheral+0x12>
        return (uint32_t)NC;
 8002d48:	2401      	movs	r4, #1
 8002d4a:	4264      	negs	r4, r4
    peripheral = pinmap_find_peripheral(pin, map);
    if ((uint32_t)NC == peripheral) { // no mapping available
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "pinmap not found for peripheral", peripheral);
    }
    return peripheral;
}
 8002d4c:	0020      	movs	r0, r4
 8002d4e:	b002      	add	sp, #8
 8002d50:	bd10      	pop	{r4, pc}
    peripheral = pinmap_find_peripheral(pin, map);
 8002d52:	f7ff ffe7 	bl	8002d24 <pinmap_find_peripheral>
 8002d56:	0004      	movs	r4, r0
    if ((uint32_t)NC == peripheral) { // no mapping available
 8002d58:	1c43      	adds	r3, r0, #1
 8002d5a:	d1f7      	bne.n	8002d4c <pinmap_peripheral+0xc>
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "pinmap not found for peripheral", peripheral);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	0002      	movs	r2, r0
 8002d62:	2100      	movs	r1, #0
 8002d64:	4801      	ldr	r0, [pc, #4]	; (8002d6c <pinmap_peripheral+0x2c>)
 8002d66:	f000 fd91 	bl	800388c <mbed_error>
 8002d6a:	e7ef      	b.n	8002d4c <pinmap_peripheral+0xc>
 8002d6c:	80010130 	.word	0x80010130

08002d70 <pinmap_find_function>:

uint32_t pinmap_find_function(PinName pin, const PinMap *map)
{
    while (map->pin != NC) {
 8002d70:	2200      	movs	r2, #0
 8002d72:	5e8b      	ldrsh	r3, [r1, r2]
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	d005      	beq.n	8002d84 <pinmap_find_function+0x14>
        if (map->pin == pin) {
 8002d78:	4283      	cmp	r3, r0
 8002d7a:	d001      	beq.n	8002d80 <pinmap_find_function+0x10>
            return map->function;
        }
        map++;
 8002d7c:	310c      	adds	r1, #12
 8002d7e:	e7f7      	b.n	8002d70 <pinmap_find_function>
            return map->function;
 8002d80:	6888      	ldr	r0, [r1, #8]
 8002d82:	e001      	b.n	8002d88 <pinmap_find_function+0x18>
    }
    return (uint32_t)NC;
 8002d84:	2001      	movs	r0, #1
 8002d86:	4240      	negs	r0, r0
}
 8002d88:	4770      	bx	lr
	...

08002d8c <pinmap_function>:

uint32_t pinmap_function(PinName pin, const PinMap *map)
{
 8002d8c:	b510      	push	{r4, lr}
 8002d8e:	b082      	sub	sp, #8
    uint32_t function = (uint32_t)NC;

    if (pin == (PinName)NC) {
 8002d90:	1c43      	adds	r3, r0, #1
 8002d92:	d104      	bne.n	8002d9e <pinmap_function+0x12>
        return (uint32_t)NC;
 8002d94:	2401      	movs	r4, #1
 8002d96:	4264      	negs	r4, r4
    function = pinmap_find_function(pin, map);
    if ((uint32_t)NC == function) { // no mapping available
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "pinmap not found for function", function);
    }
    return function;
}
 8002d98:	0020      	movs	r0, r4
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bd10      	pop	{r4, pc}
    function = pinmap_find_function(pin, map);
 8002d9e:	f7ff ffe7 	bl	8002d70 <pinmap_find_function>
 8002da2:	0004      	movs	r4, r0
    if ((uint32_t)NC == function) { // no mapping available
 8002da4:	1c43      	adds	r3, r0, #1
 8002da6:	d1f7      	bne.n	8002d98 <pinmap_function+0xc>
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_PINMAP_INVALID), "pinmap not found for function", function);
 8002da8:	2300      	movs	r3, #0
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	0002      	movs	r2, r0
 8002dae:	2100      	movs	r1, #0
 8002db0:	4801      	ldr	r0, [pc, #4]	; (8002db8 <pinmap_function+0x2c>)
 8002db2:	f000 fd6b 	bl	800388c <mbed_error>
 8002db6:	e7ef      	b.n	8002d98 <pinmap_function+0xc>
 8002db8:	80010130 	.word	0x80010130

08002dbc <sleep_manager_lock_deep_sleep_internal>:
}

#endif // MBED_SLEEP_TRACING_ENABLED

void sleep_manager_lock_deep_sleep_internal(void)
{
 8002dbc:	b500      	push	{lr}
 8002dbe:	b083      	sub	sp, #12
    core_util_critical_section_enter();
 8002dc0:	f000 fcc4 	bl	800374c <core_util_critical_section_enter>
    if (deep_sleep_lock == USHRT_MAX) {
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <sleep_manager_lock_deep_sleep_internal+0x38>)
 8002dc6:	881a      	ldrh	r2, [r3, #0]
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <sleep_manager_lock_deep_sleep_internal+0x3c>)
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d007      	beq.n	8002dde <sleep_manager_lock_deep_sleep_internal+0x22>
        core_util_critical_section_exit();
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_HAL, MBED_ERROR_CODE_OVERFLOW), "DeepSleepLock overflow (> USHRT_MAX)", deep_sleep_lock);
    }
    core_util_atomic_incr_u16(&deep_sleep_lock, 1);
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4808      	ldr	r0, [pc, #32]	; (8002df4 <sleep_manager_lock_deep_sleep_internal+0x38>)
 8002dd2:	f000 fcd7 	bl	8003784 <core_util_atomic_incr_u16>
    core_util_critical_section_exit();
 8002dd6:	f000 fcc3 	bl	8003760 <core_util_critical_section_exit>
}
 8002dda:	b003      	add	sp, #12
 8002ddc:	bd00      	pop	{pc}
        core_util_critical_section_exit();
 8002dde:	f000 fcbf 	bl	8003760 <core_util_critical_section_exit>
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_HAL, MBED_ERROR_CODE_OVERFLOW), "DeepSleepLock overflow (> USHRT_MAX)", deep_sleep_lock);
 8002de2:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <sleep_manager_lock_deep_sleep_internal+0x38>)
 8002de4:	881a      	ldrh	r2, [r3, #0]
 8002de6:	2300      	movs	r3, #0
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	2100      	movs	r1, #0
 8002dec:	4803      	ldr	r0, [pc, #12]	; (8002dfc <sleep_manager_lock_deep_sleep_internal+0x40>)
 8002dee:	f000 fd4d 	bl	800388c <mbed_error>
 8002df2:	e7ec      	b.n	8002dce <sleep_manager_lock_deep_sleep_internal+0x12>
 8002df4:	2000094e 	.word	0x2000094e
 8002df8:	0000ffff 	.word	0x0000ffff
 8002dfc:	80040123 	.word	0x80040123

08002e00 <sleep_manager_unlock_deep_sleep_internal>:

void sleep_manager_unlock_deep_sleep_internal(void)
{
 8002e00:	b500      	push	{lr}
 8002e02:	b083      	sub	sp, #12
    core_util_critical_section_enter();
 8002e04:	f000 fca2 	bl	800374c <core_util_critical_section_enter>
    if (deep_sleep_lock == 0) {
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <sleep_manager_unlock_deep_sleep_internal+0x38>)
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <sleep_manager_unlock_deep_sleep_internal+0x20>
        core_util_critical_section_exit();
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_HAL, MBED_ERROR_CODE_UNDERFLOW), "DeepSleepLock underflow (< 0)", deep_sleep_lock);
    }
    core_util_atomic_decr_u16(&deep_sleep_lock, 1);
 8002e10:	2101      	movs	r1, #1
 8002e12:	4809      	ldr	r0, [pc, #36]	; (8002e38 <sleep_manager_unlock_deep_sleep_internal+0x38>)
 8002e14:	f000 fcc3 	bl	800379e <core_util_atomic_decr_u16>
    core_util_critical_section_exit();
 8002e18:	f000 fca2 	bl	8003760 <core_util_critical_section_exit>
}
 8002e1c:	b003      	add	sp, #12
 8002e1e:	bd00      	pop	{pc}
        core_util_critical_section_exit();
 8002e20:	f000 fc9e 	bl	8003760 <core_util_critical_section_exit>
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_HAL, MBED_ERROR_CODE_UNDERFLOW), "DeepSleepLock underflow (< 0)", deep_sleep_lock);
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <sleep_manager_unlock_deep_sleep_internal+0x38>)
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4803      	ldr	r0, [pc, #12]	; (8002e3c <sleep_manager_unlock_deep_sleep_internal+0x3c>)
 8002e30:	f000 fd2c 	bl	800388c <mbed_error>
 8002e34:	e7ec      	b.n	8002e10 <sleep_manager_unlock_deep_sleep_internal+0x10>
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	2000094e 	.word	0x2000094e
 8002e3c:	80040124 	.word	0x80040124

08002e40 <set_handler>:
/**
 * Set the event handler function of a ticker instance.
 */
static void set_handler(const ticker_data_t *const ticker, ticker_event_handler handler)
{
    ticker->queue->event_handler = handler;
 8002e40:	6843      	ldr	r3, [r0, #4]
 8002e42:	6019      	str	r1, [r3, #0]
}
 8002e44:	4770      	bx	lr
	...

08002e48 <update_present_time>:

/**
 * Update the present timestamp value of a ticker.
 */
static void update_present_time(const ticker_data_t *const ticker)
{
 8002e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4a:	46c6      	mov	lr, r8
 8002e4c:	b500      	push	{lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	0004      	movs	r4, r0
    ticker_event_queue_t *queue = ticker->queue;
 8002e52:	6846      	ldr	r6, [r0, #4]
    uint32_t ticker_time = ticker->interface->read();
 8002e54:	6803      	ldr	r3, [r0, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4798      	blx	r3
    if (ticker_time == ticker->queue->tick_last_read) {
 8002e5a:	6863      	ldr	r3, [r4, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4298      	cmp	r0, r3
 8002e60:	d050      	beq.n	8002f04 <update_present_time+0xbc>
        // No work to do
        return;
    }

    uint64_t elapsed_ticks = (ticker_time - queue->tick_last_read) & queue->bitmask;
 8002e62:	6a33      	ldr	r3, [r6, #32]
 8002e64:	1ac3      	subs	r3, r0, r3
 8002e66:	68f2      	ldr	r2, [r6, #12]
 8002e68:	401a      	ands	r2, r3
 8002e6a:	0014      	movs	r4, r2
 8002e6c:	2500      	movs	r5, #0
    queue->tick_last_read = ticker_time;
 8002e6e:	6230      	str	r0, [r6, #32]

    uint64_t elapsed_us;
    if (1000000 == queue->frequency) {
 8002e70:	68b3      	ldr	r3, [r6, #8]
 8002e72:	4698      	mov	r8, r3
 8002e74:	4b4a      	ldr	r3, [pc, #296]	; (8002fa0 <update_present_time+0x158>)
 8002e76:	4598      	cmp	r8, r3
 8002e78:	d03e      	beq.n	8002ef8 <update_present_time+0xb0>
        // Optimized for 1MHz

        elapsed_us = elapsed_ticks;
    } else if (0 != queue->frequency_shifts) {
 8002e7a:	233a      	movs	r3, #58	; 0x3a
 8002e7c:	5cf7      	ldrb	r7, [r6, r3]
 8002e7e:	2f00      	cmp	r7, #0
 8002e80:	d05b      	beq.n	8002f3a <update_present_time+0xf2>
        // Optimized for frequencies divisible by 2
        uint64_t us_x_ticks = elapsed_ticks * 1000000;
 8002e82:	4a47      	ldr	r2, [pc, #284]	; (8002fa0 <update_present_time+0x158>)
 8002e84:	2300      	movs	r3, #0
 8002e86:	0020      	movs	r0, r4
 8002e88:	0029      	movs	r1, r5
 8002e8a:	f7fd fb5d 	bl	8000548 <__aeabi_lmul>
 8002e8e:	9000      	str	r0, [sp, #0]
 8002e90:	9101      	str	r1, [sp, #4]
        elapsed_us = us_x_ticks >> queue->frequency_shifts;
 8002e92:	2320      	movs	r3, #32
 8002e94:	425b      	negs	r3, r3
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	d438      	bmi.n	8002f0c <update_present_time+0xc4>
 8002e9a:	000a      	movs	r2, r1
 8002e9c:	40da      	lsrs	r2, r3
 8002e9e:	0014      	movs	r4, r2
 8002ea0:	9b01      	ldr	r3, [sp, #4]
 8002ea2:	40fb      	lsrs	r3, r7
 8002ea4:	001d      	movs	r5, r3

        // Update remainder
        queue->tick_remainder += us_x_ticks - (elapsed_us << queue->frequency_shifts);
 8002ea6:	003b      	movs	r3, r7
 8002ea8:	3b20      	subs	r3, #32
 8002eaa:	469c      	mov	ip, r3
 8002eac:	d43a      	bmi.n	8002f24 <update_present_time+0xdc>
 8002eae:	0021      	movs	r1, r4
 8002eb0:	4660      	mov	r0, ip
 8002eb2:	4081      	lsls	r1, r0
 8002eb4:	000b      	movs	r3, r1
 8002eb6:	0021      	movs	r1, r4
 8002eb8:	40b9      	lsls	r1, r7
 8002eba:	000a      	movs	r2, r1
 8002ebc:	9800      	ldr	r0, [sp, #0]
 8002ebe:	9901      	ldr	r1, [sp, #4]
 8002ec0:	1a80      	subs	r0, r0, r2
 8002ec2:	4199      	sbcs	r1, r3
 8002ec4:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8002ec6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002ec8:	1880      	adds	r0, r0, r2
 8002eca:	4159      	adcs	r1, r3
 8002ecc:	9000      	str	r0, [sp, #0]
 8002ece:	9101      	str	r1, [sp, #4]
 8002ed0:	0002      	movs	r2, r0
 8002ed2:	000b      	movs	r3, r1
 8002ed4:	62b2      	str	r2, [r6, #40]	; 0x28
 8002ed6:	62f3      	str	r3, [r6, #44]	; 0x2c
        if (queue->tick_remainder >= queue->frequency) {
 8002ed8:	4642      	mov	r2, r8
 8002eda:	2300      	movs	r3, #0
 8002edc:	428b      	cmp	r3, r1
 8002ede:	d101      	bne.n	8002ee4 <update_present_time+0x9c>
 8002ee0:	4282      	cmp	r2, r0
 8002ee2:	d809      	bhi.n	8002ef8 <update_present_time+0xb0>
            elapsed_us += 1;
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	1824      	adds	r4, r4, r0
 8002eea:	414d      	adcs	r5, r1
            queue->tick_remainder -= queue->frequency;
 8002eec:	9800      	ldr	r0, [sp, #0]
 8002eee:	9901      	ldr	r1, [sp, #4]
 8002ef0:	1a80      	subs	r0, r0, r2
 8002ef2:	4199      	sbcs	r1, r3
 8002ef4:	62b0      	str	r0, [r6, #40]	; 0x28
 8002ef6:	62f1      	str	r1, [r6, #44]	; 0x2c
            queue->tick_remainder -= queue->frequency;
        }
    }

    // Update current time
    queue->present_time += elapsed_us;
 8002ef8:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8002efa:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002efc:	18a4      	adds	r4, r4, r2
 8002efe:	415d      	adcs	r5, r3
 8002f00:	6334      	str	r4, [r6, #48]	; 0x30
 8002f02:	6375      	str	r5, [r6, #52]	; 0x34
}
 8002f04:	b004      	add	sp, #16
 8002f06:	bc04      	pop	{r2}
 8002f08:	4690      	mov	r8, r2
 8002f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        elapsed_us = us_x_ticks >> queue->frequency_shifts;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	1bdb      	subs	r3, r3, r7
 8002f10:	9800      	ldr	r0, [sp, #0]
 8002f12:	9901      	ldr	r1, [sp, #4]
 8002f14:	000a      	movs	r2, r1
 8002f16:	409a      	lsls	r2, r3
 8002f18:	0013      	movs	r3, r2
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	40fa      	lsrs	r2, r7
 8002f1e:	0014      	movs	r4, r2
 8002f20:	431c      	orrs	r4, r3
 8002f22:	e7bd      	b.n	8002ea0 <update_present_time+0x58>
        queue->tick_remainder += us_x_ticks - (elapsed_us << queue->frequency_shifts);
 8002f24:	2320      	movs	r3, #32
 8002f26:	1bdb      	subs	r3, r3, r7
 8002f28:	0022      	movs	r2, r4
 8002f2a:	40da      	lsrs	r2, r3
 8002f2c:	4694      	mov	ip, r2
 8002f2e:	0029      	movs	r1, r5
 8002f30:	40b9      	lsls	r1, r7
 8002f32:	000b      	movs	r3, r1
 8002f34:	4661      	mov	r1, ip
 8002f36:	430b      	orrs	r3, r1
 8002f38:	e7bd      	b.n	8002eb6 <update_present_time+0x6e>
        uint64_t us_x_ticks = elapsed_ticks * 1000000;
 8002f3a:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <update_present_time+0x158>)
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	0020      	movs	r0, r4
 8002f40:	0029      	movs	r1, r5
 8002f42:	f7fd fb01 	bl	8000548 <__aeabi_lmul>
        elapsed_us = us_x_ticks / queue->frequency;
 8002f46:	4643      	mov	r3, r8
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	9a00      	ldr	r2, [sp, #0]
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	9002      	str	r0, [sp, #8]
 8002f54:	9103      	str	r1, [sp, #12]
 8002f56:	f7fd fad7 	bl	8000508 <__aeabi_uldivmod>
 8002f5a:	0004      	movs	r4, r0
 8002f5c:	000d      	movs	r5, r1
        queue->tick_remainder += us_x_ticks - elapsed_us * queue->frequency;
 8002f5e:	0002      	movs	r2, r0
 8002f60:	000b      	movs	r3, r1
 8002f62:	9800      	ldr	r0, [sp, #0]
 8002f64:	9901      	ldr	r1, [sp, #4]
 8002f66:	f7fd faef 	bl	8000548 <__aeabi_lmul>
 8002f6a:	9a02      	ldr	r2, [sp, #8]
 8002f6c:	9b03      	ldr	r3, [sp, #12]
 8002f6e:	1a12      	subs	r2, r2, r0
 8002f70:	418b      	sbcs	r3, r1
 8002f72:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8002f74:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002f76:	1812      	adds	r2, r2, r0
 8002f78:	414b      	adcs	r3, r1
 8002f7a:	62b2      	str	r2, [r6, #40]	; 0x28
 8002f7c:	62f3      	str	r3, [r6, #44]	; 0x2c
        if (queue->tick_remainder >= queue->frequency) {
 8002f7e:	9800      	ldr	r0, [sp, #0]
 8002f80:	9901      	ldr	r1, [sp, #4]
 8002f82:	4299      	cmp	r1, r3
 8002f84:	d101      	bne.n	8002f8a <update_present_time+0x142>
 8002f86:	4290      	cmp	r0, r2
 8002f88:	d8b6      	bhi.n	8002ef8 <update_present_time+0xb0>
            elapsed_us += 1;
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	1824      	adds	r4, r4, r0
 8002f90:	414d      	adcs	r5, r1
            queue->tick_remainder -= queue->frequency;
 8002f92:	9800      	ldr	r0, [sp, #0]
 8002f94:	9901      	ldr	r1, [sp, #4]
 8002f96:	1a12      	subs	r2, r2, r0
 8002f98:	418b      	sbcs	r3, r1
 8002f9a:	62b2      	str	r2, [r6, #40]	; 0x28
 8002f9c:	62f3      	str	r3, [r6, #44]	; 0x2c
 8002f9e:	e7ab      	b.n	8002ef8 <update_present_time+0xb0>
 8002fa0:	000f4240 	.word	0x000f4240

08002fa4 <compute_tick>:

/**
 * Given the absolute timestamp compute the hal tick timestamp.
 */
static timestamp_t compute_tick(const ticker_data_t *const ticker, us_timestamp_t timestamp)
{
 8002fa4:	b570      	push	{r4, r5, r6, lr}
    ticker_event_queue_t *queue = ticker->queue;
 8002fa6:	6844      	ldr	r4, [r0, #4]
    us_timestamp_t delta_us = timestamp - queue->present_time;
 8002fa8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fac:	1a12      	subs	r2, r2, r0
 8002fae:	418b      	sbcs	r3, r1
 8002fb0:	0010      	movs	r0, r2
 8002fb2:	0019      	movs	r1, r3

    timestamp_t delta = ticker->queue->max_delta;
 8002fb4:	6925      	ldr	r5, [r4, #16]
    if (delta_us <=  ticker->queue->max_delta_us) {
 8002fb6:	69a2      	ldr	r2, [r4, #24]
 8002fb8:	69e3      	ldr	r3, [r4, #28]
 8002fba:	4299      	cmp	r1, r3
 8002fbc:	d831      	bhi.n	8003022 <compute_tick+0x7e>
 8002fbe:	d017      	beq.n	8002ff0 <compute_tick+0x4c>
        // Checking max_delta_us ensures the operation will not overflow

        if (1000000 == queue->frequency) {
 8002fc0:	68a2      	ldr	r2, [r4, #8]
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <compute_tick+0x90>)
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d016      	beq.n	8002ff6 <compute_tick+0x52>

            delta = delta_us;
            if (delta > ticker->queue->max_delta) {
                delta = ticker->queue->max_delta;
            }
        } else if (0 != queue->frequency_shifts) {
 8002fc8:	233a      	movs	r3, #58	; 0x3a
 8002fca:	5ce3      	ldrb	r3, [r4, r3]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01f      	beq.n	8003010 <compute_tick+0x6c>
            // Optimized frequencies divisible by 2

            delta = (delta_us << ticker->queue->frequency_shifts) / 1000000;
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	4252      	negs	r2, r2
 8002fd4:	189a      	adds	r2, r3, r2
 8002fd6:	d412      	bmi.n	8002ffe <compute_tick+0x5a>
 8002fd8:	0006      	movs	r6, r0
 8002fda:	4096      	lsls	r6, r2
 8002fdc:	4098      	lsls	r0, r3
 8002fde:	4a15      	ldr	r2, [pc, #84]	; (8003034 <compute_tick+0x90>)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	0031      	movs	r1, r6
 8002fe4:	f7fd fa90 	bl	8000508 <__aeabi_uldivmod>
            if (delta > ticker->queue->max_delta) {
 8002fe8:	4285      	cmp	r5, r0
 8002fea:	d31a      	bcc.n	8003022 <compute_tick+0x7e>
            delta = (delta_us << ticker->queue->frequency_shifts) / 1000000;
 8002fec:	0005      	movs	r5, r0
 8002fee:	e018      	b.n	8003022 <compute_tick+0x7e>
    if (delta_us <=  ticker->queue->max_delta_us) {
 8002ff0:	4290      	cmp	r0, r2
 8002ff2:	d9e5      	bls.n	8002fc0 <compute_tick+0x1c>
 8002ff4:	e015      	b.n	8003022 <compute_tick+0x7e>
            if (delta > ticker->queue->max_delta) {
 8002ff6:	4285      	cmp	r5, r0
 8002ff8:	d313      	bcc.n	8003022 <compute_tick+0x7e>
            delta = delta_us;
 8002ffa:	0005      	movs	r5, r0
 8002ffc:	e011      	b.n	8003022 <compute_tick+0x7e>
            delta = (delta_us << ticker->queue->frequency_shifts) / 1000000;
 8002ffe:	2220      	movs	r2, #32
 8003000:	1ad2      	subs	r2, r2, r3
 8003002:	0006      	movs	r6, r0
 8003004:	40d6      	lsrs	r6, r2
 8003006:	0032      	movs	r2, r6
 8003008:	000e      	movs	r6, r1
 800300a:	409e      	lsls	r6, r3
 800300c:	4316      	orrs	r6, r2
 800300e:	e7e5      	b.n	8002fdc <compute_tick+0x38>
                delta = ticker->queue->max_delta;
            }
        } else {
            // General case

            delta = delta_us * queue->frequency / 1000000;
 8003010:	2300      	movs	r3, #0
 8003012:	f7fd fa99 	bl	8000548 <__aeabi_lmul>
 8003016:	4a07      	ldr	r2, [pc, #28]	; (8003034 <compute_tick+0x90>)
 8003018:	2300      	movs	r3, #0
 800301a:	f7fd fa75 	bl	8000508 <__aeabi_uldivmod>
            if (delta > ticker->queue->max_delta) {
 800301e:	4285      	cmp	r5, r0
 8003020:	d205      	bcs.n	800302e <compute_tick+0x8a>
                delta = ticker->queue->max_delta;
            }
        }
    }
    return (queue->tick_last_read + delta) & queue->bitmask;
 8003022:	6a23      	ldr	r3, [r4, #32]
 8003024:	469c      	mov	ip, r3
 8003026:	4465      	add	r5, ip
 8003028:	68e0      	ldr	r0, [r4, #12]
 800302a:	4028      	ands	r0, r5
}
 800302c:	bd70      	pop	{r4, r5, r6, pc}
            delta = delta_us * queue->frequency / 1000000;
 800302e:	0005      	movs	r5, r0
 8003030:	e7f7      	b.n	8003022 <compute_tick+0x7e>
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	000f4240 	.word	0x000f4240

08003038 <_ticker_match_interval_passed>:
/**
 * Return 1 if the tick has incremented to or past match_tick, otherwise 0.
 */
int _ticker_match_interval_passed(timestamp_t prev_tick, timestamp_t cur_tick, timestamp_t match_tick)
{
    if (match_tick > prev_tick) {
 8003038:	4282      	cmp	r2, r0
 800303a:	d905      	bls.n	8003048 <_ticker_match_interval_passed+0x10>
        return (cur_tick >= match_tick) || (cur_tick < prev_tick);
 800303c:	428a      	cmp	r2, r1
 800303e:	d909      	bls.n	8003054 <_ticker_match_interval_passed+0x1c>
 8003040:	4288      	cmp	r0, r1
 8003042:	d909      	bls.n	8003058 <_ticker_match_interval_passed+0x20>
 8003044:	2001      	movs	r0, #1
 8003046:	e00a      	b.n	800305e <_ticker_match_interval_passed+0x26>
    } else {
        return (cur_tick < prev_tick) && (cur_tick >= match_tick);
 8003048:	4288      	cmp	r0, r1
 800304a:	d907      	bls.n	800305c <_ticker_match_interval_passed+0x24>
 800304c:	428a      	cmp	r2, r1
 800304e:	d907      	bls.n	8003060 <_ticker_match_interval_passed+0x28>
 8003050:	2000      	movs	r0, #0
 8003052:	e004      	b.n	800305e <_ticker_match_interval_passed+0x26>
        return (cur_tick >= match_tick) || (cur_tick < prev_tick);
 8003054:	2001      	movs	r0, #1
 8003056:	e002      	b.n	800305e <_ticker_match_interval_passed+0x26>
 8003058:	2000      	movs	r0, #0
 800305a:	e000      	b.n	800305e <_ticker_match_interval_passed+0x26>
        return (cur_tick < prev_tick) && (cur_tick >= match_tick);
 800305c:	2000      	movs	r0, #0
    }
}
 800305e:	4770      	bx	lr
        return (cur_tick < prev_tick) && (cur_tick >= match_tick);
 8003060:	2001      	movs	r0, #1
 8003062:	e7fc      	b.n	800305e <_ticker_match_interval_passed+0x26>

08003064 <schedule_interrupt>:
 * @note If there is no event in the queue then the interrupt is scheduled to
 * in ticker.queue.max_delta. This is necessary to keep track
 * of the timer overflow.
 */
static void schedule_interrupt(const ticker_data_t *const ticker)
{
 8003064:	b570      	push	{r4, r5, r6, lr}
 8003066:	0004      	movs	r4, r0
    ticker_event_queue_t *queue = ticker->queue;
 8003068:	6845      	ldr	r5, [r0, #4]
    if (ticker->queue->dispatching) {
 800306a:	2339      	movs	r3, #57	; 0x39
 800306c:	5ceb      	ldrb	r3, [r5, r3]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d000      	beq.n	8003074 <schedule_interrupt+0x10>
    } else {
        uint32_t match_tick =
            (queue->tick_last_read + queue->max_delta) & queue->bitmask;
        ticker->interface->set_interrupt(match_tick);
    }
}
 8003072:	bd70      	pop	{r4, r5, r6, pc}
    update_present_time(ticker);
 8003074:	f7ff fee8 	bl	8002e48 <update_present_time>
    if (ticker->queue->head) {
 8003078:	6862      	ldr	r2, [r4, #4]
 800307a:	6853      	ldr	r3, [r2, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d029      	beq.n	80030d4 <schedule_interrupt+0x70>
        us_timestamp_t present = ticker->queue->present_time;
 8003080:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8003082:	6b51      	ldr	r1, [r2, #52]	; 0x34
        us_timestamp_t match_time = ticker->queue->head->timestamp;
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
        if (match_time <= present) {
 8003088:	428b      	cmp	r3, r1
 800308a:	d917      	bls.n	80030bc <schedule_interrupt+0x58>
        timestamp_t match_tick = compute_tick(ticker, match_time);
 800308c:	0020      	movs	r0, r4
 800308e:	f7ff ff89 	bl	8002fa4 <compute_tick>
 8003092:	0006      	movs	r6, r0
        if (match_tick == queue->tick_last_read) {
 8003094:	6a2b      	ldr	r3, [r5, #32]
 8003096:	4298      	cmp	r0, r3
 8003098:	d018      	beq.n	80030cc <schedule_interrupt+0x68>
        ticker->interface->set_interrupt(match_tick);
 800309a:	6823      	ldr	r3, [r4, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	4798      	blx	r3
        timestamp_t cur_tick = ticker->interface->read();
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4798      	blx	r3
 80030a6:	0001      	movs	r1, r0
        if (_ticker_match_interval_passed(queue->tick_last_read, cur_tick, match_tick)) {
 80030a8:	6a28      	ldr	r0, [r5, #32]
 80030aa:	0032      	movs	r2, r6
 80030ac:	f7ff ffc4 	bl	8003038 <_ticker_match_interval_passed>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d0de      	beq.n	8003072 <schedule_interrupt+0xe>
            ticker->interface->fire_interrupt();
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	4798      	blx	r3
 80030ba:	e7da      	b.n	8003072 <schedule_interrupt+0xe>
        if (match_time <= present) {
 80030bc:	428b      	cmp	r3, r1
 80030be:	d101      	bne.n	80030c4 <schedule_interrupt+0x60>
 80030c0:	4282      	cmp	r2, r0
 80030c2:	d8e3      	bhi.n	800308c <schedule_interrupt+0x28>
            ticker->interface->fire_interrupt();
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	4798      	blx	r3
            return;
 80030ca:	e7d2      	b.n	8003072 <schedule_interrupt+0xe>
            ticker->interface->fire_interrupt();
 80030cc:	6823      	ldr	r3, [r4, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	4798      	blx	r3
            return;
 80030d2:	e7ce      	b.n	8003072 <schedule_interrupt+0xe>
            (queue->tick_last_read + queue->max_delta) & queue->bitmask;
 80030d4:	6a2b      	ldr	r3, [r5, #32]
 80030d6:	692a      	ldr	r2, [r5, #16]
 80030d8:	4694      	mov	ip, r2
 80030da:	4463      	add	r3, ip
 80030dc:	68e8      	ldr	r0, [r5, #12]
        uint32_t match_tick =
 80030de:	4018      	ands	r0, r3
        ticker->interface->set_interrupt(match_tick);
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	4798      	blx	r3
 80030e6:	e7c4      	b.n	8003072 <schedule_interrupt+0xe>

080030e8 <initialize>:
{
 80030e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ea:	46ce      	mov	lr, r9
 80030ec:	4647      	mov	r7, r8
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b083      	sub	sp, #12
 80030f2:	0005      	movs	r5, r0
    if (ticker->queue->initialized) {
 80030f4:	2338      	movs	r3, #56	; 0x38
 80030f6:	6842      	ldr	r2, [r0, #4]
 80030f8:	5cd3      	ldrb	r3, [r2, r3]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <initialize+0x20>
}
 80030fe:	b003      	add	sp, #12
 8003100:	bc0c      	pop	{r2, r3}
 8003102:	4690      	mov	r8, r2
 8003104:	4699      	mov	r9, r3
 8003106:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ticker->interface->init();
 8003108:	6803      	ldr	r3, [r0, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4798      	blx	r3
    const ticker_info_t *info = ticker->interface->get_info();
 800310e:	682b      	ldr	r3, [r5, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	4798      	blx	r3
    uint32_t frequency = info->frequency;
 8003114:	6806      	ldr	r6, [r0, #0]
    if (info->frequency == 0) {
 8003116:	2e00      	cmp	r6, #0
 8003118:	d100      	bne.n	800311c <initialize+0x34>
        frequency = 1000000;
 800311a:	4e32      	ldr	r6, [pc, #200]	; (80031e4 <initialize+0xfc>)
    for (uint8_t i = 31; i > 0; --i) {
 800311c:	241f      	movs	r4, #31
 800311e:	2c00      	cmp	r4, #0
 8003120:	d006      	beq.n	8003130 <initialize+0x48>
        if ((1 << i) == frequency) {
 8003122:	2301      	movs	r3, #1
 8003124:	40a3      	lsls	r3, r4
 8003126:	429e      	cmp	r6, r3
 8003128:	d002      	beq.n	8003130 <initialize+0x48>
    for (uint8_t i = 31; i > 0; --i) {
 800312a:	3c01      	subs	r4, #1
 800312c:	b2e4      	uxtb	r4, r4
 800312e:	e7f6      	b.n	800311e <initialize+0x36>
    uint32_t bits = info->bits;
 8003130:	6847      	ldr	r7, [r0, #4]
    if ((info->bits > 32) || (info->bits < 4)) {
 8003132:	1f3b      	subs	r3, r7, #4
 8003134:	2b1c      	cmp	r3, #28
 8003136:	d900      	bls.n	800313a <initialize+0x52>
        bits = 32;
 8003138:	2720      	movs	r7, #32
    uint32_t max_delta = 0x7 << (bits - 4); // 7/16th
 800313a:	1f3b      	subs	r3, r7, #4
 800313c:	2207      	movs	r2, #7
 800313e:	409a      	lsls	r2, r3
 8003140:	4691      	mov	r9, r2
        ((uint64_t)max_delta * 1000000 + frequency - 1) / frequency;
 8003142:	2300      	movs	r3, #0
 8003144:	4698      	mov	r8, r3
 8003146:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <initialize+0xfc>)
 8003148:	2300      	movs	r3, #0
 800314a:	4648      	mov	r0, r9
 800314c:	2100      	movs	r1, #0
 800314e:	f7fd f9fb 	bl	8000548 <__aeabi_lmul>
 8003152:	9600      	str	r6, [sp, #0]
 8003154:	2300      	movs	r3, #0
 8003156:	9301      	str	r3, [sp, #4]
 8003158:	9a00      	ldr	r2, [sp, #0]
 800315a:	9b01      	ldr	r3, [sp, #4]
 800315c:	1880      	adds	r0, r0, r2
 800315e:	4159      	adcs	r1, r3
 8003160:	2201      	movs	r2, #1
 8003162:	4252      	negs	r2, r2
 8003164:	17d3      	asrs	r3, r2, #31
 8003166:	1880      	adds	r0, r0, r2
 8003168:	4159      	adcs	r1, r3
    uint64_t max_delta_us =
 800316a:	9a00      	ldr	r2, [sp, #0]
 800316c:	9b01      	ldr	r3, [sp, #4]
 800316e:	f7fd f9cb 	bl	8000508 <__aeabi_uldivmod>
 8003172:	9000      	str	r0, [sp, #0]
 8003174:	9101      	str	r1, [sp, #4]
    ticker->queue->event_handler = NULL;
 8003176:	686b      	ldr	r3, [r5, #4]
 8003178:	4642      	mov	r2, r8
 800317a:	601a      	str	r2, [r3, #0]
    ticker->queue->head = NULL;
 800317c:	686b      	ldr	r3, [r5, #4]
 800317e:	605a      	str	r2, [r3, #4]
    ticker->queue->tick_last_read = ticker->interface->read();
 8003180:	686b      	ldr	r3, [r5, #4]
 8003182:	4698      	mov	r8, r3
 8003184:	682b      	ldr	r3, [r5, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4798      	blx	r3
 800318a:	4643      	mov	r3, r8
 800318c:	6218      	str	r0, [r3, #32]
    ticker->queue->tick_remainder = 0;
 800318e:	686b      	ldr	r3, [r5, #4]
 8003190:	2000      	movs	r0, #0
 8003192:	2100      	movs	r1, #0
 8003194:	6298      	str	r0, [r3, #40]	; 0x28
 8003196:	62d9      	str	r1, [r3, #44]	; 0x2c
    ticker->queue->frequency = frequency;
 8003198:	686b      	ldr	r3, [r5, #4]
 800319a:	609e      	str	r6, [r3, #8]
    ticker->queue->frequency_shifts = frequency_shifts;
 800319c:	233a      	movs	r3, #58	; 0x3a
 800319e:	686a      	ldr	r2, [r5, #4]
 80031a0:	54d4      	strb	r4, [r2, r3]
    ticker->queue->bitmask = ((uint64_t)1 << bits) - 1;
 80031a2:	6869      	ldr	r1, [r5, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	0013      	movs	r3, r2
 80031a8:	40bb      	lsls	r3, r7
 80031aa:	3b01      	subs	r3, #1
 80031ac:	60cb      	str	r3, [r1, #12]
    ticker->queue->max_delta = max_delta;
 80031ae:	686b      	ldr	r3, [r5, #4]
 80031b0:	4649      	mov	r1, r9
 80031b2:	6119      	str	r1, [r3, #16]
    ticker->queue->max_delta_us = max_delta_us;
 80031b4:	686b      	ldr	r3, [r5, #4]
 80031b6:	9800      	ldr	r0, [sp, #0]
 80031b8:	9901      	ldr	r1, [sp, #4]
 80031ba:	6198      	str	r0, [r3, #24]
 80031bc:	61d9      	str	r1, [r3, #28]
    ticker->queue->present_time = 0;
 80031be:	686b      	ldr	r3, [r5, #4]
 80031c0:	2000      	movs	r0, #0
 80031c2:	2100      	movs	r1, #0
 80031c4:	6318      	str	r0, [r3, #48]	; 0x30
 80031c6:	6359      	str	r1, [r3, #52]	; 0x34
    ticker->queue->dispatching = false;
 80031c8:	2100      	movs	r1, #0
 80031ca:	2339      	movs	r3, #57	; 0x39
 80031cc:	6868      	ldr	r0, [r5, #4]
 80031ce:	54c1      	strb	r1, [r0, r3]
    ticker->queue->initialized = true;
 80031d0:	3b01      	subs	r3, #1
 80031d2:	6869      	ldr	r1, [r5, #4]
 80031d4:	54ca      	strb	r2, [r1, r3]
    update_present_time(ticker);
 80031d6:	0028      	movs	r0, r5
 80031d8:	f7ff fe36 	bl	8002e48 <update_present_time>
    schedule_interrupt(ticker);
 80031dc:	0028      	movs	r0, r5
 80031de:	f7ff ff41 	bl	8003064 <schedule_interrupt>
 80031e2:	e78c      	b.n	80030fe <initialize+0x16>
 80031e4:	000f4240 	.word	0x000f4240

080031e8 <ticker_set_handler>:

void ticker_set_handler(const ticker_data_t *const ticker, ticker_event_handler handler)
{
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	0004      	movs	r4, r0
 80031ec:	000d      	movs	r5, r1
    initialize(ticker);
 80031ee:	f7ff ff7b 	bl	80030e8 <initialize>

    core_util_critical_section_enter();
 80031f2:	f000 faab 	bl	800374c <core_util_critical_section_enter>
    set_handler(ticker, handler);
 80031f6:	0029      	movs	r1, r5
 80031f8:	0020      	movs	r0, r4
 80031fa:	f7ff fe21 	bl	8002e40 <set_handler>
    core_util_critical_section_exit();
 80031fe:	f000 faaf 	bl	8003760 <core_util_critical_section_exit>
}
 8003202:	bd70      	pop	{r4, r5, r6, pc}

08003204 <ticker_irq_handler>:

void ticker_irq_handler(const ticker_data_t *const ticker)
{
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	0004      	movs	r4, r0
    core_util_critical_section_enter();
 8003208:	f000 faa0 	bl	800374c <core_util_critical_section_enter>

    ticker->interface->clear_interrupt();
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4798      	blx	r3

    /* Go through all the pending TimerEvents */
    ticker->queue->dispatching = true;
 8003212:	2201      	movs	r2, #1
 8003214:	2339      	movs	r3, #57	; 0x39
 8003216:	6861      	ldr	r1, [r4, #4]
 8003218:	54ca      	strb	r2, [r1, r3]
    while (1) {
        if (ticker->queue->head == NULL) {
 800321a:	6863      	ldr	r3, [r4, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d016      	beq.n	8003250 <ticker_irq_handler+0x4c>
            break;
        }

        // update the current timestamp used by the queue
        update_present_time(ticker);
 8003222:	0020      	movs	r0, r4
 8003224:	f7ff fe10 	bl	8002e48 <update_present_time>

        if (ticker->queue->head->timestamp <= ticker->queue->present_time) {
 8003228:	6863      	ldr	r3, [r4, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	6816      	ldr	r6, [r2, #0]
 800322e:	6850      	ldr	r0, [r2, #4]
 8003230:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 8003232:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003234:	4288      	cmp	r0, r1
 8003236:	d80b      	bhi.n	8003250 <ticker_irq_handler+0x4c>
 8003238:	d008      	beq.n	800324c <ticker_irq_handler+0x48>
            // This event was in the past:
            //      point to the following one and execute its handler
            ticker_event_t *p = ticker->queue->head;
            ticker->queue->head = ticker->queue->head->next;
 800323a:	68d1      	ldr	r1, [r2, #12]
 800323c:	6059      	str	r1, [r3, #4]
            if (ticker->queue->event_handler != NULL) {
 800323e:	6863      	ldr	r3, [r4, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0e9      	beq.n	800321a <ticker_irq_handler+0x16>
                (*ticker->queue->event_handler)(p->id); // NOTE: the handler can set new events
 8003246:	6890      	ldr	r0, [r2, #8]
 8003248:	4798      	blx	r3
 800324a:	e7e6      	b.n	800321a <ticker_irq_handler+0x16>
        if (ticker->queue->head->timestamp <= ticker->queue->present_time) {
 800324c:	42ae      	cmp	r6, r5
 800324e:	d9f4      	bls.n	800323a <ticker_irq_handler+0x36>
             * event handler may have altered the chain of pending events. */
        } else {
            break;
        }
    }
    ticker->queue->dispatching = false;
 8003250:	2200      	movs	r2, #0
 8003252:	2339      	movs	r3, #57	; 0x39
 8003254:	6861      	ldr	r1, [r4, #4]
 8003256:	54ca      	strb	r2, [r1, r3]

    schedule_interrupt(ticker);
 8003258:	0020      	movs	r0, r4
 800325a:	f7ff ff03 	bl	8003064 <schedule_interrupt>

    core_util_critical_section_exit();
 800325e:	f000 fa7f 	bl	8003760 <core_util_critical_section_exit>
}
 8003262:	bd70      	pop	{r4, r5, r6, pc}

08003264 <ticker_insert_event_us>:

    core_util_critical_section_exit();
}

void ticker_insert_event_us(const ticker_data_t *const ticker, ticker_event_t *obj, us_timestamp_t timestamp, uint32_t id)
{
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	0006      	movs	r6, r0
 8003268:	000d      	movs	r5, r1
 800326a:	0017      	movs	r7, r2
 800326c:	001c      	movs	r4, r3
    core_util_critical_section_enter();
 800326e:	f000 fa6d 	bl	800374c <core_util_critical_section_enter>

    // update the current timestamp
    update_present_time(ticker);
 8003272:	0030      	movs	r0, r6
 8003274:	f7ff fde8 	bl	8002e48 <update_present_time>

    // initialise our data
    obj->timestamp = timestamp;
 8003278:	602f      	str	r7, [r5, #0]
 800327a:	606c      	str	r4, [r5, #4]
    obj->id = id;
 800327c:	9b06      	ldr	r3, [sp, #24]
 800327e:	60ab      	str	r3, [r5, #8]

    /* Go through the list until we either reach the end, or find
       an element this should come before (which is possibly the
       head). */
    ticker_event_t *prev = NULL, *p = ticker->queue->head;
 8003280:	6873      	ldr	r3, [r6, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2100      	movs	r1, #0
    while (p != NULL) {
 8003286:	e001      	b.n	800328c <ticker_insert_event_us+0x28>
        /* check if we come before p */
        if (timestamp < p->timestamp) {
            break;
        }
        /* go to the next element */
        prev = p;
 8003288:	0019      	movs	r1, r3
        p = p->next;
 800328a:	68db      	ldr	r3, [r3, #12]
    while (p != NULL) {
 800328c:	2b00      	cmp	r3, #0
 800328e:	d006      	beq.n	800329e <ticker_insert_event_us+0x3a>
        if (timestamp < p->timestamp) {
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	42a2      	cmp	r2, r4
 8003296:	d802      	bhi.n	800329e <ticker_insert_event_us+0x3a>
 8003298:	d1f6      	bne.n	8003288 <ticker_insert_event_us+0x24>
 800329a:	42b8      	cmp	r0, r7
 800329c:	d9f4      	bls.n	8003288 <ticker_insert_event_us+0x24>
    }

    /* if we're at the end p will be NULL, which is correct */
    obj->next = p;
 800329e:	60eb      	str	r3, [r5, #12]

    /* if prev is NULL we're at the head */
    if (prev == NULL) {
 80032a0:	2900      	cmp	r1, #0
 80032a2:	d003      	beq.n	80032ac <ticker_insert_event_us+0x48>
        ticker->queue->head = obj;
        schedule_interrupt(ticker);
    } else {
        prev->next = obj;
 80032a4:	60cd      	str	r5, [r1, #12]
    }

    core_util_critical_section_exit();
 80032a6:	f000 fa5b 	bl	8003760 <core_util_critical_section_exit>
}
 80032aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ticker->queue->head = obj;
 80032ac:	6873      	ldr	r3, [r6, #4]
 80032ae:	605d      	str	r5, [r3, #4]
        schedule_interrupt(ticker);
 80032b0:	0030      	movs	r0, r6
 80032b2:	f7ff fed7 	bl	8003064 <schedule_interrupt>
 80032b6:	e7f6      	b.n	80032a6 <ticker_insert_event_us+0x42>

080032b8 <ticker_remove_event>:

void ticker_remove_event(const ticker_data_t *const ticker, ticker_event_t *obj)
{
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	0005      	movs	r5, r0
 80032bc:	000c      	movs	r4, r1
    core_util_critical_section_enter();
 80032be:	f000 fa45 	bl	800374c <core_util_critical_section_enter>

    // remove this object from the list
    if (ticker->queue->head == obj) {
 80032c2:	686a      	ldr	r2, [r5, #4]
 80032c4:	6853      	ldr	r3, [r2, #4]
 80032c6:	42a3      	cmp	r3, r4
 80032c8:	d006      	beq.n	80032d8 <ticker_remove_event+0x20>
        ticker->queue->head = obj->next;
        schedule_interrupt(ticker);
    } else {
        // find the object before me, then drop me
        ticker_event_t *p = ticker->queue->head;
        while (p != NULL) {
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00c      	beq.n	80032e8 <ticker_remove_event+0x30>
            if (p->next == obj) {
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	4294      	cmp	r4, r2
 80032d2:	d007      	beq.n	80032e4 <ticker_remove_event+0x2c>
                p->next = obj->next;
                break;
            }
            p = p->next;
 80032d4:	0013      	movs	r3, r2
 80032d6:	e7f8      	b.n	80032ca <ticker_remove_event+0x12>
        ticker->queue->head = obj->next;
 80032d8:	68e3      	ldr	r3, [r4, #12]
 80032da:	6053      	str	r3, [r2, #4]
        schedule_interrupt(ticker);
 80032dc:	0028      	movs	r0, r5
 80032de:	f7ff fec1 	bl	8003064 <schedule_interrupt>
 80032e2:	e001      	b.n	80032e8 <ticker_remove_event+0x30>
                p->next = obj->next;
 80032e4:	68e2      	ldr	r2, [r4, #12]
 80032e6:	60da      	str	r2, [r3, #12]
        }
    }

    core_util_critical_section_exit();
 80032e8:	f000 fa3a 	bl	8003760 <core_util_critical_section_exit>
}
 80032ec:	bd70      	pop	{r4, r5, r6, pc}

080032ee <ticker_read_us>:
{
    return ticker_read_us(ticker);
}

us_timestamp_t ticker_read_us(const ticker_data_t *const ticker)
{
 80032ee:	b510      	push	{r4, lr}
 80032f0:	0004      	movs	r4, r0
    initialize(ticker);
 80032f2:	f7ff fef9 	bl	80030e8 <initialize>

    core_util_critical_section_enter();
 80032f6:	f000 fa29 	bl	800374c <core_util_critical_section_enter>
    update_present_time(ticker);
 80032fa:	0020      	movs	r0, r4
 80032fc:	f7ff fda4 	bl	8002e48 <update_present_time>
    core_util_critical_section_exit();
 8003300:	f000 fa2e 	bl	8003760 <core_util_critical_section_exit>

    return ticker->queue->present_time;
 8003304:	6863      	ldr	r3, [r4, #4]
 8003306:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003308:	6b59      	ldr	r1, [r3, #52]	; 0x34
}
 800330a:	bd10      	pop	{r4, pc}

0800330c <ticker_read>:
{
 800330c:	b510      	push	{r4, lr}
    return ticker_read_us(ticker);
 800330e:	f7ff ffee 	bl	80032ee <ticker_read_us>
}
 8003312:	bd10      	pop	{r4, pc}

08003314 <get_us_ticker_data>:
};

const ticker_data_t *get_us_ticker_data(void)
{
    return &us_data;
}
 8003314:	4800      	ldr	r0, [pc, #0]	; (8003318 <get_us_ticker_data+0x4>)
 8003316:	4770      	bx	lr
 8003318:	08008350 	.word	0x08008350

0800331c <us_ticker_irq_handler>:

    return prev_irq_handler;
}

void us_ticker_irq_handler(void)
{
 800331c:	b510      	push	{r4, lr}
    if (irq_handler) {
 800331e:	4b03      	ldr	r3, [pc, #12]	; (800332c <us_ticker_irq_handler+0x10>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <us_ticker_irq_handler+0xe>
        irq_handler(&us_data);
 8003326:	4802      	ldr	r0, [pc, #8]	; (8003330 <us_ticker_irq_handler+0x14>)
 8003328:	4798      	blx	r3
    }
}
 800332a:	bd10      	pop	{r4, pc}
 800332c:	200000c8 	.word	0x200000c8
 8003330:	08008350 	.word	0x08008350

08003334 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>:
FileBase *FileBase::_head = NULL;
SingletonPtr<PlatformMutex> FileBase::_mutex;

FileBase::FileBase(const char *name, PathType t) : _next(NULL),
    _name(name),
    _path_type(t)
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x3c>)
 8003336:	3308      	adds	r3, #8
 8003338:	6003      	str	r3, [r0, #0]
 800333a:	2300      	movs	r3, #0
 800333c:	6043      	str	r3, [r0, #4]
 800333e:	6081      	str	r1, [r0, #8]
 8003340:	7302      	strb	r2, [r0, #12]
        if (NULL == _ptr) {
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x40>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x2c>
{
    _mutex->lock();
    if (name != NULL) {
 800334a:	2900      	cmp	r1, #0
 800334c:	d003      	beq.n	8003356 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x22>
        // put this object at head of the list
        _next = _head;
 800334e:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x44>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	6042      	str	r2, [r0, #4]
        _head = this;
 8003354:	6018      	str	r0, [r3, #0]
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x40>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d004      	beq.n	8003368 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x34>
    } else {
        _next = NULL;
    }
    _mutex->unlock();
}
 800335e:	4770      	bx	lr
                _ptr = new (_data) T();
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x40>)
 8003362:	1d1a      	adds	r2, r3, #4
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	e7f0      	b.n	800334a <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x16>
 8003368:	4b02      	ldr	r3, [pc, #8]	; (8003374 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x40>)
 800336a:	1d1a      	adds	r2, r3, #4
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e7f6      	b.n	800335e <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x2a>
 8003370:	08008374 	.word	0x08008374
 8003374:	20000994 	.word	0x20000994
 8003378:	20000990 	.word	0x20000990

0800337c <_ZN4mbed8FileBase6lookupEPKcj>:
        remove_filehandle(static_cast<FileHandle *>(static_cast<FileLike *>(this)));
    }
}

FileBase *FileBase::lookup(const char *name, unsigned int len)
{
 800337c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800337e:	46c6      	mov	lr, r8
 8003380:	b500      	push	{lr}
 8003382:	0007      	movs	r7, r0
 8003384:	000e      	movs	r6, r1
        if (NULL == _ptr) {
 8003386:	4b19      	ldr	r3, [pc, #100]	; (80033ec <_ZN4mbed8FileBase6lookupEPKcj+0x70>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <_ZN4mbed8FileBase6lookupEPKcj+0x1e>
            singleton_unlock();
        }
        // _ptr was not zero initialized or was
        // corrupted if this assert is hit
        MBED_ASSERT(_ptr == (T *)&_data);
        return _ptr;
 800338e:	4b17      	ldr	r3, [pc, #92]	; (80033ec <_ZN4mbed8FileBase6lookupEPKcj+0x70>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4698      	mov	r8, r3
    _mutex->lock();
    FileBase *p = _head;
 8003394:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <_ZN4mbed8FileBase6lookupEPKcj+0x74>)
 8003396:	681c      	ldr	r4, [r3, #0]
 8003398:	e004      	b.n	80033a4 <_ZN4mbed8FileBase6lookupEPKcj+0x28>
                _ptr = new (_data) T();
 800339a:	4b14      	ldr	r3, [pc, #80]	; (80033ec <_ZN4mbed8FileBase6lookupEPKcj+0x70>)
 800339c:	1d1a      	adds	r2, r3, #4
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e7f5      	b.n	800338e <_ZN4mbed8FileBase6lookupEPKcj+0x12>
        /* Check that p->_name matches name and is the correct length */
        if (p->_name != NULL && std::strncmp(p->_name, name, len) == 0 && std::strlen(p->_name) == len) {
            _mutex->unlock();
            return p;
        }
        p = p->_next;
 80033a2:	6864      	ldr	r4, [r4, #4]
    while (p != NULL) {
 80033a4:	2c00      	cmp	r4, #0
 80033a6:	d015      	beq.n	80033d4 <_ZN4mbed8FileBase6lookupEPKcj+0x58>
        if (p->_name != NULL && std::strncmp(p->_name, name, len) == 0 && std::strlen(p->_name) == len) {
 80033a8:	68a5      	ldr	r5, [r4, #8]
 80033aa:	2d00      	cmp	r5, #0
 80033ac:	d0f9      	beq.n	80033a2 <_ZN4mbed8FileBase6lookupEPKcj+0x26>
 80033ae:	0032      	movs	r2, r6
 80033b0:	0039      	movs	r1, r7
 80033b2:	0028      	movs	r0, r5
 80033b4:	f004 fd2a 	bl	8007e0c <strncmp>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d1f2      	bne.n	80033a2 <_ZN4mbed8FileBase6lookupEPKcj+0x26>
 80033bc:	0028      	movs	r0, r5
 80033be:	f7fc fead 	bl	800011c <strlen>
 80033c2:	4286      	cmp	r6, r0
 80033c4:	d1ed      	bne.n	80033a2 <_ZN4mbed8FileBase6lookupEPKcj+0x26>
        if (NULL == _ptr) {
 80033c6:	4643      	mov	r3, r8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d106      	bne.n	80033da <_ZN4mbed8FileBase6lookupEPKcj+0x5e>
                _ptr = new (_data) T();
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <_ZN4mbed8FileBase6lookupEPKcj+0x70>)
 80033ce:	1d1a      	adds	r2, r3, #4
 80033d0:	601a      	str	r2, [r3, #0]
            return p;
 80033d2:	e002      	b.n	80033da <_ZN4mbed8FileBase6lookupEPKcj+0x5e>
        if (NULL == _ptr) {
 80033d4:	4643      	mov	r3, r8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <_ZN4mbed8FileBase6lookupEPKcj+0x66>
    }
    _mutex->unlock();
    return NULL;
}
 80033da:	0020      	movs	r0, r4
 80033dc:	bc04      	pop	{r2}
 80033de:	4690      	mov	r8, r2
 80033e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                _ptr = new (_data) T();
 80033e2:	4b02      	ldr	r3, [pc, #8]	; (80033ec <_ZN4mbed8FileBase6lookupEPKcj+0x70>)
 80033e4:	1d1a      	adds	r2, r3, #4
 80033e6:	601a      	str	r2, [r3, #0]
    return NULL;
 80033e8:	e7f7      	b.n	80033da <_ZN4mbed8FileBase6lookupEPKcj+0x5e>
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	20000994 	.word	0x20000994
 80033f0:	20000990 	.word	0x20000990

080033f4 <_ZN4mbed8FileBase11getPathTypeEv>:
}

PathType FileBase::getPathType(void)
{
    // Constant read so no lock needed
    return _path_type;
 80033f4:	7b00      	ldrb	r0, [r0, #12]
}
 80033f6:	4770      	bx	lr

080033f8 <_ZN4mbed8FileBaseD1Ev>:
FileBase::~FileBase()
 80033f8:	b510      	push	{r4, lr}
 80033fa:	0004      	movs	r4, r0
 80033fc:	4b16      	ldr	r3, [pc, #88]	; (8003458 <_ZN4mbed8FileBaseD1Ev+0x60>)
 80033fe:	3308      	adds	r3, #8
 8003400:	6003      	str	r3, [r0, #0]
        if (NULL == _ptr) {
 8003402:	4b16      	ldr	r3, [pc, #88]	; (800345c <_ZN4mbed8FileBaseD1Ev+0x64>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <_ZN4mbed8FileBaseD1Ev+0x2a>
        return _ptr;
 800340a:	4b14      	ldr	r3, [pc, #80]	; (800345c <_ZN4mbed8FileBaseD1Ev+0x64>)
 800340c:	6819      	ldr	r1, [r3, #0]
    if (_name != NULL) {
 800340e:	68a3      	ldr	r3, [r4, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d010      	beq.n	8003436 <_ZN4mbed8FileBaseD1Ev+0x3e>
        if (_head == this) { // first in the list, so just drop me
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <_ZN4mbed8FileBaseD1Ev+0x68>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4294      	cmp	r4, r2
 800341a:	d107      	bne.n	800342c <_ZN4mbed8FileBaseD1Ev+0x34>
            _head = _next;
 800341c:	6862      	ldr	r2, [r4, #4]
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e009      	b.n	8003436 <_ZN4mbed8FileBaseD1Ev+0x3e>
                _ptr = new (_data) T();
 8003422:	4b0e      	ldr	r3, [pc, #56]	; (800345c <_ZN4mbed8FileBaseD1Ev+0x64>)
 8003424:	1d1a      	adds	r2, r3, #4
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	e7ef      	b.n	800340a <_ZN4mbed8FileBaseD1Ev+0x12>
                p = p->_next;
 800342a:	001a      	movs	r2, r3
            while (p->_next != this) {
 800342c:	6853      	ldr	r3, [r2, #4]
 800342e:	429c      	cmp	r4, r3
 8003430:	d1fb      	bne.n	800342a <_ZN4mbed8FileBaseD1Ev+0x32>
            p->_next = _next;
 8003432:	6863      	ldr	r3, [r4, #4]
 8003434:	6053      	str	r3, [r2, #4]
        if (NULL == _ptr) {
 8003436:	2900      	cmp	r1, #0
 8003438:	d006      	beq.n	8003448 <_ZN4mbed8FileBaseD1Ev+0x50>
    if (getPathType() == FilePathType) {
 800343a:	0020      	movs	r0, r4
 800343c:	f7ff ffda 	bl	80033f4 <_ZN4mbed8FileBase11getPathTypeEv>
 8003440:	2800      	cmp	r0, #0
 8003442:	d005      	beq.n	8003450 <_ZN4mbed8FileBaseD1Ev+0x58>
}
 8003444:	0020      	movs	r0, r4
 8003446:	bd10      	pop	{r4, pc}
                _ptr = new (_data) T();
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <_ZN4mbed8FileBaseD1Ev+0x64>)
 800344a:	1d1a      	adds	r2, r3, #4
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e7f4      	b.n	800343a <_ZN4mbed8FileBaseD1Ev+0x42>
        remove_filehandle(static_cast<FileHandle *>(static_cast<FileLike *>(this)));
 8003450:	1f20      	subs	r0, r4, #4
 8003452:	f000 fadd 	bl	8003a10 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE>
 8003456:	e7f5      	b.n	8003444 <_ZN4mbed8FileBaseD1Ev+0x4c>
 8003458:	08008374 	.word	0x08008374
 800345c:	20000994 	.word	0x20000994
 8003460:	20000990 	.word	0x20000990

08003464 <_ZN4mbed8FileBaseD0Ev>:
FileBase::~FileBase()
 8003464:	b510      	push	{r4, lr}
 8003466:	0004      	movs	r4, r0
}
 8003468:	f7ff ffc6 	bl	80033f8 <_ZN4mbed8FileBaseD1Ev>
 800346c:	0020      	movs	r0, r4
 800346e:	f000 fe15 	bl	800409c <_ZdlPv>
 8003472:	0020      	movs	r0, r4
 8003474:	bd10      	pop	{r4, pc}

08003476 <_ZN4mbed10FileHandle4syncEv>:
    }
 8003476:	2000      	movs	r0, #0
 8003478:	4770      	bx	lr

0800347a <_ZN4mbed10FileHandle6isattyEv>:
    }
 800347a:	2000      	movs	r0, #0
 800347c:	4770      	bx	lr

0800347e <_ZN4mbed10FileHandle4sizeEv>:
#include "platform/mbed_critical.h"

namespace mbed {

off_t FileHandle::size()
{
 800347e:	b570      	push	{r4, r5, r6, lr}
 8003480:	0004      	movs	r4, r0
    /* remember our current position */
    off_t off = seek(0, SEEK_CUR);
 8003482:	6803      	ldr	r3, [r0, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2201      	movs	r2, #1
 8003488:	2100      	movs	r1, #0
 800348a:	4798      	blx	r3
 800348c:	1e05      	subs	r5, r0, #0
    if (off < 0) {
 800348e:	db0d      	blt.n	80034ac <_ZN4mbed10FileHandle4sizeEv+0x2e>
        return off;
    }
    /* seek to the end to get the file length */
    off_t size = seek(0, SEEK_END);
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2202      	movs	r2, #2
 8003496:	2100      	movs	r1, #0
 8003498:	0020      	movs	r0, r4
 800349a:	4798      	blx	r3
 800349c:	0006      	movs	r6, r0
    /* return to our old position */
    seek(off, SEEK_SET);
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2200      	movs	r2, #0
 80034a4:	0029      	movs	r1, r5
 80034a6:	0020      	movs	r0, r4
 80034a8:	4798      	blx	r3
    return size;
 80034aa:	0035      	movs	r5, r6
}
 80034ac:	0028      	movs	r0, r5
 80034ae:	bd70      	pop	{r4, r5, r6, pc}

080034b0 <_ZN4mbed8FilePathC1EPKc>:
 */
#include "platform/FilePath.h"

namespace mbed {

FilePath::FilePath(const char *file_path) : file_name(NULL), fb(NULL)
 80034b0:	b570      	push	{r4, r5, r6, lr}
 80034b2:	0004      	movs	r4, r0
 80034b4:	000d      	movs	r5, r1
 80034b6:	2300      	movs	r3, #0
 80034b8:	6003      	str	r3, [r0, #0]
 80034ba:	6043      	str	r3, [r0, #4]
{
    // skip slashes
    file_path += strspn(file_path, "/");
 80034bc:	490b      	ldr	r1, [pc, #44]	; (80034ec <_ZN4mbed8FilePathC1EPKc+0x3c>)
 80034be:	0028      	movs	r0, r5
 80034c0:	f004 fcb5 	bl	8007e2e <strspn>
 80034c4:	1828      	adds	r0, r5, r0

    const char *file_system = file_path;
    file_name = file_system;
 80034c6:	6020      	str	r0, [r4, #0]
    int len = 0;
 80034c8:	2100      	movs	r1, #0
    while (true) {
        char c = *file_name;
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	781a      	ldrb	r2, [r3, #0]
        if (c == '/') { // end of object name
 80034ce:	2a2f      	cmp	r2, #47	; 0x2f
 80034d0:	d005      	beq.n	80034de <_ZN4mbed8FilePathC1EPKc+0x2e>
            file_name++; // point to one char after the '/'
            break;
        }
        if (c == 0) { // end of object name, with no filename
 80034d2:	2a00      	cmp	r2, #0
 80034d4:	d005      	beq.n	80034e2 <_ZN4mbed8FilePathC1EPKc+0x32>
            break;
        }
        len++;
 80034d6:	3101      	adds	r1, #1
        file_name++;
 80034d8:	3301      	adds	r3, #1
 80034da:	6023      	str	r3, [r4, #0]
    }
 80034dc:	e7f5      	b.n	80034ca <_ZN4mbed8FilePathC1EPKc+0x1a>
            file_name++; // point to one char after the '/'
 80034de:	3301      	adds	r3, #1
 80034e0:	6023      	str	r3, [r4, #0]

    MBED_ASSERT(len != 0);
    fb = FileBase::lookup(file_system, len);
 80034e2:	f7ff ff4b 	bl	800337c <_ZN4mbed8FileBase6lookupEPKcj>
 80034e6:	6060      	str	r0, [r4, #4]
}
 80034e8:	0020      	movs	r0, r4
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
 80034ec:	080083d4 	.word	0x080083d4

080034f0 <_ZN4mbed8FilePath8fileNameEv>:

const char *FilePath::fileName(void)
{
    return file_name;
 80034f0:	6800      	ldr	r0, [r0, #0]
}
 80034f2:	4770      	bx	lr

080034f4 <_ZN4mbed8FilePath12isFileSystemEv>:

bool FilePath::isFileSystem(void)
{
 80034f4:	b510      	push	{r4, lr}
    if (NULL == fb) {
 80034f6:	6840      	ldr	r0, [r0, #4]
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d006      	beq.n	800350a <_ZN4mbed8FilePath12isFileSystemEv+0x16>
        return false;
    }
    return (fb->getPathType() == FileSystemPathType);
 80034fc:	f7ff ff7a 	bl	80033f4 <_ZN4mbed8FileBase11getPathTypeEv>
 8003500:	3801      	subs	r0, #1
 8003502:	4243      	negs	r3, r0
 8003504:	4158      	adcs	r0, r3
 8003506:	b2c0      	uxtb	r0, r0
}
 8003508:	bd10      	pop	{r4, pc}
        return false;
 800350a:	2000      	movs	r0, #0
 800350c:	e7fc      	b.n	8003508 <_ZN4mbed8FilePath12isFileSystemEv+0x14>

0800350e <_ZN4mbed8FilePath10fileSystemEv>:

FileSystemLike *FilePath::fileSystem(void)
{
 800350e:	b510      	push	{r4, lr}
 8003510:	0004      	movs	r4, r0
    if (isFileSystem()) {
 8003512:	f7ff ffef 	bl	80034f4 <_ZN4mbed8FilePath12isFileSystemEv>
 8003516:	2800      	cmp	r0, #0
 8003518:	d004      	beq.n	8003524 <_ZN4mbed8FilePath10fileSystemEv+0x16>
        return static_cast<FileSystemLike *>(fb);
 800351a:	6860      	ldr	r0, [r4, #4]
 800351c:	2800      	cmp	r0, #0
 800351e:	d003      	beq.n	8003528 <_ZN4mbed8FilePath10fileSystemEv+0x1a>
 8003520:	3804      	subs	r0, #4
    }
    return NULL;
}
 8003522:	bd10      	pop	{r4, pc}
    return NULL;
 8003524:	2000      	movs	r0, #0
 8003526:	e7fc      	b.n	8003522 <_ZN4mbed8FilePath10fileSystemEv+0x14>
        return static_cast<FileSystemLike *>(fb);
 8003528:	2000      	movs	r0, #0
 800352a:	e7fa      	b.n	8003522 <_ZN4mbed8FilePath10fileSystemEv+0x14>

0800352c <_ZN4mbed8FilePath6isFileEv>:

bool FilePath::isFile(void)
{
 800352c:	b510      	push	{r4, lr}
    if (NULL == fb) {
 800352e:	6840      	ldr	r0, [r0, #4]
 8003530:	2800      	cmp	r0, #0
 8003532:	d005      	beq.n	8003540 <_ZN4mbed8FilePath6isFileEv+0x14>
        return false;
    }
    return (fb->getPathType() == FilePathType);
 8003534:	f7ff ff5e 	bl	80033f4 <_ZN4mbed8FileBase11getPathTypeEv>
 8003538:	4243      	negs	r3, r0
 800353a:	4158      	adcs	r0, r3
 800353c:	b2c0      	uxtb	r0, r0
}
 800353e:	bd10      	pop	{r4, pc}
        return false;
 8003540:	2000      	movs	r0, #0
 8003542:	e7fc      	b.n	800353e <_ZN4mbed8FilePath6isFileEv+0x12>

08003544 <_ZN4mbed8FilePath4fileEv>:

FileLike *FilePath::file(void)
{
 8003544:	b510      	push	{r4, lr}
 8003546:	0004      	movs	r4, r0
    if (isFile()) {
 8003548:	f7ff fff0 	bl	800352c <_ZN4mbed8FilePath6isFileEv>
 800354c:	2800      	cmp	r0, #0
 800354e:	d004      	beq.n	800355a <_ZN4mbed8FilePath4fileEv+0x16>
        return (FileLike *)fb;
 8003550:	6860      	ldr	r0, [r4, #4]
 8003552:	2800      	cmp	r0, #0
 8003554:	d003      	beq.n	800355e <_ZN4mbed8FilePath4fileEv+0x1a>
 8003556:	3804      	subs	r0, #4
    }
    return NULL;
}
 8003558:	bd10      	pop	{r4, pc}
    return NULL;
 800355a:	2000      	movs	r0, #0
 800355c:	e7fc      	b.n	8003558 <_ZN4mbed8FilePath4fileEv+0x14>
        return (FileLike *)fb;
 800355e:	2000      	movs	r0, #0
 8003560:	e7fa      	b.n	8003558 <_ZN4mbed8FilePath4fileEv+0x14>

08003562 <_ZN4mbed8FilePath6existsEv>:

bool FilePath::exists(void)
{
    return fb != NULL;
 8003562:	6840      	ldr	r0, [r0, #4]
 8003564:	1e43      	subs	r3, r0, #1
 8003566:	4198      	sbcs	r0, r3
 8003568:	b2c0      	uxtb	r0, r0
}
 800356a:	4770      	bx	lr

0800356c <_ZN4mbed6Stream4lockEv>:
    /** Acquire exclusive access to this object.
     */
    virtual void lock()
    {
        // Stub
    }
 800356c:	4770      	bx	lr

0800356e <_ZN4mbed6Stream6unlockEv>:
    /** Release exclusive access to this object.
     */
    virtual void unlock()
    {
        // Stub
    }
 800356e:	4770      	bx	lr

08003570 <_ZN4mbed6Stream5closeEv>:
}

int Stream::close()
{
    return 0;
}
 8003570:	2000      	movs	r0, #0
 8003572:	4770      	bx	lr

08003574 <_ZN4mbed6Stream5writeEPKvj>:

ssize_t Stream::write(const void *buffer, size_t length)
{
 8003574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003576:	46c6      	mov	lr, r8
 8003578:	b500      	push	{lr}
 800357a:	0005      	movs	r5, r0
 800357c:	4688      	mov	r8, r1
    const char *ptr = (const char *)buffer;
    const char *end = ptr + length;
 800357e:	4442      	add	r2, r8
 8003580:	0017      	movs	r7, r2

    lock();
 8003582:	6803      	ldr	r3, [r0, #0]
 8003584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003586:	4798      	blx	r3
    const char *ptr = (const char *)buffer;
 8003588:	4644      	mov	r4, r8
 800358a:	e000      	b.n	800358e <_ZN4mbed6Stream5writeEPKvj+0x1a>
    while (ptr != end) {
        if (_putc(*ptr++) == EOF) {
 800358c:	0034      	movs	r4, r6
    while (ptr != end) {
 800358e:	42bc      	cmp	r4, r7
 8003590:	d008      	beq.n	80035a4 <_ZN4mbed6Stream5writeEPKvj+0x30>
        if (_putc(*ptr++) == EOF) {
 8003592:	682b      	ldr	r3, [r5, #0]
 8003594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003596:	1c66      	adds	r6, r4, #1
 8003598:	7821      	ldrb	r1, [r4, #0]
 800359a:	0028      	movs	r0, r5
 800359c:	4798      	blx	r3
 800359e:	1c43      	adds	r3, r0, #1
 80035a0:	d1f4      	bne.n	800358c <_ZN4mbed6Stream5writeEPKvj+0x18>
 80035a2:	0034      	movs	r4, r6
            break;
        }
    }
    unlock();
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	0028      	movs	r0, r5
 80035aa:	4798      	blx	r3

    return ptr - (const char *)buffer;
 80035ac:	4643      	mov	r3, r8
 80035ae:	1ae0      	subs	r0, r4, r3
}
 80035b0:	bc04      	pop	{r2}
 80035b2:	4690      	mov	r8, r2
 80035b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035b6 <_ZN4mbed6Stream4readEPvj>:

ssize_t Stream::read(void *buffer, size_t length)
{
 80035b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b8:	0005      	movs	r5, r0
 80035ba:	000f      	movs	r7, r1
    char *ptr = (char *)buffer;
    char *end = ptr + length;
 80035bc:	188e      	adds	r6, r1, r2

    lock();
 80035be:	6803      	ldr	r3, [r0, #0]
 80035c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c2:	4798      	blx	r3
    char *ptr = (char *)buffer;
 80035c4:	003c      	movs	r4, r7
    while (ptr != end) {
 80035c6:	42b4      	cmp	r4, r6
 80035c8:	d008      	beq.n	80035dc <_ZN4mbed6Stream4readEPvj+0x26>
        int c = _getc();
 80035ca:	682b      	ldr	r3, [r5, #0]
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	0028      	movs	r0, r5
 80035d0:	4798      	blx	r3
        if (c == EOF) {
 80035d2:	1c43      	adds	r3, r0, #1
 80035d4:	d002      	beq.n	80035dc <_ZN4mbed6Stream4readEPvj+0x26>
            break;
        }
        *ptr++ = c;
 80035d6:	7020      	strb	r0, [r4, #0]
 80035d8:	3401      	adds	r4, #1
    while (ptr != end) {
 80035da:	e7f4      	b.n	80035c6 <_ZN4mbed6Stream4readEPvj+0x10>
    }
    unlock();
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	0028      	movs	r0, r5
 80035e2:	4798      	blx	r3

    return ptr - (const char *)buffer;
 80035e4:	1be0      	subs	r0, r4, r7
}
 80035e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035e8 <_ZN4mbed6Stream4seekEli>:

off_t Stream::seek(off_t offset, int whence)
{
    return 0;
}
 80035e8:	2000      	movs	r0, #0
 80035ea:	4770      	bx	lr

080035ec <_ZN4mbed6Stream4tellEv>:

off_t Stream::tell()
{
    return 0;
}
 80035ec:	2000      	movs	r0, #0
 80035ee:	4770      	bx	lr

080035f0 <_ZN4mbed6Stream6rewindEv>:

void Stream::rewind()
{
}
 80035f0:	4770      	bx	lr

080035f2 <_ZN4mbed6Stream6isattyEv>:

int Stream::isatty()
{
    return 0;
}
 80035f2:	2000      	movs	r0, #0
 80035f4:	4770      	bx	lr

080035f6 <_ZN4mbed6Stream4syncEv>:

int Stream::sync()
{
    return 0;
}
 80035f6:	2000      	movs	r0, #0
 80035f8:	4770      	bx	lr

080035fa <_ZN4mbed6Stream4sizeEv>:

off_t Stream::size()
{
    return 0;
}
 80035fa:	2000      	movs	r0, #0
 80035fc:	4770      	bx	lr
	...

08003600 <_ZN4mbed6StreamC1EPKc>:
Stream::Stream(const char *name) : FileLike(name), _file(NULL)
 8003600:	b510      	push	{r4, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	0004      	movs	r4, r0
class FileHandle : private NonCopyable<FileHandle> {
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <_ZN4mbed6StreamC1EPKc+0x48>)
 8003608:	c008      	stmia	r0!, {r3}
public:
    /** Constructor FileLike
     *
     *  @param name     The name to use to open the file.
     */
    FileLike(const char *name = NULL) : FileBase(name, FilePathType) {}
 800360a:	2200      	movs	r2, #0
 800360c:	f7ff fe92 	bl	8003334 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>
 8003610:	4b0e      	ldr	r3, [pc, #56]	; (800364c <_ZN4mbed6StreamC1EPKc+0x4c>)
 8003612:	001a      	movs	r2, r3
 8003614:	3208      	adds	r2, #8
 8003616:	6022      	str	r2, [r4, #0]
 8003618:	3368      	adds	r3, #104	; 0x68
 800361a:	6063      	str	r3, [r4, #4]
 800361c:	2300      	movs	r3, #0
 800361e:	6163      	str	r3, [r4, #20]
    _file = fdopen(this, "w+");
 8003620:	490b      	ldr	r1, [pc, #44]	; (8003650 <_ZN4mbed6StreamC1EPKc+0x50>)
 8003622:	0020      	movs	r0, r4
 8003624:	f000 fd17 	bl	8004056 <_ZN4mbed6fdopenEPNS_10FileHandleEPKc>
 8003628:	6160      	str	r0, [r4, #20]
    if (_file) {
 800362a:	2800      	cmp	r0, #0
 800362c:	d004      	beq.n	8003638 <_ZN4mbed6StreamC1EPKc+0x38>
        mbed_set_unbuffered_stream(_file);
 800362e:	f000 fce7 	bl	8004000 <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>
}
 8003632:	0020      	movs	r0, r4
 8003634:	b002      	add	sp, #8
 8003636:	bd10      	pop	{r4, pc}
        MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_OPEN_FAILED), "Stream obj failure", _file);
 8003638:	2300      	movs	r3, #0
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	0002      	movs	r2, r0
 800363e:	2100      	movs	r1, #0
 8003640:	4804      	ldr	r0, [pc, #16]	; (8003654 <_ZN4mbed6StreamC1EPKc+0x54>)
 8003642:	f000 f923 	bl	800388c <mbed_error>
 8003646:	e7f4      	b.n	8003632 <_ZN4mbed6StreamC1EPKc+0x32>
 8003648:	0800838c 	.word	0x0800838c
 800364c:	0800843c 	.word	0x0800843c
 8003650:	08008438 	.word	0x08008438
 8003654:	80010119 	.word	0x80010119

08003658 <_ZN4mbed6StreamD1Ev>:
Stream::~Stream()
 8003658:	b510      	push	{r4, lr}
 800365a:	0004      	movs	r4, r0
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <_ZN4mbed6StreamD1Ev+0x28>)
 800365e:	001a      	movs	r2, r3
 8003660:	3208      	adds	r2, #8
 8003662:	6002      	str	r2, [r0, #0]
 8003664:	3368      	adds	r3, #104	; 0x68
 8003666:	6043      	str	r3, [r0, #4]
    fclose(_file);
 8003668:	6940      	ldr	r0, [r0, #20]
 800366a:	f003 f8fb 	bl	8006864 <fclose>
    virtual ~FileLike() {}
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <_ZN4mbed6StreamD1Ev+0x2c>)
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	3350      	adds	r3, #80	; 0x50
 8003674:	6063      	str	r3, [r4, #4]
 8003676:	1d20      	adds	r0, r4, #4
 8003678:	f7ff febe 	bl	80033f8 <_ZN4mbed8FileBaseD1Ev>
}
 800367c:	0020      	movs	r0, r4
 800367e:	bd10      	pop	{r4, pc}
 8003680:	0800843c 	.word	0x0800843c
 8003684:	080083e0 	.word	0x080083e0

08003688 <_ZN4mbed6Stream4putcEi>:
{
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	0004      	movs	r4, r0
 800368c:	000d      	movs	r5, r1
    lock();
 800368e:	6803      	ldr	r3, [r0, #0]
 8003690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003692:	4798      	blx	r3
    fflush(_file);
 8003694:	6960      	ldr	r0, [r4, #20]
 8003696:	f003 f9c7 	bl	8006a28 <fflush>
    int ret = std::fputc(c, _file);
 800369a:	6961      	ldr	r1, [r4, #20]
 800369c:	0028      	movs	r0, r5
 800369e:	f003 fb9d 	bl	8006ddc <fputc>
 80036a2:	0005      	movs	r5, r0
    unlock();
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a8:	0020      	movs	r0, r4
 80036aa:	4798      	blx	r3
}
 80036ac:	0028      	movs	r0, r5
 80036ae:	bd70      	pop	{r4, r5, r6, pc}

080036b0 <_ZN4mbed6Stream4getcEv>:
{
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	0004      	movs	r4, r0
    lock();
 80036b4:	6803      	ldr	r3, [r0, #0]
 80036b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b8:	4798      	blx	r3
    fflush(_file);
 80036ba:	6960      	ldr	r0, [r4, #20]
 80036bc:	f003 f9b4 	bl	8006a28 <fflush>
    int ret = mbed_getc(_file);
 80036c0:	6960      	ldr	r0, [r4, #20]
 80036c2:	f000 fcdd 	bl	8004080 <_ZN4mbed9mbed_getcEP7__sFILE>
 80036c6:	0005      	movs	r5, r0
    unlock();
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	0020      	movs	r0, r4
 80036ce:	4798      	blx	r3
}
 80036d0:	0028      	movs	r0, r5
 80036d2:	bd70      	pop	{r4, r5, r6, pc}

080036d4 <mbed_die>:
extern int stdio_uart_inited;
extern serial_t stdio_uart;
#endif

WEAK void mbed_die(void)
{
 80036d4:	b530      	push	{r4, r5, lr}
 80036d6:	b089      	sub	sp, #36	; 0x24
#if !defined (NRF51_H) && !defined(TARGET_EFM32)
    core_util_critical_section_enter();
 80036d8:	f000 f838 	bl	800374c <core_util_critical_section_enter>
#endif
    gpio_t led_err;
    gpio_init_out(&led_err, LED1);
 80036dc:	2105      	movs	r1, #5
 80036de:	a801      	add	r0, sp, #4
 80036e0:	f7ff fae0 	bl	8002ca4 <gpio_init_out>
 80036e4:	e021      	b.n	800372a <mbed_die+0x56>
        *obj->reg_set = obj->mask;
 80036e6:	9b03      	ldr	r3, [sp, #12]
 80036e8:	9a01      	ldr	r2, [sp, #4]
 80036ea:	601a      	str	r2, [r3, #0]

    while (1) {
        for (int i = 0; i < 4; ++i) {
            gpio_write(&led_err, 1);
            wait_ms(150);
 80036ec:	2096      	movs	r0, #150	; 0x96
 80036ee:	f000 fcf5 	bl	80040dc <wait_ms>
        *obj->reg_clr = obj->mask;
 80036f2:	9b04      	ldr	r3, [sp, #16]
 80036f4:	9a01      	ldr	r2, [sp, #4]
 80036f6:	601a      	str	r2, [r3, #0]
            gpio_write(&led_err, 0);
            wait_ms(150);
 80036f8:	2096      	movs	r0, #150	; 0x96
 80036fa:	f000 fcef 	bl	80040dc <wait_ms>
        for (int i = 0; i < 4; ++i) {
 80036fe:	3401      	adds	r4, #1
 8003700:	2c03      	cmp	r4, #3
 8003702:	ddf0      	ble.n	80036e6 <mbed_die+0x12>
 8003704:	2400      	movs	r4, #0
 8003706:	e00e      	b.n	8003726 <mbed_die+0x52>
        *obj->reg_set = obj->mask;
 8003708:	9b03      	ldr	r3, [sp, #12]
 800370a:	9a01      	ldr	r2, [sp, #4]
 800370c:	601a      	str	r2, [r3, #0]
        }

        for (int i = 0; i < 4; ++i) {
            gpio_write(&led_err, 1);
            wait_ms(400);
 800370e:	25c8      	movs	r5, #200	; 0xc8
 8003710:	006d      	lsls	r5, r5, #1
 8003712:	0028      	movs	r0, r5
 8003714:	f000 fce2 	bl	80040dc <wait_ms>
        *obj->reg_clr = obj->mask;
 8003718:	9b04      	ldr	r3, [sp, #16]
 800371a:	9a01      	ldr	r2, [sp, #4]
 800371c:	601a      	str	r2, [r3, #0]
            gpio_write(&led_err, 0);
            wait_ms(400);
 800371e:	0028      	movs	r0, r5
 8003720:	f000 fcdc 	bl	80040dc <wait_ms>
        for (int i = 0; i < 4; ++i) {
 8003724:	3401      	adds	r4, #1
 8003726:	2c03      	cmp	r4, #3
 8003728:	ddee      	ble.n	8003708 <mbed_die+0x34>
        for (int i = 0; i < 4; ++i) {
 800372a:	2400      	movs	r4, #0
 800372c:	e7e8      	b.n	8003700 <mbed_die+0x2c>

0800372e <core_util_are_interrupts_enabled>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372e:	f3ef 8310 	mrs	r3, PRIMASK
bool core_util_are_interrupts_enabled(void)
{
#if defined(__CORTEX_A9)
    return ((__get_CPSR() & 0x80) == 0);
#else
    return ((__get_PRIMASK() & 0x1) == 0);
 8003732:	2001      	movs	r0, #1
 8003734:	4018      	ands	r0, r3
 8003736:	4243      	negs	r3, r0
 8003738:	4158      	adcs	r0, r3
 800373a:	b2c0      	uxtb	r0, r0
#endif
}
 800373c:	4770      	bx	lr

0800373e <core_util_is_isr_active>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800373e:	f3ef 8005 	mrs	r0, IPSR
        case CPSR_M_SVC:
        default:
            return true;
    }
#else
    return (__get_IPSR() != 0U);
 8003742:	1e43      	subs	r3, r0, #1
 8003744:	4198      	sbcs	r0, r3
 8003746:	b2c0      	uxtb	r0, r0
#endif
}
 8003748:	4770      	bx	lr
	...

0800374c <core_util_critical_section_enter>:
{
    return hal_in_critical_section();
}

void core_util_critical_section_enter(void)
{
 800374c:	b510      	push	{r4, lr}
#else
    // If the reentrancy counter overflows something has gone badly wrong.
    MBED_ASSERT(critical_section_reentrancy_counter < UINT32_MAX);
#endif /* FEATURE_UVISOR */

    hal_critical_section_enter();
 800374e:	f7ff fa6f 	bl	8002c30 <hal_critical_section_enter>

    ++critical_section_reentrancy_counter;
 8003752:	4a02      	ldr	r2, [pc, #8]	; (800375c <core_util_critical_section_enter+0x10>)
 8003754:	6813      	ldr	r3, [r2, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	6013      	str	r3, [r2, #0]
}
 800375a:	bd10      	pop	{r4, pc}
 800375c:	2000099c 	.word	0x2000099c

08003760 <core_util_critical_section_exit>:

void core_util_critical_section_exit(void)
{
 8003760:	b510      	push	{r4, lr}
#ifdef FEATURE_UVISOR
#warning "core_util_critical_section_exit needs fixing to work from unprivileged code"
#endif /* FEATURE_UVISOR */

    // If critical_section_enter has not previously been called, do nothing
    if (critical_section_reentrancy_counter == 0) {
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <core_util_critical_section_exit+0x20>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d006      	beq.n	8003778 <core_util_critical_section_exit+0x18>
        return;
    }

    --critical_section_reentrancy_counter;
 800376a:	4b05      	ldr	r3, [pc, #20]	; (8003780 <core_util_critical_section_exit+0x20>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	3a01      	subs	r2, #1
 8003770:	601a      	str	r2, [r3, #0]

    if (critical_section_reentrancy_counter == 0) {
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d000      	beq.n	800377a <core_util_critical_section_exit+0x1a>
        hal_critical_section_exit();
    }
}
 8003778:	bd10      	pop	{r4, pc}
        hal_critical_section_exit();
 800377a:	f7ff fa6b 	bl	8002c54 <hal_critical_section_exit>
 800377e:	e7fb      	b.n	8003778 <core_util_critical_section_exit+0x18>
 8003780:	2000099c 	.word	0x2000099c

08003784 <core_util_atomic_incr_u16>:
    core_util_critical_section_exit();
    return newValue;
}

uint16_t core_util_atomic_incr_u16(volatile uint16_t *valuePtr, uint16_t delta)
{
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	0005      	movs	r5, r0
 8003788:	000c      	movs	r4, r1
    uint16_t newValue;
    core_util_critical_section_enter();
 800378a:	f7ff ffdf 	bl	800374c <core_util_critical_section_enter>
    newValue = *valuePtr + delta;
 800378e:	8829      	ldrh	r1, [r5, #0]
 8003790:	190c      	adds	r4, r1, r4
 8003792:	b2a4      	uxth	r4, r4
    *valuePtr = newValue;
 8003794:	802c      	strh	r4, [r5, #0]
    core_util_critical_section_exit();
 8003796:	f7ff ffe3 	bl	8003760 <core_util_critical_section_exit>
    return newValue;
}
 800379a:	0020      	movs	r0, r4
 800379c:	bd70      	pop	{r4, r5, r6, pc}

0800379e <core_util_atomic_decr_u16>:
    core_util_critical_section_exit();
    return newValue;
}

uint16_t core_util_atomic_decr_u16(volatile uint16_t *valuePtr, uint16_t delta)
{
 800379e:	b570      	push	{r4, r5, r6, lr}
 80037a0:	0005      	movs	r5, r0
 80037a2:	000e      	movs	r6, r1
    uint16_t newValue;
    core_util_critical_section_enter();
 80037a4:	f7ff ffd2 	bl	800374c <core_util_critical_section_enter>
    newValue = *valuePtr - delta;
 80037a8:	882c      	ldrh	r4, [r5, #0]
 80037aa:	1ba4      	subs	r4, r4, r6
 80037ac:	b2a4      	uxth	r4, r4
    *valuePtr = newValue;
 80037ae:	802c      	strh	r4, [r5, #0]
    core_util_critical_section_exit();
 80037b0:	f7ff ffd6 	bl	8003760 <core_util_critical_section_exit>
    return newValue;
}
 80037b4:	0020      	movs	r0, r4
 80037b6:	bd70      	pop	{r4, r5, r6, pc}

080037b8 <handle_error>:
    exit(1);
}

//Set an error status with the error handling system
static mbed_error_status_t handle_error(mbed_error_status_t error_status, unsigned int error_value, const char *filename, int line_number, void *caller)
{
 80037b8:	b530      	push	{r4, r5, lr}
 80037ba:	b08f      	sub	sp, #60	; 0x3c
 80037bc:	0004      	movs	r4, r0
 80037be:	000d      	movs	r5, r1
    mbed_error_ctx current_error_ctx;

    //Error status should always be < 0
    if (error_status >= 0) {
 80037c0:	2800      	cmp	r0, #0
 80037c2:	db00      	blt.n	80037c6 <handle_error+0xe>
        //This is a weird situation, someone called mbed_error with invalid error code.
        //We will still handle the situation but change the error code to ERROR_INVALID_ARGUMENT, atleast the context will have info on who called it
        error_status = MBED_ERROR_INVALID_ARGUMENT;
 80037c4:	4c16      	ldr	r4, [pc, #88]	; (8003820 <handle_error+0x68>)
    }

    //Prevent corruption by holding out other callers
    //and we also need this until we remove the "error" call completely
    while (error_in_progress == 1);
 80037c6:	4b17      	ldr	r3, [pc, #92]	; (8003824 <handle_error+0x6c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d0fb      	beq.n	80037c6 <handle_error+0xe>

    //Use critsect here, as we don't want inadvertant modification of this global variable
    core_util_critical_section_enter();
 80037ce:	f7ff ffbd 	bl	800374c <core_util_critical_section_enter>
    error_in_progress = 1;
 80037d2:	2201      	movs	r2, #1
 80037d4:	4b13      	ldr	r3, [pc, #76]	; (8003824 <handle_error+0x6c>)
 80037d6:	701a      	strb	r2, [r3, #0]
    core_util_critical_section_exit();
 80037d8:	f7ff ffc2 	bl	8003760 <core_util_critical_section_exit>

    //Increment error count
    error_count++;
 80037dc:	4a12      	ldr	r2, [pc, #72]	; (8003828 <handle_error+0x70>)
 80037de:	6813      	ldr	r3, [r2, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	6013      	str	r3, [r2, #0]

    //Clear the context capturing buffer
    memset(&current_error_ctx, sizeof(mbed_error_ctx), 0);
    //Capture error information
    current_error_ctx.error_status = error_status;
 80037e4:	9401      	str	r4, [sp, #4]
    current_error_ctx.error_address = (uint32_t)caller;
 80037e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037e8:	9202      	str	r2, [sp, #8]
    current_error_ctx.error_value = error_value;
 80037ea:	9503      	str	r5, [sp, #12]
    strncpy(current_error_ctx.error_filename, filename, MBED_CONF_PLATFORM_MAX_ERROR_FILENAME_LEN);
    current_error_ctx.error_line_number = line_number;
#endif

    //Capture the fist system error and store it
    if (error_count == 1) { //first error
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d010      	beq.n	8003812 <handle_error+0x5a>
        memcpy(&first_error_ctx, &current_error_ctx, sizeof(mbed_error_ctx));
    }

    //copy this error to last error
    memcpy(&last_error_ctx, &current_error_ctx, sizeof(mbed_error_ctx));
 80037f0:	2234      	movs	r2, #52	; 0x34
 80037f2:	a901      	add	r1, sp, #4
 80037f4:	480d      	ldr	r0, [pc, #52]	; (800382c <handle_error+0x74>)
 80037f6:	f004 f889 	bl	800790c <memcpy>
    //Log the error with error log
    mbed_error_hist_put(&current_error_ctx);
#endif

    //Call the error hook if available
    if (error_hook != NULL) {
 80037fa:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <handle_error+0x78>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <handle_error+0x4e>
        error_hook(&last_error_ctx);
 8003802:	480a      	ldr	r0, [pc, #40]	; (800382c <handle_error+0x74>)
 8003804:	4798      	blx	r3
    }

    error_in_progress = 0;
 8003806:	2200      	movs	r2, #0
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <handle_error+0x6c>)
 800380a:	701a      	strb	r2, [r3, #0]

    return MBED_SUCCESS;
}
 800380c:	2000      	movs	r0, #0
 800380e:	b00f      	add	sp, #60	; 0x3c
 8003810:	bd30      	pop	{r4, r5, pc}
        memcpy(&first_error_ctx, &current_error_ctx, sizeof(mbed_error_ctx));
 8003812:	2234      	movs	r2, #52	; 0x34
 8003814:	a901      	add	r1, sp, #4
 8003816:	4807      	ldr	r0, [pc, #28]	; (8003834 <handle_error+0x7c>)
 8003818:	f004 f878 	bl	800790c <memcpy>
 800381c:	e7e8      	b.n	80037f0 <handle_error+0x38>
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	80ff0101 	.word	0x80ff0101
 8003824:	200009a8 	.word	0x200009a8
 8003828:	200009a0 	.word	0x200009a0
 800382c:	200009e0 	.word	0x200009e0
 8003830:	200009a4 	.word	0x200009a4
 8003834:	200009ac 	.word	0x200009ac

08003838 <mbed_halt_system>:
{
 8003838:	b510      	push	{r4, lr}
    if (core_util_is_isr_active() || !core_util_are_interrupts_enabled()) {
 800383a:	f7ff ff80 	bl	800373e <core_util_is_isr_active>
 800383e:	2800      	cmp	r0, #0
 8003840:	d103      	bne.n	800384a <mbed_halt_system+0x12>
 8003842:	f7ff ff74 	bl	800372e <core_util_are_interrupts_enabled>
 8003846:	2800      	cmp	r0, #0
 8003848:	d101      	bne.n	800384e <mbed_halt_system+0x16>
            __WFI();
 800384a:	bf30      	wfi
 800384c:	e7fd      	b.n	800384a <mbed_halt_system+0x12>
        exit(1);
 800384e:	2001      	movs	r0, #1
 8003850:	f002 ff86 	bl	8006760 <exit>

08003854 <error>:
{
 8003854:	b40f      	push	{r0, r1, r2, r3}
 8003856:	b500      	push	{lr}
 8003858:	b083      	sub	sp, #12
 800385a:	4672      	mov	r2, lr
    if (error_in_progress) {
 800385c:	4b09      	ldr	r3, [pc, #36]	; (8003884 <error+0x30>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <error+0x18>
}
 8003864:	b003      	add	sp, #12
 8003866:	bc08      	pop	{r3}
 8003868:	b004      	add	sp, #16
 800386a:	4718      	bx	r3
    handle_error(MBED_ERROR_UNKNOWN, 0, NULL, 0, MBED_CALLER_ADDR());
 800386c:	2100      	movs	r1, #0
 800386e:	9200      	str	r2, [sp, #0]
 8003870:	000b      	movs	r3, r1
 8003872:	000a      	movs	r2, r1
 8003874:	4804      	ldr	r0, [pc, #16]	; (8003888 <error+0x34>)
 8003876:	f7ff ff9f 	bl	80037b8 <handle_error>
    error_in_progress = 1;
 800387a:	2001      	movs	r0, #1
 800387c:	4b01      	ldr	r3, [pc, #4]	; (8003884 <error+0x30>)
 800387e:	7018      	strb	r0, [r3, #0]
    exit(1);
 8003880:	f002 ff6e 	bl	8006760 <exit>
 8003884:	200009a8 	.word	0x200009a8
 8003888:	80ff0100 	.word	0x80ff0100

0800388c <mbed_error>:
    return handle_error(error_status, error_value, filename, line_number, MBED_CALLER_ADDR());
}

//Sets a fatal error, this function is marked WEAK to be able to override this for some tests
WEAK mbed_error_status_t mbed_error(mbed_error_status_t error_status, const char *error_msg, unsigned int error_value, const char *filename, int line_number)
{
 800388c:	b500      	push	{lr}
 800388e:	b083      	sub	sp, #12
 8003890:	0011      	movs	r1, r2
 8003892:	001a      	movs	r2, r3
    //set the error reported and then halt the system
    if (MBED_SUCCESS != handle_error(error_status, error_value, filename, line_number, MBED_CALLER_ADDR())) {
 8003894:	4673      	mov	r3, lr
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	9b04      	ldr	r3, [sp, #16]
 800389a:	f7ff ff8d 	bl	80037b8 <handle_error>
 800389e:	2800      	cmp	r0, #0
 80038a0:	d002      	beq.n	80038a8 <mbed_error+0x1c>
    //On fatal errors print the error context/report
    ERROR_REPORT(&last_error_ctx, error_msg);
    mbed_halt_system();

    return MBED_ERROR_FAILED_OPERATION;
}
 80038a2:	4802      	ldr	r0, [pc, #8]	; (80038ac <mbed_error+0x20>)
 80038a4:	b003      	add	sp, #12
 80038a6:	bd00      	pop	{pc}
    mbed_halt_system();
 80038a8:	f7ff ffc6 	bl	8003838 <mbed_halt_system>
 80038ac:	80ff010f 	.word	0x80ff010f

080038b0 <_ZN12DirectSerial4seekEli>:
    virtual ssize_t write(const void *buffer, size_t size);
    virtual ssize_t read(void *buffer, size_t size);
    virtual off_t seek(off_t offset, int whence = SEEK_SET)
    {
        return -ESPIPE;
    }
 80038b0:	201d      	movs	r0, #29
 80038b2:	4240      	negs	r0, r0
 80038b4:	4770      	bx	lr

080038b6 <_ZN12DirectSerial4sizeEv>:
    virtual off_t size()
    {
        return -EINVAL;
    }
 80038b6:	2016      	movs	r0, #22
 80038b8:	4240      	negs	r0, r0
 80038ba:	4770      	bx	lr

080038bc <_ZN12DirectSerial6isattyEv>:
    virtual int isatty()
    {
        return true;
    }
 80038bc:	2001      	movs	r0, #1
 80038be:	4770      	bx	lr

080038c0 <_ZN12DirectSerial5closeEv>:
    virtual int close()
    {
        return 0;
    }
 80038c0:	2000      	movs	r0, #0
 80038c2:	4770      	bx	lr

080038c4 <_ZL12convert_crlfi>:
#elif MBED_CONF_PLATFORM_STDIO_CONVERT_NEWLINES
    return fd < 3 && isatty(fd);
#else
    return false;
#endif
}
 80038c4:	2000      	movs	r0, #0
 80038c6:	4770      	bx	lr

080038c8 <_ZN12DirectSerialD1Ev>:
class DirectSerial : public FileHandle {
 80038c8:	4770      	bx	lr
	...

080038cc <_ZN12DirectSerial5writeEPKvj>:
{
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	000e      	movs	r6, r1
 80038d0:	0015      	movs	r5, r2
    for (size_t i = 0; i < size; i++) {
 80038d2:	2400      	movs	r4, #0
 80038d4:	42ac      	cmp	r4, r5
 80038d6:	d205      	bcs.n	80038e4 <_ZN12DirectSerial5writeEPKvj+0x18>
        serial_putc(&stdio_uart, buf[i]);
 80038d8:	5d31      	ldrb	r1, [r6, r4]
 80038da:	4803      	ldr	r0, [pc, #12]	; (80038e8 <_ZN12DirectSerial5writeEPKvj+0x1c>)
 80038dc:	f002 f97e 	bl	8005bdc <serial_putc>
    for (size_t i = 0; i < size; i++) {
 80038e0:	3401      	adds	r4, #1
 80038e2:	e7f7      	b.n	80038d4 <_ZN12DirectSerial5writeEPKvj+0x8>
}
 80038e4:	0028      	movs	r0, r5
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
 80038e8:	20000d04 	.word	0x20000d04

080038ec <_ZN12DirectSerial4readEPvj>:
{
 80038ec:	b510      	push	{r4, lr}
 80038ee:	000c      	movs	r4, r1
    if (size == 0) {
 80038f0:	2a00      	cmp	r2, #0
 80038f2:	d101      	bne.n	80038f8 <_ZN12DirectSerial4readEPvj+0xc>
        return 0;
 80038f4:	2000      	movs	r0, #0
}
 80038f6:	bd10      	pop	{r4, pc}
    buf[0] = serial_getc(&stdio_uart);
 80038f8:	4802      	ldr	r0, [pc, #8]	; (8003904 <_ZN12DirectSerial4readEPvj+0x18>)
 80038fa:	f002 f95b 	bl	8005bb4 <serial_getc>
 80038fe:	7020      	strb	r0, [r4, #0]
    return 1;
 8003900:	2001      	movs	r0, #1
 8003902:	e7f8      	b.n	80038f6 <_ZN12DirectSerial4readEPvj+0xa>
 8003904:	20000d04 	.word	0x20000d04

08003908 <_ZNK12DirectSerial4pollEs>:
{
 8003908:	b570      	push	{r4, r5, r6, lr}
    if ((events & POLLIN) && serial_readable(&stdio_uart)) {
 800390a:	b28c      	uxth	r4, r1
 800390c:	07e3      	lsls	r3, r4, #31
 800390e:	d40d      	bmi.n	800392c <_ZNK12DirectSerial4pollEs+0x24>
 8003910:	2300      	movs	r3, #0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d113      	bne.n	800393e <_ZNK12DirectSerial4pollEs+0x36>
    short revents = 0;
 8003916:	2500      	movs	r5, #0
    if ((events & POLLOUT) && serial_writable(&stdio_uart)) {
 8003918:	06e3      	lsls	r3, r4, #27
 800391a:	d412      	bmi.n	8003942 <_ZNK12DirectSerial4pollEs+0x3a>
 800391c:	2300      	movs	r3, #0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <_ZNK12DirectSerial4pollEs+0x20>
        revents |= POLLOUT;
 8003922:	2310      	movs	r3, #16
 8003924:	431d      	orrs	r5, r3
 8003926:	b22d      	sxth	r5, r5
}
 8003928:	0028      	movs	r0, r5
 800392a:	bd70      	pop	{r4, r5, r6, pc}
    if ((events & POLLIN) && serial_readable(&stdio_uart)) {
 800392c:	4809      	ldr	r0, [pc, #36]	; (8003954 <_ZNK12DirectSerial4pollEs+0x4c>)
 800392e:	f002 fd03 	bl	8006338 <serial_readable>
 8003932:	2800      	cmp	r0, #0
 8003934:	d001      	beq.n	800393a <_ZNK12DirectSerial4pollEs+0x32>
 8003936:	2301      	movs	r3, #1
 8003938:	e7eb      	b.n	8003912 <_ZNK12DirectSerial4pollEs+0xa>
 800393a:	2300      	movs	r3, #0
 800393c:	e7e9      	b.n	8003912 <_ZNK12DirectSerial4pollEs+0xa>
        revents |= POLLIN;
 800393e:	2501      	movs	r5, #1
 8003940:	e7ea      	b.n	8003918 <_ZNK12DirectSerial4pollEs+0x10>
    if ((events & POLLOUT) && serial_writable(&stdio_uart)) {
 8003942:	4804      	ldr	r0, [pc, #16]	; (8003954 <_ZNK12DirectSerial4pollEs+0x4c>)
 8003944:	f002 fd10 	bl	8006368 <serial_writable>
 8003948:	2800      	cmp	r0, #0
 800394a:	d001      	beq.n	8003950 <_ZNK12DirectSerial4pollEs+0x48>
 800394c:	2301      	movs	r3, #1
 800394e:	e7e6      	b.n	800391e <_ZNK12DirectSerial4pollEs+0x16>
 8003950:	2300      	movs	r3, #0
 8003952:	e7e4      	b.n	800391e <_ZNK12DirectSerial4pollEs+0x16>
 8003954:	20000d04 	.word	0x20000d04

08003958 <_ZL14unbind_from_fdiPN4mbed10FileHandleE>:
{
 8003958:	b510      	push	{r4, lr}
    if (filehandles[fd] == fh) {
 800395a:	0082      	lsls	r2, r0, #2
 800395c:	4b08      	ldr	r3, [pc, #32]	; (8003980 <_ZL14unbind_from_fdiPN4mbed10FileHandleE+0x28>)
 800395e:	58d3      	ldr	r3, [r2, r3]
 8003960:	428b      	cmp	r3, r1
 8003962:	d105      	bne.n	8003970 <_ZL14unbind_from_fdiPN4mbed10FileHandleE+0x18>
        filehandles[fd] = NULL;
 8003964:	0010      	movs	r0, r2
 8003966:	2200      	movs	r2, #0
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <_ZL14unbind_from_fdiPN4mbed10FileHandleE+0x28>)
 800396a:	50c2      	str	r2, [r0, r3]
        return 0;
 800396c:	2000      	movs	r0, #0
}
 800396e:	bd10      	pop	{r4, pc}
        errno = EBADF;
 8003970:	f002 fef0 	bl	8006754 <__errno>
 8003974:	2309      	movs	r3, #9
 8003976:	6003      	str	r3, [r0, #0]
        return -1;
 8003978:	2001      	movs	r0, #1
 800397a:	4240      	negs	r0, r0
 800397c:	e7f7      	b.n	800396e <_ZL14unbind_from_fdiPN4mbed10FileHandleE+0x16>
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	200000cc 	.word	0x200000cc

08003984 <_ZL18handle_open_errorsij>:
{
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	0005      	movs	r5, r0
 8003988:	000c      	movs	r4, r1
    errno = -error;
 800398a:	f002 fee3 	bl	8006754 <__errno>
 800398e:	426d      	negs	r5, r5
 8003990:	6005      	str	r5, [r0, #0]
    filehandles[filehandle_idx] = NULL;
 8003992:	00a4      	lsls	r4, r4, #2
 8003994:	2200      	movs	r2, #0
 8003996:	4b02      	ldr	r3, [pc, #8]	; (80039a0 <_ZL18handle_open_errorsij+0x1c>)
 8003998:	50e2      	str	r2, [r4, r3]
}
 800399a:	2001      	movs	r0, #1
 800399c:	4240      	negs	r0, r0
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	200000cc 	.word	0x200000cc

080039a4 <_ZL18reserve_filehandlev>:
{
 80039a4:	b510      	push	{r4, lr}
        if (NULL == _ptr) {
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <_ZL18reserve_filehandlev+0x64>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <_ZL18reserve_filehandlev+0x22>
        return _ptr;
 80039ae:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <_ZL18reserve_filehandlev+0x64>)
 80039b0:	6819      	ldr	r1, [r3, #0]
    for (fh_i = 3; fh_i < OPEN_MAX; fh_i++) {
 80039b2:	2003      	movs	r0, #3
 80039b4:	283f      	cmp	r0, #63	; 0x3f
 80039b6:	dc0a      	bgt.n	80039ce <_ZL18reserve_filehandlev+0x2a>
        if (filehandles[fh_i] == NULL) {
 80039b8:	0083      	lsls	r3, r0, #2
 80039ba:	4a14      	ldr	r2, [pc, #80]	; (8003a0c <_ZL18reserve_filehandlev+0x68>)
 80039bc:	589b      	ldr	r3, [r3, r2]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <_ZL18reserve_filehandlev+0x2a>
    for (fh_i = 3; fh_i < OPEN_MAX; fh_i++) {
 80039c2:	3001      	adds	r0, #1
 80039c4:	e7f6      	b.n	80039b4 <_ZL18reserve_filehandlev+0x10>
                _ptr = new (_data) T();
 80039c6:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <_ZL18reserve_filehandlev+0x64>)
 80039c8:	1d1a      	adds	r2, r3, #4
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	e7ef      	b.n	80039ae <_ZL18reserve_filehandlev+0xa>
    if (fh_i >= OPEN_MAX) {
 80039ce:	283f      	cmp	r0, #63	; 0x3f
 80039d0:	dc07      	bgt.n	80039e2 <_ZL18reserve_filehandlev+0x3e>
    filehandles[fh_i] = FILE_HANDLE_RESERVED;
 80039d2:	0083      	lsls	r3, r0, #2
 80039d4:	2401      	movs	r4, #1
 80039d6:	4264      	negs	r4, r4
 80039d8:	4a0c      	ldr	r2, [pc, #48]	; (8003a0c <_ZL18reserve_filehandlev+0x68>)
 80039da:	509c      	str	r4, [r3, r2]
        if (NULL == _ptr) {
 80039dc:	2900      	cmp	r1, #0
 80039de:	d00f      	beq.n	8003a00 <_ZL18reserve_filehandlev+0x5c>
}
 80039e0:	bd10      	pop	{r4, pc}
        errno = EMFILE;
 80039e2:	f002 feb7 	bl	8006754 <__errno>
 80039e6:	2318      	movs	r3, #24
 80039e8:	6003      	str	r3, [r0, #0]
 80039ea:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <_ZL18reserve_filehandlev+0x64>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <_ZL18reserve_filehandlev+0x54>
        return -1;
 80039f2:	2001      	movs	r0, #1
 80039f4:	4240      	negs	r0, r0
 80039f6:	e7f3      	b.n	80039e0 <_ZL18reserve_filehandlev+0x3c>
                _ptr = new (_data) T();
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <_ZL18reserve_filehandlev+0x64>)
 80039fa:	1d1a      	adds	r2, r3, #4
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e7f8      	b.n	80039f2 <_ZL18reserve_filehandlev+0x4e>
 8003a00:	4b01      	ldr	r3, [pc, #4]	; (8003a08 <_ZL18reserve_filehandlev+0x64>)
 8003a02:	1d1a      	adds	r2, r3, #4
 8003a04:	601a      	str	r2, [r3, #0]
    return fh_i;
 8003a06:	e7eb      	b.n	80039e0 <_ZL18reserve_filehandlev+0x3c>
 8003a08:	20000a98 	.word	0x20000a98
 8003a0c:	200000cc 	.word	0x200000cc

08003a10 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE>:
{
 8003a10:	b530      	push	{r4, r5, lr}
        if (NULL == _ptr) {
 8003a12:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x40>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x12>
        return _ptr;
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x40>)
 8003a1c:	681d      	ldr	r5, [r3, #0]
    for (unsigned int fh_i = 0; fh_i < sizeof(filehandles) / sizeof(*filehandles); fh_i++) {
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e004      	b.n	8003a2c <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x1c>
                _ptr = new (_data) T();
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x40>)
 8003a24:	1d1a      	adds	r2, r3, #4
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e7f7      	b.n	8003a1a <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0xa>
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	2b3f      	cmp	r3, #63	; 0x3f
 8003a2e:	d808      	bhi.n	8003a42 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x32>
        if (filehandles[fh_i] == file) {
 8003a30:	009a      	lsls	r2, r3, #2
 8003a32:	4908      	ldr	r1, [pc, #32]	; (8003a54 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x44>)
 8003a34:	5852      	ldr	r2, [r2, r1]
 8003a36:	4282      	cmp	r2, r0
 8003a38:	d1f7      	bne.n	8003a2a <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x1a>
            filehandles[fh_i] = NULL;
 8003a3a:	009a      	lsls	r2, r3, #2
 8003a3c:	2400      	movs	r4, #0
 8003a3e:	5054      	str	r4, [r2, r1]
 8003a40:	e7f3      	b.n	8003a2a <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x1a>
        if (NULL == _ptr) {
 8003a42:	2d00      	cmp	r5, #0
 8003a44:	d000      	beq.n	8003a48 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x38>
}
 8003a46:	bd30      	pop	{r4, r5, pc}
                _ptr = new (_data) T();
 8003a48:	4b01      	ldr	r3, [pc, #4]	; (8003a50 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x40>)
 8003a4a:	1d1a      	adds	r2, r3, #4
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e7fa      	b.n	8003a46 <_ZN4mbed17remove_filehandleEPNS_10FileHandleE+0x36>
 8003a50:	20000a98 	.word	0x20000a98
 8003a54:	200000cc 	.word	0x200000cc

08003a58 <_ZN12DirectSerialC1E7PinNameS0_i>:
DirectSerial::DirectSerial(PinName tx, PinName rx, int baud)
 8003a58:	b570      	push	{r4, r5, r6, lr}
 8003a5a:	0004      	movs	r4, r0
 8003a5c:	001d      	movs	r5, r3
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <_ZN12DirectSerialC1E7PinNameS0_i+0x2c>)
 8003a60:	3308      	adds	r3, #8
 8003a62:	6003      	str	r3, [r0, #0]
    if (stdio_uart_inited) {
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <_ZN12DirectSerialC1E7PinNameS0_i+0x30>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <_ZN12DirectSerialC1E7PinNameS0_i+0x18>
}
 8003a6c:	0020      	movs	r0, r4
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
    serial_init(&stdio_uart, tx, rx);
 8003a70:	4e06      	ldr	r6, [pc, #24]	; (8003a8c <_ZN12DirectSerialC1E7PinNameS0_i+0x34>)
 8003a72:	0030      	movs	r0, r6
 8003a74:	f002 fcec 	bl	8006450 <serial_init>
    serial_baud(&stdio_uart, baud);
 8003a78:	0029      	movs	r1, r5
 8003a7a:	0030      	movs	r0, r6
 8003a7c:	f002 fcc2 	bl	8006404 <serial_baud>
 8003a80:	e7f4      	b.n	8003a6c <_ZN12DirectSerialC1E7PinNameS0_i+0x14>
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	080084ac 	.word	0x080084ac
 8003a88:	20000b0c 	.word	0x20000b0c
 8003a8c:	20000d04 	.word	0x20000d04

08003a90 <_ZL15default_consolev>:
{
 8003a90:	b510      	push	{r4, lr}
    static DirectSerial console(STDIO_UART_TX, STDIO_UART_RX, MBED_CONF_PLATFORM_STDIO_BAUD_RATE);
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <_ZL15default_consolev+0x30>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	07db      	lsls	r3, r3, #31
 8003a98:	d501      	bpl.n	8003a9e <_ZL15default_consolev+0xe>
}
 8003a9a:	480a      	ldr	r0, [pc, #40]	; (8003ac4 <_ZL15default_consolev+0x34>)
 8003a9c:	bd10      	pop	{r4, pc}
    static DirectSerial console(STDIO_UART_TX, STDIO_UART_RX, MBED_CONF_PLATFORM_STDIO_BAUD_RATE);
 8003a9e:	4c09      	ldr	r4, [pc, #36]	; (8003ac4 <_ZL15default_consolev+0x34>)
 8003aa0:	2396      	movs	r3, #150	; 0x96
 8003aa2:	019b      	lsls	r3, r3, #6
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	0020      	movs	r0, r4
 8003aaa:	f7ff ffd5 	bl	8003a58 <_ZN12DirectSerialC1E7PinNameS0_i>
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <_ZL15default_consolev+0x30>)
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <_ZL15default_consolev+0x38>)
 8003ab6:	4905      	ldr	r1, [pc, #20]	; (8003acc <_ZL15default_consolev+0x3c>)
 8003ab8:	0020      	movs	r0, r4
 8003aba:	f000 fa9f 	bl	8003ffc <__aeabi_atexit>
 8003abe:	e7ec      	b.n	8003a9a <_ZL15default_consolev+0xa>
 8003ac0:	20000a14 	.word	0x20000a14
 8003ac4:	20000aa0 	.word	0x20000aa0
 8003ac8:	200000c0 	.word	0x200000c0
 8003acc:	080038c9 	.word	0x080038c9

08003ad0 <_ZN4mbed28mbed_target_override_consoleEi>:
}
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	4770      	bx	lr

08003ad4 <_ZN4mbed21mbed_override_consoleEi>:
}
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	4770      	bx	lr

08003ad8 <_ZL11get_consolei>:
{
 8003ad8:	b510      	push	{r4, lr}
 8003ada:	0004      	movs	r4, r0
    FileHandle *fh = mbed_override_console(fd);
 8003adc:	f7ff fffa 	bl	8003ad4 <_ZN4mbed21mbed_override_consoleEi>
    if (fh) {
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d000      	beq.n	8003ae6 <_ZL11get_consolei+0xe>
}
 8003ae4:	bd10      	pop	{r4, pc}
    fh = mbed_target_override_console(fd);
 8003ae6:	0020      	movs	r0, r4
 8003ae8:	f7ff fff2 	bl	8003ad0 <_ZN4mbed28mbed_target_override_consoleEi>
    if (fh) {
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d1f9      	bne.n	8003ae4 <_ZL11get_consolei+0xc>
    return default_console();
 8003af0:	f7ff ffce 	bl	8003a90 <_ZL15default_consolev>
 8003af4:	e7f6      	b.n	8003ae4 <_ZL11get_consolei+0xc>
	...

08003af8 <_ZL7get_fhci>:
{
 8003af8:	b510      	push	{r4, lr}
 8003afa:	0004      	movs	r4, r0
    if (fd >= OPEN_MAX) {
 8003afc:	283f      	cmp	r0, #63	; 0x3f
 8003afe:	dc0e      	bgt.n	8003b1e <_ZL7get_fhci+0x26>
    FileHandle *fh = filehandles[fd];
 8003b00:	0083      	lsls	r3, r0, #2
 8003b02:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <_ZL7get_fhci+0x2c>)
 8003b04:	5898      	ldr	r0, [r3, r2]
    if (fh == FILE_HANDLE_RESERVED && fd < 3) {
 8003b06:	1c43      	adds	r3, r0, #1
 8003b08:	d000      	beq.n	8003b0c <_ZL7get_fhci+0x14>
}
 8003b0a:	bd10      	pop	{r4, pc}
    if (fh == FILE_HANDLE_RESERVED && fd < 3) {
 8003b0c:	2c02      	cmp	r4, #2
 8003b0e:	dcfc      	bgt.n	8003b0a <_ZL7get_fhci+0x12>
        filehandles[fd] = fh = get_console(fd);
 8003b10:	0020      	movs	r0, r4
 8003b12:	f7ff ffe1 	bl	8003ad8 <_ZL11get_consolei>
 8003b16:	00a4      	lsls	r4, r4, #2
 8003b18:	4b02      	ldr	r3, [pc, #8]	; (8003b24 <_ZL7get_fhci+0x2c>)
 8003b1a:	50e0      	str	r0, [r4, r3]
 8003b1c:	e7f5      	b.n	8003b0a <_ZL7get_fhci+0x12>
        return NULL;
 8003b1e:	2000      	movs	r0, #0
 8003b20:	e7f3      	b.n	8003b0a <_ZL7get_fhci+0x12>
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	200000cc 	.word	0x200000cc

08003b28 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE>:
{
 8003b28:	b510      	push	{r4, lr}
 8003b2a:	0004      	movs	r4, r0
    int fildes = reserve_filehandle();
 8003b2c:	f7ff ff3a 	bl	80039a4 <_ZL18reserve_filehandlev>
    if (fildes < 0) {
 8003b30:	2800      	cmp	r0, #0
 8003b32:	db07      	blt.n	8003b44 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE+0x1c>
    filehandles[fildes] = fh;
 8003b34:	0083      	lsls	r3, r0, #2
 8003b36:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE+0x20>)
 8003b38:	509c      	str	r4, [r3, r2]
    stdio_in_prev[fildes] = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	4a03      	ldr	r2, [pc, #12]	; (8003b4c <_ZN4mbed10bind_to_fdEPNS_10FileHandleE+0x24>)
 8003b3e:	5413      	strb	r3, [r2, r0]
    stdio_out_prev[fildes] = 0;
 8003b40:	4a03      	ldr	r2, [pc, #12]	; (8003b50 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE+0x28>)
 8003b42:	5413      	strb	r3, [r2, r0]
}
 8003b44:	bd10      	pop	{r4, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	200000cc 	.word	0x200000cc
 8003b4c:	20000a18 	.word	0x20000a18
 8003b50:	20000a58 	.word	0x20000a58

08003b54 <open>:
{
 8003b54:	b40e      	push	{r1, r2, r3}
 8003b56:	b570      	push	{r4, r5, r6, lr}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	0005      	movs	r5, r0
    int fildes = reserve_filehandle();
 8003b5c:	f7ff ff22 	bl	80039a4 <_ZL18reserve_filehandlev>
 8003b60:	1e04      	subs	r4, r0, #0
    if (fildes < 0) {
 8003b62:	db1c      	blt.n	8003b9e <open+0x4a>
    FileHandle *res = NULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	9303      	str	r3, [sp, #12]
    FilePath path(name);
 8003b68:	0029      	movs	r1, r5
 8003b6a:	a801      	add	r0, sp, #4
 8003b6c:	f7ff fca0 	bl	80034b0 <_ZN4mbed8FilePathC1EPKc>
    if (!path.exists()) {
 8003b70:	a801      	add	r0, sp, #4
 8003b72:	f7ff fcf6 	bl	8003562 <_ZN4mbed8FilePath6existsEv>
 8003b76:	2800      	cmp	r0, #0
 8003b78:	d017      	beq.n	8003baa <open+0x56>
    if (path.isFile()) {
 8003b7a:	a801      	add	r0, sp, #4
 8003b7c:	f7ff fcd6 	bl	800352c <_ZN4mbed8FilePath6isFileEv>
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d018      	beq.n	8003bb6 <open+0x62>
        res = path.file();
 8003b84:	a801      	add	r0, sp, #4
 8003b86:	f7ff fcdd 	bl	8003544 <_ZN4mbed8FilePath4fileEv>
 8003b8a:	9003      	str	r0, [sp, #12]
    filehandles[fildes] = res;
 8003b8c:	00a3      	lsls	r3, r4, #2
 8003b8e:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <open+0x9c>)
 8003b90:	9903      	ldr	r1, [sp, #12]
 8003b92:	5099      	str	r1, [r3, r2]
    stdio_in_prev[fildes] = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <open+0xa0>)
 8003b98:	5513      	strb	r3, [r2, r4]
    stdio_out_prev[fildes] = 0;
 8003b9a:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <open+0xa4>)
 8003b9c:	5513      	strb	r3, [r2, r4]
}
 8003b9e:	0020      	movs	r0, r4
 8003ba0:	b005      	add	sp, #20
 8003ba2:	bc70      	pop	{r4, r5, r6}
 8003ba4:	bc08      	pop	{r3}
 8003ba6:	b003      	add	sp, #12
 8003ba8:	4718      	bx	r3
        return handle_open_errors(-ENODEV, fildes);
 8003baa:	0021      	movs	r1, r4
 8003bac:	3813      	subs	r0, #19
 8003bae:	f7ff fee9 	bl	8003984 <_ZL18handle_open_errorsij>
 8003bb2:	0004      	movs	r4, r0
 8003bb4:	e7f3      	b.n	8003b9e <open+0x4a>
        FileSystemHandle *fs = path.fileSystem();
 8003bb6:	a801      	add	r0, sp, #4
 8003bb8:	f7ff fca9 	bl	800350e <_ZN4mbed8FilePath10fileSystemEv>
 8003bbc:	1e05      	subs	r5, r0, #0
        if (fs == NULL) {
 8003bbe:	d010      	beq.n	8003be2 <open+0x8e>
        int err = fs->open(&res, path.fileName(), oflag);
 8003bc0:	6803      	ldr	r3, [r0, #0]
 8003bc2:	689e      	ldr	r6, [r3, #8]
 8003bc4:	a801      	add	r0, sp, #4
 8003bc6:	f7ff fc93 	bl	80034f0 <_ZN4mbed8FilePath8fileNameEv>
 8003bca:	0002      	movs	r2, r0
 8003bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bce:	a903      	add	r1, sp, #12
 8003bd0:	0028      	movs	r0, r5
 8003bd2:	47b0      	blx	r6
        if (err) {
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d0d9      	beq.n	8003b8c <open+0x38>
            return handle_open_errors(err, fildes);
 8003bd8:	0021      	movs	r1, r4
 8003bda:	f7ff fed3 	bl	8003984 <_ZL18handle_open_errorsij>
 8003bde:	0004      	movs	r4, r0
 8003be0:	e7dd      	b.n	8003b9e <open+0x4a>
            return handle_open_errors(-ENODEV, fildes);
 8003be2:	0021      	movs	r1, r4
 8003be4:	2013      	movs	r0, #19
 8003be6:	4240      	negs	r0, r0
 8003be8:	f7ff fecc 	bl	8003984 <_ZL18handle_open_errorsij>
 8003bec:	0004      	movs	r4, r0
 8003bee:	e7d6      	b.n	8003b9e <open+0x4a>
 8003bf0:	200000cc 	.word	0x200000cc
 8003bf4:	20000a18 	.word	0x20000a18
 8003bf8:	20000a58 	.word	0x20000a58

08003bfc <_open>:
{
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	0005      	movs	r5, r0
 8003c02:	000e      	movs	r6, r1
    if (std::strcmp(name, __stdin_name) == 0) {
 8003c04:	4918      	ldr	r1, [pc, #96]	; (8003c68 <_open+0x6c>)
 8003c06:	f7fc fa7f 	bl	8000108 <strcmp>
 8003c0a:	1e04      	subs	r4, r0, #0
 8003c0c:	d015      	beq.n	8003c3a <_open+0x3e>
    } else if (std::strcmp(name, __stdout_name) == 0) {
 8003c0e:	4917      	ldr	r1, [pc, #92]	; (8003c6c <_open+0x70>)
 8003c10:	0028      	movs	r0, r5
 8003c12:	f7fc fa79 	bl	8000108 <strcmp>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d013      	beq.n	8003c42 <_open+0x46>
    } else if (std::strcmp(name, __stderr_name) == 0) {
 8003c1a:	4915      	ldr	r1, [pc, #84]	; (8003c70 <_open+0x74>)
 8003c1c:	0028      	movs	r0, r5
 8003c1e:	f7fc fa73 	bl	8000108 <strcmp>
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d012      	beq.n	8003c4c <_open+0x50>
    if (name[0] == '@') {
 8003c26:	782b      	ldrb	r3, [r5, #0]
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d016      	beq.n	8003c5a <_open+0x5e>
    posix &= ~O_BINARY;
 8003c2c:	4911      	ldr	r1, [pc, #68]	; (8003c74 <_open+0x78>)
 8003c2e:	4031      	ands	r1, r6
    return open(name, openflags_to_posix(openflags));
 8003c30:	0028      	movs	r0, r5
 8003c32:	f7ff ff8f 	bl	8003b54 <open>
 8003c36:	0004      	movs	r4, r0
 8003c38:	e00c      	b.n	8003c54 <_open+0x58>
        get_fhc(STDIN_FILENO);
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f7ff ff5c 	bl	8003af8 <_ZL7get_fhci>
        return STDIN_FILENO;
 8003c40:	e008      	b.n	8003c54 <_open+0x58>
        get_fhc(STDOUT_FILENO);
 8003c42:	3001      	adds	r0, #1
 8003c44:	f7ff ff58 	bl	8003af8 <_ZL7get_fhci>
        return STDOUT_FILENO;
 8003c48:	2401      	movs	r4, #1
 8003c4a:	e003      	b.n	8003c54 <_open+0x58>
        get_fhc(STDERR_FILENO);
 8003c4c:	3002      	adds	r0, #2
 8003c4e:	f7ff ff53 	bl	8003af8 <_ZL7get_fhci>
        return STDERR_FILENO;
 8003c52:	2402      	movs	r4, #2
}
 8003c54:	0020      	movs	r0, r4
 8003c56:	b002      	add	sp, #8
 8003c58:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(&fd, name + 1, sizeof fd);
 8003c5a:	1c69      	adds	r1, r5, #1
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	a801      	add	r0, sp, #4
 8003c60:	f003 fe54 	bl	800790c <memcpy>
        return fd;
 8003c64:	9c01      	ldr	r4, [sp, #4]
 8003c66:	e7f5      	b.n	8003c54 <_open+0x58>
 8003c68:	08008504 	.word	0x08008504
 8003c6c:	0800850c 	.word	0x0800850c
 8003c70:	080084fc 	.word	0x080084fc
 8003c74:	ffff7fff 	.word	0xffff7fff

08003c78 <close>:
{
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	0004      	movs	r4, r0
    FileHandle *fhc = get_fhc(fildes);
 8003c7c:	f7ff ff3c 	bl	8003af8 <_ZL7get_fhci>
    filehandles[fildes] = NULL;
 8003c80:	00a4      	lsls	r4, r4, #2
 8003c82:	2200      	movs	r2, #0
 8003c84:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <close+0x40>)
 8003c86:	50e2      	str	r2, [r4, r3]
    if (fhc == NULL) {
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d006      	beq.n	8003c9a <close+0x22>
    int err = fhc->close();
 8003c8c:	6803      	ldr	r3, [r0, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	4798      	blx	r3
 8003c92:	1e04      	subs	r4, r0, #0
    if (err < 0) {
 8003c94:	db08      	blt.n	8003ca8 <close+0x30>
        return 0;
 8003c96:	2000      	movs	r0, #0
}
 8003c98:	bd10      	pop	{r4, pc}
        errno = EBADF;
 8003c9a:	f002 fd5b 	bl	8006754 <__errno>
 8003c9e:	2309      	movs	r3, #9
 8003ca0:	6003      	str	r3, [r0, #0]
        return -1;
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	4240      	negs	r0, r0
 8003ca6:	e7f7      	b.n	8003c98 <close+0x20>
        errno = -err;
 8003ca8:	f002 fd54 	bl	8006754 <__errno>
 8003cac:	4264      	negs	r4, r4
 8003cae:	6004      	str	r4, [r0, #0]
        return -1;
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	4240      	negs	r0, r0
 8003cb4:	e7f0      	b.n	8003c98 <close+0x20>
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	200000cc 	.word	0x200000cc

08003cbc <_close>:
{
 8003cbc:	b510      	push	{r4, lr}
    return close(fh);
 8003cbe:	f7ff ffdb 	bl	8003c78 <close>
}
 8003cc2:	bd10      	pop	{r4, pc}

08003cc4 <write>:
    return written;
#endif
}

extern "C" ssize_t write(int fildes, const void *buf, size_t length)
{
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	000c      	movs	r4, r1
 8003cc8:	0015      	movs	r5, r2

    FileHandle *fhc = get_fhc(fildes);
 8003cca:	f7ff ff15 	bl	8003af8 <_ZL7get_fhci>
    if (fhc == NULL) {
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d008      	beq.n	8003ce4 <write+0x20>
        errno = EBADF;
        return -1;
    }

    ssize_t ret = fhc->write(buf, length);
 8003cd2:	6803      	ldr	r3, [r0, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	002a      	movs	r2, r5
 8003cd8:	0021      	movs	r1, r4
 8003cda:	4798      	blx	r3
 8003cdc:	1e04      	subs	r4, r0, #0
    if (ret < 0) {
 8003cde:	db08      	blt.n	8003cf2 <write+0x2e>
        errno = -ret;
        return -1;
    } else {
        return ret;
    }
}
 8003ce0:	0020      	movs	r0, r4
 8003ce2:	bd70      	pop	{r4, r5, r6, pc}
        errno = EBADF;
 8003ce4:	f002 fd36 	bl	8006754 <__errno>
 8003ce8:	2309      	movs	r3, #9
 8003cea:	6003      	str	r3, [r0, #0]
        return -1;
 8003cec:	2401      	movs	r4, #1
 8003cee:	4264      	negs	r4, r4
 8003cf0:	e7f6      	b.n	8003ce0 <write+0x1c>
        errno = -ret;
 8003cf2:	f002 fd2f 	bl	8006754 <__errno>
 8003cf6:	4264      	negs	r4, r4
 8003cf8:	6004      	str	r4, [r0, #0]
        return -1;
 8003cfa:	2401      	movs	r4, #1
 8003cfc:	4264      	negs	r4, r4
 8003cfe:	e7ef      	b.n	8003ce0 <write+0x1c>

08003d00 <_write>:
{
 8003d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d02:	46d6      	mov	lr, sl
 8003d04:	4647      	mov	r7, r8
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	9001      	str	r0, [sp, #4]
 8003d0c:	4688      	mov	r8, r1
 8003d0e:	4692      	mov	sl, r2
    if (length > SSIZE_MAX) {
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	db0a      	blt.n	8003d2a <_write+0x2a>
    if (convert_crlf(fh)) {
 8003d14:	9c01      	ldr	r4, [sp, #4]
 8003d16:	0020      	movs	r0, r4
 8003d18:	f7ff fdd4 	bl	80038c4 <_ZL12convert_crlfi>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d033      	beq.n	8003d88 <_write+0x88>
        char prev = stdio_out_prev[fh];
 8003d20:	4b2c      	ldr	r3, [pc, #176]	; (8003dd4 <_write+0xd4>)
 8003d22:	5d1f      	ldrb	r7, [r3, r4]
        for (ssize_t cur = 0; cur < slength; cur++) {
 8003d24:	2400      	movs	r4, #0
    ssize_t written = 0;
 8003d26:	2600      	movs	r6, #0
 8003d28:	e014      	b.n	8003d54 <_write+0x54>
        errno = EINVAL;
 8003d2a:	f002 fd13 	bl	8006754 <__errno>
 8003d2e:	2316      	movs	r3, #22
 8003d30:	6003      	str	r3, [r0, #0]
        return -1;
 8003d32:	2601      	movs	r6, #1
 8003d34:	4276      	negs	r6, r6
 8003d36:	e02a      	b.n	8003d8e <_write+0x8e>
                r = write(fh, "\r", 1);
 8003d38:	2201      	movs	r2, #1
 8003d3a:	4927      	ldr	r1, [pc, #156]	; (8003dd8 <_write+0xd8>)
 8003d3c:	9f01      	ldr	r7, [sp, #4]
 8003d3e:	0038      	movs	r0, r7
 8003d40:	f7ff ffc0 	bl	8003cc4 <write>
                if (r < 0) {
 8003d44:	2800      	cmp	r0, #0
 8003d46:	db3f      	blt.n	8003dc8 <_write+0xc8>
                if (r < 1) {
 8003d48:	dd21      	ble.n	8003d8e <_write+0x8e>
                stdio_out_prev[fh] = '\r';
 8003d4a:	220d      	movs	r2, #13
 8003d4c:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <_write+0xd4>)
 8003d4e:	55da      	strb	r2, [r3, r7]
            prev = buffer[cur];
 8003d50:	782f      	ldrb	r7, [r5, #0]
        for (ssize_t cur = 0; cur < slength; cur++) {
 8003d52:	3401      	adds	r4, #1
 8003d54:	4554      	cmp	r4, sl
 8003d56:	da18      	bge.n	8003d8a <_write+0x8a>
            if (buffer[cur] == '\n' && prev != '\r') {
 8003d58:	4643      	mov	r3, r8
 8003d5a:	191d      	adds	r5, r3, r4
 8003d5c:	782b      	ldrb	r3, [r5, #0]
 8003d5e:	2b0a      	cmp	r3, #10
 8003d60:	d1f6      	bne.n	8003d50 <_write+0x50>
 8003d62:	2f0d      	cmp	r7, #13
 8003d64:	d0f4      	beq.n	8003d50 <_write+0x50>
                if (cur > written) {
 8003d66:	42a6      	cmp	r6, r4
 8003d68:	dae6      	bge.n	8003d38 <_write+0x38>
                    r = write(fh, buffer + written, cur - written);
 8003d6a:	4643      	mov	r3, r8
 8003d6c:	1999      	adds	r1, r3, r6
 8003d6e:	1ba2      	subs	r2, r4, r6
 8003d70:	9801      	ldr	r0, [sp, #4]
 8003d72:	f7ff ffa7 	bl	8003cc4 <write>
                    if (r < 0) {
 8003d76:	2800      	cmp	r0, #0
 8003d78:	db23      	blt.n	8003dc2 <_write+0xc2>
                    written += r;
 8003d7a:	1836      	adds	r6, r6, r0
                    if (written < cur) {
 8003d7c:	42b4      	cmp	r4, r6
 8003d7e:	dc06      	bgt.n	8003d8e <_write+0x8e>
                    stdio_out_prev[fh] = prev;
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <_write+0xd4>)
 8003d82:	9a01      	ldr	r2, [sp, #4]
 8003d84:	549f      	strb	r7, [r3, r2]
 8003d86:	e7d7      	b.n	8003d38 <_write+0x38>
    ssize_t written = 0;
 8003d88:	2600      	movs	r6, #0
    if (written < slength) {
 8003d8a:	4556      	cmp	r6, sl
 8003d8c:	db05      	blt.n	8003d9a <_write+0x9a>
}
 8003d8e:	0030      	movs	r0, r6
 8003d90:	b003      	add	sp, #12
 8003d92:	bc0c      	pop	{r2, r3}
 8003d94:	4690      	mov	r8, r2
 8003d96:	469a      	mov	sl, r3
 8003d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ssize_t r = write(fh, buffer + written, slength - written);
 8003d9a:	4643      	mov	r3, r8
 8003d9c:	1999      	adds	r1, r3, r6
 8003d9e:	4653      	mov	r3, sl
 8003da0:	1b9a      	subs	r2, r3, r6
 8003da2:	9c01      	ldr	r4, [sp, #4]
 8003da4:	0020      	movs	r0, r4
 8003da6:	f7ff ff8d 	bl	8003cc4 <write>
        if (r < 0) {
 8003daa:	2800      	cmp	r0, #0
 8003dac:	db0f      	blt.n	8003dce <_write+0xce>
        written += r;
 8003dae:	1836      	adds	r6, r6, r0
        if (written > 0) {
 8003db0:	2e00      	cmp	r6, #0
 8003db2:	ddec      	ble.n	8003d8e <_write+0x8e>
            stdio_out_prev[fh] = buffer[written - 1];
 8003db4:	4643      	mov	r3, r8
 8003db6:	199b      	adds	r3, r3, r6
 8003db8:	3b01      	subs	r3, #1
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <_write+0xd4>)
 8003dbe:	551a      	strb	r2, [r3, r4]
 8003dc0:	e7e5      	b.n	8003d8e <_write+0x8e>
                        return -1;
 8003dc2:	2601      	movs	r6, #1
 8003dc4:	4276      	negs	r6, r6
 8003dc6:	e7e2      	b.n	8003d8e <_write+0x8e>
                    return -1;
 8003dc8:	2601      	movs	r6, #1
 8003dca:	4276      	negs	r6, r6
 8003dcc:	e7df      	b.n	8003d8e <_write+0x8e>
            return -1;
 8003dce:	2601      	movs	r6, #1
 8003dd0:	4276      	negs	r6, r6
 8003dd2:	e7dc      	b.n	8003d8e <_write+0x8e>
 8003dd4:	20000a58 	.word	0x20000a58
 8003dd8:	08008514 	.word	0x08008514

08003ddc <read>:
    return bytes_read;
#endif
}

extern "C" ssize_t read(int fildes, void *buf, size_t length)
{
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	000c      	movs	r4, r1
 8003de0:	0015      	movs	r5, r2

    FileHandle *fhc = get_fhc(fildes);
 8003de2:	f7ff fe89 	bl	8003af8 <_ZL7get_fhci>
    if (fhc == NULL) {
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d008      	beq.n	8003dfc <read+0x20>
        errno = EBADF;
        return -1;
    }

    ssize_t ret = fhc->read(buf, length);
 8003dea:	6803      	ldr	r3, [r0, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	002a      	movs	r2, r5
 8003df0:	0021      	movs	r1, r4
 8003df2:	4798      	blx	r3
 8003df4:	1e04      	subs	r4, r0, #0
    if (ret < 0) {
 8003df6:	db08      	blt.n	8003e0a <read+0x2e>
        errno = -ret;
        return -1;
    } else {
        return ret;
    }
}
 8003df8:	0020      	movs	r0, r4
 8003dfa:	bd70      	pop	{r4, r5, r6, pc}
        errno = EBADF;
 8003dfc:	f002 fcaa 	bl	8006754 <__errno>
 8003e00:	2309      	movs	r3, #9
 8003e02:	6003      	str	r3, [r0, #0]
        return -1;
 8003e04:	2401      	movs	r4, #1
 8003e06:	4264      	negs	r4, r4
 8003e08:	e7f6      	b.n	8003df8 <read+0x1c>
        errno = -ret;
 8003e0a:	f002 fca3 	bl	8006754 <__errno>
 8003e0e:	4264      	negs	r4, r4
 8003e10:	6004      	str	r4, [r0, #0]
        return -1;
 8003e12:	2401      	movs	r4, #1
 8003e14:	4264      	negs	r4, r4
 8003e16:	e7ef      	b.n	8003df8 <read+0x1c>

08003e18 <_read>:
{
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	0004      	movs	r4, r0
 8003e1e:	000d      	movs	r5, r1
 8003e20:	1e16      	subs	r6, r2, #0
    if (length > SSIZE_MAX) {
 8003e22:	db09      	blt.n	8003e38 <_read+0x20>
    if (convert_crlf(fh)) {
 8003e24:	f7ff fd4e 	bl	80038c4 <_ZL12convert_crlfi>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d122      	bne.n	8003e72 <_read+0x5a>
        bytes_read = read(fh, buffer, length);
 8003e2c:	0032      	movs	r2, r6
 8003e2e:	0029      	movs	r1, r5
 8003e30:	0020      	movs	r0, r4
 8003e32:	f7ff ffd3 	bl	8003ddc <read>
 8003e36:	e037      	b.n	8003ea8 <_read+0x90>
        errno = EINVAL;
 8003e38:	f002 fc8c 	bl	8006754 <__errno>
 8003e3c:	2316      	movs	r3, #22
 8003e3e:	6003      	str	r3, [r0, #0]
        return -1;
 8003e40:	2001      	movs	r0, #1
 8003e42:	4240      	negs	r0, r0
 8003e44:	e030      	b.n	8003ea8 <_read+0x90>
            if ((c == '\r' && stdio_in_prev[fh] != '\n') ||
 8003e46:	4a1b      	ldr	r2, [pc, #108]	; (8003eb4 <_read+0x9c>)
 8003e48:	5d12      	ldrb	r2, [r2, r4]
 8003e4a:	2a0a      	cmp	r2, #10
 8003e4c:	d01f      	beq.n	8003e8e <_read+0x76>
                stdio_in_prev[fh] = c;
 8003e4e:	4a19      	ldr	r2, [pc, #100]	; (8003eb4 <_read+0x9c>)
 8003e50:	5513      	strb	r3, [r2, r4]
                *buffer = '\n';
 8003e52:	230a      	movs	r3, #10
 8003e54:	702b      	strb	r3, [r5, #0]
                break;
 8003e56:	e026      	b.n	8003ea6 <_read+0x8e>
                    (c == '\n' && stdio_in_prev[fh] != '\r')) {
 8003e58:	4a16      	ldr	r2, [pc, #88]	; (8003eb4 <_read+0x9c>)
 8003e5a:	5d12      	ldrb	r2, [r2, r4]
 8003e5c:	2a0d      	cmp	r2, #13
 8003e5e:	d018      	beq.n	8003e92 <_read+0x7a>
 8003e60:	e7f5      	b.n	8003e4e <_read+0x36>
            } else if ((c == '\r' && stdio_in_prev[fh] == '\n') ||
 8003e62:	2b0a      	cmp	r3, #10
 8003e64:	d11c      	bne.n	8003ea0 <_read+0x88>
                       (c == '\n' && stdio_in_prev[fh] == '\r')) {
 8003e66:	4a13      	ldr	r2, [pc, #76]	; (8003eb4 <_read+0x9c>)
 8003e68:	5d12      	ldrb	r2, [r2, r4]
 8003e6a:	2a0d      	cmp	r2, #13
 8003e6c:	d118      	bne.n	8003ea0 <_read+0x88>
                stdio_in_prev[fh] = c;
 8003e6e:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <_read+0x9c>)
 8003e70:	5513      	strb	r3, [r2, r4]
            ssize_t r = read(fh, &c, 1);
 8003e72:	2201      	movs	r2, #1
 8003e74:	466b      	mov	r3, sp
 8003e76:	1dd9      	adds	r1, r3, #7
 8003e78:	0020      	movs	r0, r4
 8003e7a:	f7ff ffaf 	bl	8003ddc <read>
            if (r < 0) {
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	db14      	blt.n	8003eac <_read+0x94>
            if (r == 0) {
 8003e82:	d011      	beq.n	8003ea8 <_read+0x90>
            if ((c == '\r' && stdio_in_prev[fh] != '\n') ||
 8003e84:	466b      	mov	r3, sp
 8003e86:	3307      	adds	r3, #7
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b0d      	cmp	r3, #13
 8003e8c:	d0db      	beq.n	8003e46 <_read+0x2e>
 8003e8e:	2b0a      	cmp	r3, #10
 8003e90:	d0e2      	beq.n	8003e58 <_read+0x40>
            } else if ((c == '\r' && stdio_in_prev[fh] == '\n') ||
 8003e92:	2b0d      	cmp	r3, #13
 8003e94:	d1e5      	bne.n	8003e62 <_read+0x4a>
 8003e96:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <_read+0x9c>)
 8003e98:	5d12      	ldrb	r2, [r2, r4]
 8003e9a:	2a0a      	cmp	r2, #10
 8003e9c:	d1e1      	bne.n	8003e62 <_read+0x4a>
 8003e9e:	e7e6      	b.n	8003e6e <_read+0x56>
                stdio_in_prev[fh] = c;
 8003ea0:	4a04      	ldr	r2, [pc, #16]	; (8003eb4 <_read+0x9c>)
 8003ea2:	5513      	strb	r3, [r2, r4]
                *buffer = c;
 8003ea4:	702b      	strb	r3, [r5, #0]
        bytes_read = 1;
 8003ea6:	2001      	movs	r0, #1
}
 8003ea8:	b002      	add	sp, #8
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
                return -1;
 8003eac:	2001      	movs	r0, #1
 8003eae:	4240      	negs	r0, r0
 8003eb0:	e7fa      	b.n	8003ea8 <_read+0x90>
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	20000a18 	.word	0x20000a18

08003eb8 <isatty>:
{
    return isatty(fh);
}

extern "C" int isatty(int fildes)
{
 8003eb8:	b510      	push	{r4, lr}
    FileHandle *fhc = get_fhc(fildes);
 8003eba:	f7ff fe1d 	bl	8003af8 <_ZL7get_fhci>
    if (fhc == NULL) {
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d006      	beq.n	8003ed0 <isatty+0x18>
        errno = EBADF;
        return 0;
    }

    int tty = fhc->isatty();
 8003ec2:	6803      	ldr	r3, [r0, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	4798      	blx	r3
 8003ec8:	1e04      	subs	r4, r0, #0
    if (tty < 0) {
 8003eca:	db07      	blt.n	8003edc <isatty+0x24>
        errno = -tty;
        return 0;
    } else {
        return tty;
    }
}
 8003ecc:	0020      	movs	r0, r4
 8003ece:	bd10      	pop	{r4, pc}
        errno = EBADF;
 8003ed0:	f002 fc40 	bl	8006754 <__errno>
 8003ed4:	2309      	movs	r3, #9
 8003ed6:	6003      	str	r3, [r0, #0]
        return 0;
 8003ed8:	2400      	movs	r4, #0
 8003eda:	e7f7      	b.n	8003ecc <isatty+0x14>
        errno = -tty;
 8003edc:	f002 fc3a 	bl	8006754 <__errno>
 8003ee0:	4264      	negs	r4, r4
 8003ee2:	6004      	str	r4, [r0, #0]
        return 0;
 8003ee4:	2400      	movs	r4, #0
 8003ee6:	e7f1      	b.n	8003ecc <isatty+0x14>

08003ee8 <_isatty>:
{
 8003ee8:	b510      	push	{r4, lr}
    return isatty(fh);
 8003eea:	f7ff ffe5 	bl	8003eb8 <isatty>
}
 8003eee:	bd10      	pop	{r4, pc}

08003ef0 <lseek>:
    }
    return off;
}

extern "C" off_t lseek(int fildes, off_t offset, int whence)
{
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	000c      	movs	r4, r1
 8003ef4:	0015      	movs	r5, r2
    FileHandle *fhc = get_fhc(fildes);
 8003ef6:	f7ff fdff 	bl	8003af8 <_ZL7get_fhci>
    if (fhc == NULL) {
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d008      	beq.n	8003f10 <lseek+0x20>
        errno = EBADF;
        return -1;
    }

    off_t off = fhc->seek(offset, whence);
 8003efe:	6803      	ldr	r3, [r0, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	002a      	movs	r2, r5
 8003f04:	0021      	movs	r1, r4
 8003f06:	4798      	blx	r3
 8003f08:	1e04      	subs	r4, r0, #0
    if (off < 0) {
 8003f0a:	db08      	blt.n	8003f1e <lseek+0x2e>
        errno = -off;
        return -1;
    }
    return off;
}
 8003f0c:	0020      	movs	r0, r4
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
        errno = EBADF;
 8003f10:	f002 fc20 	bl	8006754 <__errno>
 8003f14:	2309      	movs	r3, #9
 8003f16:	6003      	str	r3, [r0, #0]
        return -1;
 8003f18:	2401      	movs	r4, #1
 8003f1a:	4264      	negs	r4, r4
 8003f1c:	e7f6      	b.n	8003f0c <lseek+0x1c>
        errno = -off;
 8003f1e:	f002 fc19 	bl	8006754 <__errno>
 8003f22:	4264      	negs	r4, r4
 8003f24:	6004      	str	r4, [r0, #0]
        return -1;
 8003f26:	2401      	movs	r4, #1
 8003f28:	4264      	negs	r4, r4
 8003f2a:	e7ef      	b.n	8003f0c <lseek+0x1c>

08003f2c <_lseek>:
{
 8003f2c:	b510      	push	{r4, lr}
    off_t off = lseek(fh, offset, whence);
 8003f2e:	f7ff ffdf 	bl	8003ef0 <lseek>
}
 8003f32:	bd10      	pop	{r4, pc}

08003f34 <fstat>:
    return fstat(fh, st);
}
#endif

extern "C" int fstat(int fildes, struct stat *st)
{
 8003f34:	b570      	push	{r4, r5, r6, lr}
 8003f36:	000d      	movs	r5, r1
    FileHandle *fhc = get_fhc(fildes);
 8003f38:	f7ff fdde 	bl	8003af8 <_ZL7get_fhci>
 8003f3c:	1e04      	subs	r4, r0, #0
    if (fhc == NULL) {
 8003f3e:	d00e      	beq.n	8003f5e <fstat+0x2a>
        errno = EBADF;
        return -1;
    }

    st->st_mode = fhc->isatty() ? S_IFCHR : S_IFREG;
 8003f40:	6803      	ldr	r3, [r0, #0]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	4798      	blx	r3
 8003f46:	2800      	cmp	r0, #0
 8003f48:	d010      	beq.n	8003f6c <fstat+0x38>
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	019b      	lsls	r3, r3, #6
 8003f4e:	606b      	str	r3, [r5, #4]
    st->st_size = fhc->size();
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	0020      	movs	r0, r4
 8003f56:	4798      	blx	r3
 8003f58:	6128      	str	r0, [r5, #16]
    return 0;
 8003f5a:	2000      	movs	r0, #0
}
 8003f5c:	bd70      	pop	{r4, r5, r6, pc}
        errno = EBADF;
 8003f5e:	f002 fbf9 	bl	8006754 <__errno>
 8003f62:	2309      	movs	r3, #9
 8003f64:	6003      	str	r3, [r0, #0]
        return -1;
 8003f66:	2001      	movs	r0, #1
 8003f68:	4240      	negs	r0, r0
 8003f6a:	e7f7      	b.n	8003f5c <fstat+0x28>
    st->st_mode = fhc->isatty() ? S_IFCHR : S_IFREG;
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	e7ed      	b.n	8003f4e <fstat+0x1a>

08003f72 <_fstat>:
{
 8003f72:	b510      	push	{r4, lr}
    return fstat(fh, st);
 8003f74:	f7ff ffde 	bl	8003f34 <fstat>
}
 8003f78:	bd10      	pop	{r4, pc}

08003f7a <__cxa_pure_virtual>:
    MBED_ERROR1(MBED_MAKE_ERROR(MBED_MODULE_PLATFORM, MBED_ERROR_CODE_CLIB_EXCEPTION), "Exception", 0);
}
}
extern "C" WEAK void __cxa_pure_virtual(void);
extern "C" WEAK void __cxa_pure_virtual(void)
{
 8003f7a:	b510      	push	{r4, lr}
    exit(1);
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f002 fbef 	bl	8006760 <exit>
	...

08003f84 <_sbrk>:
extern "C" uint32_t __end__;
// Weak attribute allows user to override, e.g. to use external RAM for dynamic memory.
extern "C" WEAK caddr_t _sbrk(int incr)
{
    static unsigned char *heap = (unsigned char *)&__end__;
    unsigned char        *prev_heap = heap;
 8003f84:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <_sbrk+0x40>)
 8003f86:	681b      	ldr	r3, [r3, #0]
    unsigned char        *new_heap = heap + incr;
 8003f88:	1818      	adds	r0, r3, r0
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8003f8a:	f3ef 8208 	mrs	r2, MSP

#if defined(TARGET_CORTEX_A)
    if (new_heap >= (unsigned char *)&__HeapLimit) {    /* __HeapLimit is end of heap section */
#else
    if (new_heap >= (unsigned char *)__get_MSP()) {
 8003f8e:	4290      	cmp	r0, r2
 8003f90:	d20c      	bcs.n	8003fac <_sbrk+0x28>
        errno = ENOMEM;
        return (caddr_t) -1;
    }

    // Additional heap checking if set
    if (mbed_heap_size && (new_heap >= mbed_heap_start + mbed_heap_size)) {
 8003f92:	4a0d      	ldr	r2, [pc, #52]	; (8003fc8 <_sbrk+0x44>)
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	2a00      	cmp	r2, #0
 8003f98:	d004      	beq.n	8003fa4 <_sbrk+0x20>
 8003f9a:	490c      	ldr	r1, [pc, #48]	; (8003fcc <_sbrk+0x48>)
 8003f9c:	6809      	ldr	r1, [r1, #0]
 8003f9e:	188a      	adds	r2, r1, r2
 8003fa0:	4290      	cmp	r0, r2
 8003fa2:	d209      	bcs.n	8003fb8 <_sbrk+0x34>
        errno = ENOMEM;
        return (caddr_t) -1;
    }

    heap = new_heap;
 8003fa4:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <_sbrk+0x40>)
 8003fa6:	6010      	str	r0, [r2, #0]
    return (caddr_t) prev_heap;
 8003fa8:	0018      	movs	r0, r3
}
 8003faa:	4770      	bx	lr
        errno = ENOMEM;
 8003fac:	220c      	movs	r2, #12
 8003fae:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <_sbrk+0x4c>)
 8003fb0:	601a      	str	r2, [r3, #0]
        return (caddr_t) -1;
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	4240      	negs	r0, r0
 8003fb6:	e7f8      	b.n	8003faa <_sbrk+0x26>
        errno = ENOMEM;
 8003fb8:	220c      	movs	r2, #12
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <_sbrk+0x4c>)
 8003fbc:	601a      	str	r2, [r3, #0]
        return (caddr_t) -1;
 8003fbe:	2001      	movs	r0, #1
 8003fc0:	4240      	negs	r0, r0
 8003fc2:	e7f2      	b.n	8003faa <_sbrk+0x26>
 8003fc4:	200001cc 	.word	0x200001cc
 8003fc8:	20000aa4 	.word	0x20000aa4
 8003fcc:	20000aa8 	.word	0x20000aa8
 8003fd0:	20000da8 	.word	0x20000da8

08003fd4 <_exit>:
#endif
#endif

#if defined(TOOLCHAIN_GCC_ARM) || defined(TOOLCHAIN_GCC_CR)
extern "C" void _exit(int return_code)
{
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	0005      	movs	r5, r0
{
#endif

#if DEVICE_STDIO_MESSAGES
#if MBED_CONF_PLATFORM_STDIO_FLUSH_AT_EXIT
    fflush(stdout);
 8003fd8:	4c07      	ldr	r4, [pc, #28]	; (8003ff8 <_exit+0x24>)
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	6898      	ldr	r0, [r3, #8]
 8003fde:	f002 fd23 	bl	8006a28 <fflush>
    fflush(stderr);
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	68d8      	ldr	r0, [r3, #12]
 8003fe6:	f002 fd1f 	bl	8006a28 <fflush>
#if DEVICE_SEMIHOST
    if (mbed_interface_connected()) {
        semihost_exit();
    }
#endif
    if (return_code) {
 8003fea:	2d00      	cmp	r5, #0
 8003fec:	d100      	bne.n	8003ff0 <_exit+0x1c>
 8003fee:	e7fe      	b.n	8003fee <_exit+0x1a>
        mbed_die();
 8003ff0:	f7ff fb70 	bl	80036d4 <mbed_die>
 8003ff4:	e7fb      	b.n	8003fee <_exit+0x1a>
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	200001d4 	.word	0x200001d4

08003ffc <__aeabi_atexit>:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/6449.html
extern "C" {
    int __aeabi_atexit(void *object, void (*dtor)(void * /*this*/), void *handle)
    {
        return 1;
    }
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	4770      	bx	lr

08004000 <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>:


namespace mbed {

void mbed_set_unbuffered_stream(std::FILE *_file)
{
 8004000:	b510      	push	{r4, lr}
#if defined (__ICCARM__)
    char buf[2];
    std::setvbuf(_file, buf, _IONBF, NULL);
#else
    setbuf(_file, NULL);
 8004002:	2100      	movs	r1, #0
 8004004:	f003 fdde 	bl	8007bc4 <setbuf>
#endif
}
 8004008:	bd10      	pop	{r4, pc}

0800400a <fdopen>:
{
 800400a:	b530      	push	{r4, r5, lr}
 800400c:	b085      	sub	sp, #20
 800400e:	9001      	str	r0, [sp, #4]
 8004010:	000d      	movs	r5, r1
    buf[0] = '@';
 8004012:	ac02      	add	r4, sp, #8
 8004014:	2340      	movs	r3, #64	; 0x40
 8004016:	7023      	strb	r3, [r4, #0]
    memcpy(buf + 1, &fildes, sizeof fildes);
 8004018:	2204      	movs	r2, #4
 800401a:	a901      	add	r1, sp, #4
 800401c:	2009      	movs	r0, #9
 800401e:	4468      	add	r0, sp
 8004020:	f003 fc74 	bl	800790c <memcpy>
    std::FILE *stream = std::fopen(buf, mode);
 8004024:	0029      	movs	r1, r5
 8004026:	0020      	movs	r0, r4
 8004028:	f002 fe94 	bl	8006d54 <fopen>
 800402c:	1e04      	subs	r4, r0, #0
    if (stream && isatty(fildes)) {
 800402e:	d00a      	beq.n	8004046 <fdopen+0x3c>
 8004030:	9801      	ldr	r0, [sp, #4]
 8004032:	f7ff ff41 	bl	8003eb8 <isatty>
 8004036:	2800      	cmp	r0, #0
 8004038:	d007      	beq.n	800404a <fdopen+0x40>
 800403a:	2301      	movs	r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <fdopen+0x44>
}
 8004040:	0020      	movs	r0, r4
 8004042:	b005      	add	sp, #20
 8004044:	bd30      	pop	{r4, r5, pc}
    if (stream && isatty(fildes)) {
 8004046:	2300      	movs	r3, #0
 8004048:	e7f8      	b.n	800403c <fdopen+0x32>
 800404a:	2300      	movs	r3, #0
 800404c:	e7f6      	b.n	800403c <fdopen+0x32>
        mbed_set_unbuffered_stream(stream);
 800404e:	0020      	movs	r0, r4
 8004050:	f7ff ffd6 	bl	8004000 <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>
    return stream;
 8004054:	e7f4      	b.n	8004040 <fdopen+0x36>

08004056 <_ZN4mbed6fdopenEPNS_10FileHandleEPKc>:
{
 8004056:	b570      	push	{r4, r5, r6, lr}
 8004058:	0006      	movs	r6, r0
 800405a:	000d      	movs	r5, r1
    int fd = bind_to_fd(fh);
 800405c:	f7ff fd64 	bl	8003b28 <_ZN4mbed10bind_to_fdEPNS_10FileHandleE>
 8004060:	1e04      	subs	r4, r0, #0
    if (!fd) {
 8004062:	d00b      	beq.n	800407c <_ZN4mbed6fdopenEPNS_10FileHandleEPKc+0x26>
    std::FILE *stream = ::fdopen(fd, mode);
 8004064:	0029      	movs	r1, r5
 8004066:	f7ff ffd0 	bl	800400a <fdopen>
 800406a:	1e05      	subs	r5, r0, #0
    if (!stream) {
 800406c:	d001      	beq.n	8004072 <_ZN4mbed6fdopenEPNS_10FileHandleEPKc+0x1c>
}
 800406e:	0028      	movs	r0, r5
 8004070:	bd70      	pop	{r4, r5, r6, pc}
        unbind_from_fd(fd, fh);
 8004072:	0031      	movs	r1, r6
 8004074:	0020      	movs	r0, r4
 8004076:	f7ff fc6f 	bl	8003958 <_ZL14unbind_from_fdiPN4mbed10FileHandleE>
 800407a:	e7f8      	b.n	800406e <_ZN4mbed6fdopenEPNS_10FileHandleEPKc+0x18>
        return NULL;
 800407c:	2500      	movs	r5, #0
 800407e:	e7f6      	b.n	800406e <_ZN4mbed6fdopenEPNS_10FileHandleEPKc+0x18>

08004080 <_ZN4mbed9mbed_getcEP7__sFILE>:

int mbed_getc(std::FILE *_file)
{
 8004080:	b510      	push	{r4, lr}
        _file->_Rend = _file->_Wend;
        _file->_Next = _file->_Wend;
    }
    return res;
#else
    return std::fgetc(_file);
 8004082:	f002 fd27 	bl	8006ad4 <fgetc>
#endif
}
 8004086:	bd10      	pop	{r4, pc}

08004088 <__rtos_malloc_lock>:
#elif defined(__CC_ARM)
// Do nothing
#elif defined (__GNUC__)
struct _reent;
// Stub out locks when an rtos is not present
extern "C" WEAK void __rtos_malloc_lock(struct _reent *_r) {}
 8004088:	4770      	bx	lr

0800408a <__rtos_malloc_unlock>:
extern "C" WEAK void __rtos_malloc_unlock(struct _reent *_r) {}
 800408a:	4770      	bx	lr

0800408c <__malloc_lock>:
extern "C" WEAK void __rtos_env_lock(struct _reent *_r) {}
extern "C" WEAK void __rtos_env_unlock(struct _reent *_r) {}

extern "C" void __malloc_lock(struct _reent *_r)
{
 800408c:	b510      	push	{r4, lr}
    __rtos_malloc_lock(_r);
 800408e:	f7ff fffb 	bl	8004088 <__rtos_malloc_lock>
}
 8004092:	bd10      	pop	{r4, pc}

08004094 <__malloc_unlock>:

extern "C" void __malloc_unlock(struct _reent *_r)
{
 8004094:	b510      	push	{r4, lr}
    __rtos_malloc_unlock(_r);
 8004096:	f7ff fff8 	bl	800408a <__rtos_malloc_unlock>
}
 800409a:	bd10      	pop	{r4, pc}

0800409c <_ZdlPv>:
{
    return malloc(count);
}

void operator delete (void *ptr)
{
 800409c:	b510      	push	{r4, lr}
    free(ptr);
 800409e:	f003 fa27 	bl	80074f0 <free>
}
 80040a2:	bd10      	pop	{r4, pc}

080040a4 <_ZN12DirectSerialD0Ev>:
class DirectSerial : public FileHandle {
 80040a4:	b510      	push	{r4, lr}
 80040a6:	0004      	movs	r4, r0
 80040a8:	f7ff fff8 	bl	800409c <_ZdlPv>
 80040ac:	0020      	movs	r0, r4
 80040ae:	bd10      	pop	{r4, pc}

080040b0 <software_init_hook_rtos>:
}

MBED_WEAK void software_init_hook_rtos()
{
    // Nothing by default
}
 80040b0:	4770      	bx	lr

080040b2 <software_init_hook>:
#elif defined (__GNUC__)

extern int __real_main(void);

void software_init_hook(void)
{
 80040b2:	b510      	push	{r4, lr}
    mbed_copy_nvic();
    mbed_sdk_init();
 80040b4:	f001 fe86 	bl	8005dc4 <mbed_sdk_init>
    software_init_hook_rtos();
 80040b8:	f7ff fffa 	bl	80040b0 <software_init_hook_rtos>
}
 80040bc:	bd10      	pop	{r4, pc}

080040be <wait_us>:
{
    wait_us(ms * 1000);
}

void wait_us(int us)
{
 80040be:	b570      	push	{r4, r5, r6, lr}
 80040c0:	0006      	movs	r6, r0
    const ticker_data_t *const ticker = get_us_ticker_data();
 80040c2:	f7ff f927 	bl	8003314 <get_us_ticker_data>
 80040c6:	0004      	movs	r4, r0
    uint32_t start = ticker_read(ticker);
 80040c8:	f7ff f920 	bl	800330c <ticker_read>
 80040cc:	0005      	movs	r5, r0
    while ((ticker_read(ticker) - start) < (uint32_t)us);
 80040ce:	0020      	movs	r0, r4
 80040d0:	f7ff f91c 	bl	800330c <ticker_read>
 80040d4:	1b40      	subs	r0, r0, r5
 80040d6:	42b0      	cmp	r0, r6
 80040d8:	d3f9      	bcc.n	80040ce <wait_us+0x10>
}
 80040da:	bd70      	pop	{r4, r5, r6, pc}

080040dc <wait_ms>:
{
 80040dc:	b510      	push	{r4, lr}
    wait_us(ms * 1000);
 80040de:	23fa      	movs	r3, #250	; 0xfa
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4358      	muls	r0, r3
 80040e4:	f7ff ffeb 	bl	80040be <wait_us>
}
 80040e8:	bd10      	pop	{r4, pc}
	...

080040ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040ec:	480e      	ldr	r0, [pc, #56]	; (8004128 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040f0:	480e      	ldr	r0, [pc, #56]	; (800412c <LoopForever+0x6>)
  ldr r1, =_edata
 80040f2:	490f      	ldr	r1, [pc, #60]	; (8004130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040f4:	4a0f      	ldr	r2, [pc, #60]	; (8004134 <LoopForever+0xe>)
  movs r3, #0
 80040f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040f8:	e002      	b.n	8004100 <LoopCopyDataInit>

080040fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040fe:	3304      	adds	r3, #4

08004100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004104:	d3f9      	bcc.n	80040fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004106:	4a0c      	ldr	r2, [pc, #48]	; (8004138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004108:	4c0c      	ldr	r4, [pc, #48]	; (800413c <LoopForever+0x16>)
  movs r3, #0
 800410a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800410c:	e001      	b.n	8004112 <LoopFillZerobss>

0800410e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800410e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004110:	3204      	adds	r2, #4

08004112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004114:	d3fb      	bcc.n	800410e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004116:	f000 f83b 	bl	8004190 <SystemInit>
  bl  software_init_hook
 800411a:	f7ff ffca 	bl	80040b2 <software_init_hook>
  bl  __libc_init_array
 800411e:	f003 f941 	bl	80073a4 <__libc_init_array>
  bl main
 8004122:	f7fe fa1b 	bl	800255c <main>

08004126 <LoopForever>:

LoopForever:
    b LoopForever
 8004126:	e7fe      	b.n	8004126 <LoopForever>
  ldr   r0, =_estack
 8004128:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800412c:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 8004130:	200006ec 	.word	0x200006ec
  ldr r2, =_sidata
 8004134:	08008b3c 	.word	0x08008b3c
  ldr r2, =_sbss
 8004138:	200006f0 	.word	0x200006f0
  ldr r4, =_ebss
 800413c:	20000dac 	.word	0x20000dac

08004140 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004140:	e7fe      	b.n	8004140 <ADC1_IRQHandler>
	...

08004144 <NVIC_SetVector>:

#define NVIC_RAM_VECTOR_ADDRESS   (0x20000000)  // Vectors positioned at start of RAM
#define NVIC_FLASH_VECTOR_ADDRESS (0x08000000)  // Initial vector position in flash


void NVIC_SetVector(IRQn_Type IRQn, uint32_t vector) {
 8004144:	b530      	push	{r4, r5, lr}
    int i;
    
    // Copy and switch to dynamic vectors if first time called
    if ((SYSCFG->CFGR1 & SYSCFG_CFGR1_MEM_MODE) != SYSCFG_CFGR1_MEM_MODE) {
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <NVIC_SetVector+0x44>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	2303      	movs	r3, #3
 800414c:	4013      	ands	r3, r2
 800414e:	2b03      	cmp	r3, #3
 8004150:	d014      	beq.n	800417c <NVIC_SetVector+0x38>
 8004152:	2300      	movs	r3, #0
 8004154:	e00b      	b.n	800416e <NVIC_SetVector+0x2a>
        uint32_t *old_vectors = (uint32_t *)NVIC_FLASH_VECTOR_ADDRESS;
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
            *((uint32_t *)(NVIC_RAM_VECTOR_ADDRESS + (i*4))) = old_vectors[i];
 8004156:	2280      	movs	r2, #128	; 0x80
 8004158:	0512      	lsls	r2, r2, #20
 800415a:	189a      	adds	r2, r3, r2
 800415c:	0092      	lsls	r2, r2, #2
 800415e:	009c      	lsls	r4, r3, #2
 8004160:	2580      	movs	r5, #128	; 0x80
 8004162:	052d      	lsls	r5, r5, #20
 8004164:	46ac      	mov	ip, r5
 8004166:	4464      	add	r4, ip
 8004168:	6824      	ldr	r4, [r4, #0]
 800416a:	6014      	str	r4, [r2, #0]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
 800416c:	3301      	adds	r3, #1
 800416e:	2b2f      	cmp	r3, #47	; 0x2f
 8004170:	ddf1      	ble.n	8004156 <NVIC_SetVector+0x12>
        }
        SYSCFG->CFGR1 |= SYSCFG_CFGR1_MEM_MODE; // Embedded SRAM mapped at 0x00000000
 8004172:	4a05      	ldr	r2, [pc, #20]	; (8004188 <NVIC_SetVector+0x44>)
 8004174:	6813      	ldr	r3, [r2, #0]
 8004176:	2403      	movs	r4, #3
 8004178:	4323      	orrs	r3, r4
 800417a:	6013      	str	r3, [r2, #0]
    }

    // Set the vector
    *((uint32_t *)(NVIC_RAM_VECTOR_ADDRESS + (IRQn*4) + (NVIC_USER_IRQ_OFFSET*4))) = vector;
 800417c:	4b03      	ldr	r3, [pc, #12]	; (800418c <NVIC_SetVector+0x48>)
 800417e:	469c      	mov	ip, r3
 8004180:	4460      	add	r0, ip
 8004182:	0080      	lsls	r0, r0, #2
 8004184:	6001      	str	r1, [r0, #0]
}
 8004186:	bd30      	pop	{r4, r5, pc}
 8004188:	40010000 	.word	0x40010000
 800418c:	08000010 	.word	0x08000010

08004190 <SystemInit>:
  */
void SystemInit(void)
{
    /* Reset the RCC clock configuration to the default reset state ------------*/
    /* Set HSION bit */
    RCC->CR |= (uint32_t)0x00000001U;
 8004190:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <SystemInit+0x54>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	2101      	movs	r1, #1
 8004196:	430a      	orrs	r2, r1
 8004198:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
    /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
    RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
    /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
    RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	4812      	ldr	r0, [pc, #72]	; (80041e8 <SystemInit+0x58>)
 800419e:	4002      	ands	r2, r0
 80041a0:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */

    /* Reset HSEON, CSSON and PLLON bits */
    RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4811      	ldr	r0, [pc, #68]	; (80041ec <SystemInit+0x5c>)
 80041a6:	4002      	ands	r2, r0
 80041a8:	601a      	str	r2, [r3, #0]

    /* Reset HSEBYP bit */
    RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4810      	ldr	r0, [pc, #64]	; (80041f0 <SystemInit+0x60>)
 80041ae:	4002      	ands	r2, r0
 80041b0:	601a      	str	r2, [r3, #0]

    /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
    RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	480f      	ldr	r0, [pc, #60]	; (80041f4 <SystemInit+0x64>)
 80041b6:	4002      	ands	r2, r0
 80041b8:	605a      	str	r2, [r3, #4]

    /* Reset PREDIV[3:0] bits */
    RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80041ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041bc:	200f      	movs	r0, #15
 80041be:	4382      	bics	r2, r0
 80041c0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F042x6) || defined (STM32F048xx)
    /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
    RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
#elif defined (STM32F070x6) || defined (STM32F070xB)
    /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
    RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 80041c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c4:	480c      	ldr	r0, [pc, #48]	; (80041f8 <SystemInit+0x68>)
 80041c6:	4002      	ands	r2, r0
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
    /* Set default USB clock to PLLCLK, since there is no HSI48 */
    RCC->CFGR3 |= (uint32_t)0x00000080U;
 80041ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041cc:	2080      	movs	r0, #128	; 0x80
 80041ce:	4302      	orrs	r2, r0
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30
#else
#warning "No target selected"
#endif

    /* Reset HSI14 bit */
    RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80041d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d4:	438a      	bics	r2, r1
 80041d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable all interrupts */
    RCC->CIR = 0x00000000U;
 80041d8:	2200      	movs	r2, #0
 80041da:	609a      	str	r2, [r3, #8]

    /* Enable SYSCFGENR in APB2EN, needed for 1st call of NVIC_SetVector, to copy vectors from flash to ram */
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	430a      	orrs	r2, r1
 80041e0:	619a      	str	r2, [r3, #24]
}
 80041e2:	4770      	bx	lr
 80041e4:	40021000 	.word	0x40021000
 80041e8:	08ffb80c 	.word	0x08ffb80c
 80041ec:	fef6ffff 	.word	0xfef6ffff
 80041f0:	fffbffff 	.word	0xfffbffff
 80041f4:	ffc0ffff 	.word	0xffc0ffff
 80041f8:	fffffe6c 	.word	0xfffffe6c

080041fc <SetSysClock_PLL_HSE>:
#if ( ((CLOCK_SOURCE) & USE_PLL_HSE_XTAL) || ((CLOCK_SOURCE) & USE_PLL_HSE_EXTC) )
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
uint8_t SetSysClock_PLL_HSE(uint8_t bypass)
{
 80041fc:	b510      	push	{r4, lr}
 80041fe:	b090      	sub	sp, #64	; 0x40
 8004200:	0004      	movs	r4, r0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004202:	2230      	movs	r2, #48	; 0x30
 8004204:	2100      	movs	r1, #0
 8004206:	a804      	add	r0, sp, #16
 8004208:	f003 fb89 	bl	800791e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800420c:	2210      	movs	r2, #16
 800420e:	2100      	movs	r1, #0
 8004210:	4668      	mov	r0, sp
 8004212:	f003 fb84 	bl	800791e <memset>

    //Select HSI as system clock source to allow modification of the PLL configuration
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8004216:	2301      	movs	r3, #1
 8004218:	9300      	str	r3, [sp, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800421a:	2101      	movs	r1, #1
 800421c:	4668      	mov	r0, sp
 800421e:	f000 fe6b 	bl	8004ef8 <HAL_RCC_ClockConfig>
 8004222:	2800      	cmp	r0, #0
 8004224:	d129      	bne.n	800427a <SetSysClock_PLL_HSE+0x7e>
        return 0; // FAIL
    }

    // Select HSE oscillator as PLL source
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004226:	2301      	movs	r3, #1
 8004228:	9304      	str	r3, [sp, #16]
    if (bypass == 0) {
 800422a:	2c00      	cmp	r4, #0
 800422c:	d111      	bne.n	8004252 <SetSysClock_PLL_HSE+0x56>
        RCC_OscInitStruct.HSEState   = RCC_HSE_ON; // External 8 MHz xtal on OSC_IN/OSC_OUT
 800422e:	9305      	str	r3, [sp, #20]
    } else {
        RCC_OscInitStruct.HSEState   = RCC_HSE_BYPASS; // External 8 MHz clock on OSC_IN only
    }
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8004230:	2302      	movs	r3, #2
 8004232:	930c      	str	r3, [sp, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	025b      	lsls	r3, r3, #9
 8004238:	930d      	str	r3, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PREDIV     = RCC_PREDIV_DIV2;
 800423a:	2301      	movs	r3, #1
 800423c:	930f      	str	r3, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL12;
 800423e:	23a0      	movs	r3, #160	; 0xa0
 8004240:	039b      	lsls	r3, r3, #14
 8004242:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004244:	a804      	add	r0, sp, #16
 8004246:	f000 fbed 	bl	8004a24 <HAL_RCC_OscConfig>
 800424a:	2800      	cmp	r0, #0
 800424c:	d004      	beq.n	8004258 <SetSysClock_PLL_HSE+0x5c>
        return 0; // FAIL
 800424e:	2000      	movs	r0, #0
 8004250:	e014      	b.n	800427c <SetSysClock_PLL_HSE+0x80>
        RCC_OscInitStruct.HSEState   = RCC_HSE_BYPASS; // External 8 MHz clock on OSC_IN only
 8004252:	2305      	movs	r3, #5
 8004254:	9305      	str	r3, [sp, #20]
 8004256:	e7eb      	b.n	8004230 <SetSysClock_PLL_HSE+0x34>
    }

    // Select PLL as system clock source and configure the HCLK and PCLK1 clocks dividers
    RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8004258:	2307      	movs	r3, #7
 800425a:	9300      	str	r3, [sp, #0]
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK; // 48 MHz
 800425c:	3b05      	subs	r3, #5
 800425e:	9301      	str	r3, [sp, #4]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;         // 48 MHz
 8004260:	2300      	movs	r3, #0
 8004262:	9302      	str	r3, [sp, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;           // 48 MHz
 8004264:	9303      	str	r3, [sp, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8004266:	2101      	movs	r1, #1
 8004268:	4668      	mov	r0, sp
 800426a:	f000 fe45 	bl	8004ef8 <HAL_RCC_ClockConfig>
 800426e:	2800      	cmp	r0, #0
 8004270:	d101      	bne.n	8004276 <SetSysClock_PLL_HSE+0x7a>
    //if (bypass == 0)
    //  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCOSOURCE_HSE, RCC_MCO_DIV2); // 4 MHz with xtal
    //else
    //  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCOSOURCE_HSE, RCC_MCO_DIV4); // 2 MHz with ST-Link MCO

    return 1; // OK
 8004272:	2001      	movs	r0, #1
 8004274:	e002      	b.n	800427c <SetSysClock_PLL_HSE+0x80>
        return 0; // FAIL
 8004276:	2000      	movs	r0, #0
 8004278:	e000      	b.n	800427c <SetSysClock_PLL_HSE+0x80>
        return 0; // FAIL
 800427a:	2000      	movs	r0, #0
}
 800427c:	b010      	add	sp, #64	; 0x40
 800427e:	bd10      	pop	{r4, pc}

08004280 <SetSysClock_PLL_HSI>:
#if ((CLOCK_SOURCE) & USE_PLL_HSI)
/******************************************************************************/
/*            PLL (clocked by HSI) used as System clock source                */
/******************************************************************************/
uint8_t SetSysClock_PLL_HSI(void)
{
 8004280:	b500      	push	{lr}
 8004282:	b091      	sub	sp, #68	; 0x44
    RCC_OscInitTypeDef RCC_OscInitStruct;
    RCC_ClkInitTypeDef RCC_ClkInitStruct;

    // Select PLLCLK = 48 MHz ((HSI 8 MHz / 2) * 12)
    RCC_OscInitStruct.OscillatorType          = RCC_OSCILLATORTYPE_HSI;
 8004284:	2102      	movs	r1, #2
 8004286:	9104      	str	r1, [sp, #16]
    RCC_OscInitStruct.HSEState                = RCC_HSE_OFF;
 8004288:	2300      	movs	r3, #0
 800428a:	9305      	str	r3, [sp, #20]
    RCC_OscInitStruct.LSEState                = RCC_LSE_OFF;
 800428c:	9306      	str	r3, [sp, #24]
    RCC_OscInitStruct.HSIState                = RCC_HSI_ON;
 800428e:	2201      	movs	r2, #1
 8004290:	9207      	str	r2, [sp, #28]
    RCC_OscInitStruct.HSICalibrationValue     = RCC_HSICALIBRATION_DEFAULT;
 8004292:	2010      	movs	r0, #16
 8004294:	9008      	str	r0, [sp, #32]
    RCC_OscInitStruct.HSI14State              = RCC_HSI_OFF;
 8004296:	9309      	str	r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.HSI14CalibrationValue   = RCC_HSI14CALIBRATION_DEFAULT;
 8004298:	900a      	str	r0, [sp, #40]	; 0x28
    RCC_OscInitStruct.LSIState                = RCC_LSI_OFF;
 800429a:	930b      	str	r3, [sp, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLState            = RCC_PLL_ON;
 800429c:	910c      	str	r1, [sp, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLSource           = RCC_PLLSOURCE_HSI;
 800429e:	2380      	movs	r3, #128	; 0x80
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	930d      	str	r3, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PREDIV              = RCC_PREDIV_DIV2; // HSI div 2
 80042a4:	920f      	str	r2, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLMUL              = RCC_PLL_MUL12;
 80042a6:	23a0      	movs	r3, #160	; 0xa0
 80042a8:	039b      	lsls	r3, r3, #14
 80042aa:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80042ac:	a804      	add	r0, sp, #16
 80042ae:	f000 fbb9 	bl	8004a24 <HAL_RCC_OscConfig>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d002      	beq.n	80042bc <SetSysClock_PLL_HSI+0x3c>
        return 0; // FAIL
 80042b6:	2000      	movs	r0, #0

    // Output clock on MCO1 pin(PA8) for debugging purpose
    //HAL_RCC_MCOConfig(RCC_MCO, RCC_MCOSOURCE_HSI48, RCC_MCO_DIV1); // 48 MHz

    return 1; // OK
}
 80042b8:	b011      	add	sp, #68	; 0x44
 80042ba:	bd00      	pop	{pc}
    RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80042bc:	2307      	movs	r3, #7
 80042be:	9300      	str	r3, [sp, #0]
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK; // 48 MHz
 80042c0:	3b05      	subs	r3, #5
 80042c2:	9301      	str	r3, [sp, #4]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;         // 48 MHz
 80042c4:	2300      	movs	r3, #0
 80042c6:	9302      	str	r3, [sp, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;           // 48 MHz
 80042c8:	9303      	str	r3, [sp, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80042ca:	2101      	movs	r1, #1
 80042cc:	4668      	mov	r0, sp
 80042ce:	f000 fe13 	bl	8004ef8 <HAL_RCC_ClockConfig>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d101      	bne.n	80042da <SetSysClock_PLL_HSI+0x5a>
    return 1; // OK
 80042d6:	2001      	movs	r0, #1
 80042d8:	e7ee      	b.n	80042b8 <SetSysClock_PLL_HSI+0x38>
        return 0; // FAIL
 80042da:	2000      	movs	r0, #0
 80042dc:	e7ec      	b.n	80042b8 <SetSysClock_PLL_HSI+0x38>
	...

080042e0 <SetSysClock>:
{
 80042e0:	b510      	push	{r4, lr}
    if (SetSysClock_PLL_HSE(1) == 0)
 80042e2:	2001      	movs	r0, #1
 80042e4:	f7ff ff8a 	bl	80041fc <SetSysClock_PLL_HSE>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d000      	beq.n	80042ee <SetSysClock+0xe>
}
 80042ec:	bd10      	pop	{r4, pc}
            if (SetSysClock_PLL_HSI() == 0)
 80042ee:	f7ff ffc7 	bl	8004280 <SetSysClock_PLL_HSI>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d1fa      	bne.n	80042ec <SetSysClock+0xc>
                    error("SetSysClock failed\n");
 80042f6:	4802      	ldr	r0, [pc, #8]	; (8004300 <SetSysClock+0x20>)
 80042f8:	f7ff faac 	bl	8003854 <error>
}
 80042fc:	e7f6      	b.n	80042ec <SetSysClock+0xc>
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	08008800 	.word	0x08008800

08004304 <analogin_init>:
#include "pinmap.h"
#include "mbed_error.h"
#include "PeripheralPins.h"

void analogin_init(analogin_t *obj, PinName pin)
{
 8004304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004306:	b083      	sub	sp, #12
 8004308:	0004      	movs	r4, r0
 800430a:	000d      	movs	r5, r1
    uint32_t function = (uint32_t)NC;

    // ADC Internal Channels "pins"  (Temperature, Vref, Vbat, ...)
    //   are described in PinNames.h and PeripheralPins.c
    //   Pin value must be between 0xF0 and 0xFF
    if ((pin < 0xF0) || (pin >= 0x100)) {
 800430c:	000b      	movs	r3, r1
 800430e:	3bf0      	subs	r3, #240	; 0xf0
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b0f      	cmp	r3, #15
 8004314:	d940      	bls.n	8004398 <analogin_init+0x94>
        // Normal channels
        // Get the peripheral name from the pin and assign it to the object
        obj->handle.Instance = (ADC_TypeDef *)pinmap_peripheral(pin, PinMap_ADC);
 8004316:	4f2a      	ldr	r7, [pc, #168]	; (80043c0 <analogin_init+0xbc>)
 8004318:	0039      	movs	r1, r7
 800431a:	0028      	movs	r0, r5
 800431c:	f7fe fd10 	bl	8002d40 <pinmap_peripheral>
 8004320:	6020      	str	r0, [r4, #0]
        // Get the functions (adc channel) from the pin and assign it to the object
        function = pinmap_function(pin, PinMap_ADC);
 8004322:	0039      	movs	r1, r7
 8004324:	0028      	movs	r0, r5
 8004326:	f7fe fd31 	bl	8002d8c <pinmap_function>
 800432a:	0006      	movs	r6, r0
        // Configure GPIO
        pinmap_pinout(pin, PinMap_ADC);
 800432c:	0039      	movs	r1, r7
 800432e:	0028      	movs	r0, r5
 8004330:	f7fe fcbe 	bl	8002cb0 <pinmap_pinout>
        // No GPIO configuration for internal channels
    }
    MBED_ASSERT(obj->handle.Instance != (ADC_TypeDef *)NC);
    MBED_ASSERT(function != (uint32_t)NC);

    obj->channel = STM_PIN_CHANNEL(function);
 8004334:	0b36      	lsrs	r6, r6, #12
 8004336:	201f      	movs	r0, #31
 8004338:	4030      	ands	r0, r6
 800433a:	234e      	movs	r3, #78	; 0x4e
 800433c:	54e0      	strb	r0, [r4, r3]

    // Save pin number for the read function
    obj->pin = pin;
 800433e:	3b02      	subs	r3, #2
 8004340:	52e5      	strh	r5, [r4, r3]

    // Configure ADC object structures
    obj->handle.State = HAL_ADC_STATE_RESET;
 8004342:	2300      	movs	r3, #0
 8004344:	6463      	str	r3, [r4, #68]	; 0x44
    obj->handle.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004346:	2280      	movs	r2, #128	; 0x80
 8004348:	0612      	lsls	r2, r2, #24
 800434a:	6062      	str	r2, [r4, #4]
    obj->handle.Init.Resolution            = ADC_RESOLUTION_12B;
 800434c:	60a3      	str	r3, [r4, #8]
    obj->handle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800434e:	60e3      	str	r3, [r4, #12]
    obj->handle.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8004350:	2201      	movs	r2, #1
 8004352:	6122      	str	r2, [r4, #16]
    obj->handle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8004354:	3203      	adds	r2, #3
 8004356:	6162      	str	r2, [r4, #20]
    obj->handle.Init.LowPowerAutoWait      = DISABLE;
 8004358:	61a3      	str	r3, [r4, #24]
    obj->handle.Init.LowPowerAutoPowerOff  = DISABLE;
 800435a:	61e3      	str	r3, [r4, #28]
    obj->handle.Init.ContinuousConvMode    = DISABLE;
 800435c:	6223      	str	r3, [r4, #32]
    obj->handle.Init.DiscontinuousConvMode = DISABLE;
 800435e:	6263      	str	r3, [r4, #36]	; 0x24
    obj->handle.Init.ExternalTrigConv      = ADC_SOFTWARE_START;
 8004360:	22c2      	movs	r2, #194	; 0xc2
 8004362:	32ff      	adds	r2, #255	; 0xff
 8004364:	62a2      	str	r2, [r4, #40]	; 0x28
    obj->handle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004366:	62e3      	str	r3, [r4, #44]	; 0x2c
    obj->handle.Init.DMAContinuousRequests = DISABLE;
 8004368:	6323      	str	r3, [r4, #48]	; 0x30
    obj->handle.Init.Overrun               = ADC_OVR_DATA_OVERWRITTEN;
 800436a:	6363      	str	r3, [r4, #52]	; 0x34

    __HAL_RCC_ADC1_CLK_ENABLE();
 800436c:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <analogin_init+0xc0>)
 800436e:	6991      	ldr	r1, [r2, #24]
 8004370:	2080      	movs	r0, #128	; 0x80
 8004372:	0080      	lsls	r0, r0, #2
 8004374:	4301      	orrs	r1, r0
 8004376:	6191      	str	r1, [r2, #24]
 8004378:	6993      	ldr	r3, [r2, #24]
 800437a:	4003      	ands	r3, r0
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	9b01      	ldr	r3, [sp, #4]

    if (HAL_ADC_Init(&obj->handle) != HAL_OK) {
 8004380:	0020      	movs	r0, r4
 8004382:	f000 f8fb 	bl	800457c <HAL_ADC_Init>
 8004386:	2800      	cmp	r0, #0
 8004388:	d112      	bne.n	80043b0 <analogin_init+0xac>
        error("Cannot initialize ADC");
    }

    if (!LL_ADC_REG_ReadConversionData6(obj->handle.Instance)) {
 800438a:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x3F
  */
__STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData6(ADC_TypeDef *ADCx)
{
  return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d011      	beq.n	80043b8 <analogin_init+0xb4>
        HAL_ADCEx_Calibration_Start(&obj->handle);
    }
}
 8004394:	b003      	add	sp, #12
 8004396:	bdf0      	pop	{r4, r5, r6, r7, pc}
        obj->handle.Instance = (ADC_TypeDef *)pinmap_peripheral(pin, PinMap_ADC_Internal);
 8004398:	4e0b      	ldr	r6, [pc, #44]	; (80043c8 <analogin_init+0xc4>)
 800439a:	0031      	movs	r1, r6
 800439c:	0028      	movs	r0, r5
 800439e:	f7fe fccf 	bl	8002d40 <pinmap_peripheral>
 80043a2:	6020      	str	r0, [r4, #0]
        function = pinmap_function(pin, PinMap_ADC_Internal);
 80043a4:	0031      	movs	r1, r6
 80043a6:	0028      	movs	r0, r5
 80043a8:	f7fe fcf0 	bl	8002d8c <pinmap_function>
 80043ac:	0006      	movs	r6, r0
 80043ae:	e7c1      	b.n	8004334 <analogin_init+0x30>
        error("Cannot initialize ADC");
 80043b0:	4806      	ldr	r0, [pc, #24]	; (80043cc <analogin_init+0xc8>)
 80043b2:	f7ff fa4f 	bl	8003854 <error>
 80043b6:	e7e8      	b.n	800438a <analogin_init+0x86>
        HAL_ADCEx_Calibration_Start(&obj->handle);
 80043b8:	0020      	movs	r0, r4
 80043ba:	f000 fad3 	bl	8004964 <HAL_ADCEx_Calibration_Start>
}
 80043be:	e7e9      	b.n	8004394 <analogin_init+0x90>
 80043c0:	08008518 	.word	0x08008518
 80043c4:	40021000 	.word	0x40021000
 80043c8:	080085cc 	.word	0x080085cc
 80043cc:	0800885c 	.word	0x0800885c

080043d0 <adc_read>:

uint16_t adc_read(analogin_t *obj)
{
 80043d0:	b510      	push	{r4, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	0004      	movs	r4, r0
    ADC_ChannelConfTypeDef sConfig = {0};
 80043d6:	220c      	movs	r2, #12
 80043d8:	2100      	movs	r1, #0
 80043da:	a801      	add	r0, sp, #4
 80043dc:	f003 fa9f 	bl	800791e <memset>

    // Configure ADC channel
    sConfig.Rank         = ADC_RANK_CHANNEL_NUMBER;
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	015b      	lsls	r3, r3, #5
 80043e4:	9302      	str	r3, [sp, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80043e6:	2304      	movs	r3, #4
 80043e8:	9303      	str	r3, [sp, #12]

    switch (obj->channel) {
 80043ea:	334a      	adds	r3, #74	; 0x4a
 80043ec:	5ce3      	ldrb	r3, [r4, r3]
 80043ee:	2b11      	cmp	r3, #17
 80043f0:	d851      	bhi.n	8004496 <adc_read+0xc6>
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4a29      	ldr	r2, [pc, #164]	; (800449c <adc_read+0xcc>)
 80043f6:	58d3      	ldr	r3, [r2, r3]
 80043f8:	469f      	mov	pc, r3
        case 0:
            sConfig.Channel = ADC_CHANNEL_0;
            break;
        case 1:
            sConfig.Channel = ADC_CHANNEL_1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	9301      	str	r3, [sp, #4]
        default:
            return 0;
    }

    // Clear all channels as it is not done in HAL_ADC_ConfigChannel()
    obj->handle.Instance->CHSELR = 0;
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	2200      	movs	r2, #0
 8004402:	629a      	str	r2, [r3, #40]	; 0x28

    HAL_ADC_ConfigChannel(&obj->handle, &sConfig);
 8004404:	a901      	add	r1, sp, #4
 8004406:	0020      	movs	r0, r4
 8004408:	f000 fa12 	bl	8004830 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&obj->handle); // Start conversion
 800440c:	0020      	movs	r0, r4
 800440e:	f000 f97b 	bl	8004708 <HAL_ADC_Start>

    // Wait end of conversion and get value
    if (HAL_ADC_PollForConversion(&obj->handle, 10) == HAL_OK) {
 8004412:	210a      	movs	r1, #10
 8004414:	0020      	movs	r0, r4
 8004416:	f000 f9a7 	bl	8004768 <HAL_ADC_PollForConversion>
 800441a:	2800      	cmp	r0, #0
 800441c:	d036      	beq.n	800448c <adc_read+0xbc>
        return (uint16_t)HAL_ADC_GetValue(&obj->handle);
    } else {
        return 0;
 800441e:	2000      	movs	r0, #0
    }
}
 8004420:	b004      	add	sp, #16
 8004422:	bd10      	pop	{r4, pc}
            sConfig.Channel = ADC_CHANNEL_2;
 8004424:	2302      	movs	r3, #2
 8004426:	9301      	str	r3, [sp, #4]
            break;
 8004428:	e7e9      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_3;
 800442a:	2303      	movs	r3, #3
 800442c:	9301      	str	r3, [sp, #4]
            break;
 800442e:	e7e6      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_4;
 8004430:	2304      	movs	r3, #4
 8004432:	9301      	str	r3, [sp, #4]
            break;
 8004434:	e7e3      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_5;
 8004436:	2305      	movs	r3, #5
 8004438:	9301      	str	r3, [sp, #4]
            break;
 800443a:	e7e0      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_6;
 800443c:	2306      	movs	r3, #6
 800443e:	9301      	str	r3, [sp, #4]
            break;
 8004440:	e7dd      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_7;
 8004442:	2307      	movs	r3, #7
 8004444:	9301      	str	r3, [sp, #4]
            break;
 8004446:	e7da      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_8;
 8004448:	2308      	movs	r3, #8
 800444a:	9301      	str	r3, [sp, #4]
            break;
 800444c:	e7d7      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_9;
 800444e:	2309      	movs	r3, #9
 8004450:	9301      	str	r3, [sp, #4]
            break;
 8004452:	e7d4      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_10;
 8004454:	230a      	movs	r3, #10
 8004456:	9301      	str	r3, [sp, #4]
            break;
 8004458:	e7d1      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_11;
 800445a:	230b      	movs	r3, #11
 800445c:	9301      	str	r3, [sp, #4]
            break;
 800445e:	e7ce      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_12;
 8004460:	230c      	movs	r3, #12
 8004462:	9301      	str	r3, [sp, #4]
            break;
 8004464:	e7cb      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_13;
 8004466:	230d      	movs	r3, #13
 8004468:	9301      	str	r3, [sp, #4]
            break;
 800446a:	e7c8      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_14;
 800446c:	230e      	movs	r3, #14
 800446e:	9301      	str	r3, [sp, #4]
            break;
 8004470:	e7c5      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_15;
 8004472:	230f      	movs	r3, #15
 8004474:	9301      	str	r3, [sp, #4]
            break;
 8004476:	e7c2      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004478:	2310      	movs	r3, #16
 800447a:	9301      	str	r3, [sp, #4]
            sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800447c:	3b09      	subs	r3, #9
 800447e:	9303      	str	r3, [sp, #12]
            break;
 8004480:	e7bd      	b.n	80043fe <adc_read+0x2e>
            sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004482:	2311      	movs	r3, #17
 8004484:	9301      	str	r3, [sp, #4]
            sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8004486:	3b0a      	subs	r3, #10
 8004488:	9303      	str	r3, [sp, #12]
            break;
 800448a:	e7b8      	b.n	80043fe <adc_read+0x2e>
        return (uint16_t)HAL_ADC_GetValue(&obj->handle);
 800448c:	0020      	movs	r0, r4
 800448e:	f000 f9cb 	bl	8004828 <HAL_ADC_GetValue>
 8004492:	b280      	uxth	r0, r0
 8004494:	e7c4      	b.n	8004420 <adc_read+0x50>
            return 0;
 8004496:	2000      	movs	r0, #0
 8004498:	e7c2      	b.n	8004420 <adc_read+0x50>
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	08008814 	.word	0x08008814

080044a0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80044a0:	4770      	bx	lr
	...

080044a4 <HAL_Init>:
{
 80044a4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044a6:	4a06      	ldr	r2, [pc, #24]	; (80044c0 <HAL_Init+0x1c>)
 80044a8:	6813      	ldr	r3, [r2, #0]
 80044aa:	2110      	movs	r1, #16
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80044b0:	2003      	movs	r0, #3
 80044b2:	f001 fc55 	bl	8005d60 <HAL_InitTick>
  HAL_MspInit();
 80044b6:	f7ff fff3 	bl	80044a0 <HAL_MspInit>
}
 80044ba:	2000      	movs	r0, #0
 80044bc:	bd10      	pop	{r4, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	40022000 	.word	0x40022000

080044c4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80044c4:	b530      	push	{r4, r5, lr}
 80044c6:	b083      	sub	sp, #12
 80044c8:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044ce:	6802      	ldr	r2, [r0, #0]
 80044d0:	6891      	ldr	r1, [r2, #8]
 80044d2:	3303      	adds	r3, #3
 80044d4:	400b      	ands	r3, r1
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d011      	beq.n	80044fe <ADC_Enable+0x3a>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d142      	bne.n	8004566 <ADC_Enable+0xa2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80044e0:	6891      	ldr	r1, [r2, #8]
 80044e2:	4b22      	ldr	r3, [pc, #136]	; (800456c <ADC_Enable+0xa8>)
 80044e4:	4219      	tst	r1, r3
 80044e6:	d116      	bne.n	8004516 <ADC_Enable+0x52>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044e8:	6893      	ldr	r3, [r2, #8]
 80044ea:	2101      	movs	r1, #1
 80044ec:	430b      	orrs	r3, r1
 80044ee:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80044f0:	4b1f      	ldr	r3, [pc, #124]	; (8004570 <ADC_Enable+0xac>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	491f      	ldr	r1, [pc, #124]	; (8004574 <ADC_Enable+0xb0>)
 80044f6:	f7fb fe19 	bl	800012c <__udivsi3>
 80044fa:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80044fc:	e018      	b.n	8004530 <ADC_Enable+0x6c>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044fe:	6813      	ldr	r3, [r2, #0]
 8004500:	07db      	lsls	r3, r3, #31
 8004502:	d404      	bmi.n	800450e <ADC_Enable+0x4a>
 8004504:	68d3      	ldr	r3, [r2, #12]
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	d403      	bmi.n	8004512 <ADC_Enable+0x4e>
 800450a:	2300      	movs	r3, #0
 800450c:	e7e6      	b.n	80044dc <ADC_Enable+0x18>
 800450e:	2301      	movs	r3, #1
 8004510:	e7e4      	b.n	80044dc <ADC_Enable+0x18>
 8004512:	2301      	movs	r3, #1
 8004514:	e7e2      	b.n	80044dc <ADC_Enable+0x18>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004516:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004518:	2210      	movs	r2, #16
 800451a:	4313      	orrs	r3, r2
 800451c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800451e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004520:	3a0f      	subs	r2, #15
 8004522:	4313      	orrs	r3, r2
 8004524:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8004526:	2001      	movs	r0, #1
 8004528:	e01e      	b.n	8004568 <ADC_Enable+0xa4>
    {
      wait_loop_index--;
 800452a:	9b01      	ldr	r3, [sp, #4]
 800452c:	3b01      	subs	r3, #1
 800452e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8004530:	9b01      	ldr	r3, [sp, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f9      	bne.n	800452a <ADC_Enable+0x66>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004536:	f001 fc19 	bl	8005d6c <HAL_GetTick>
 800453a:	0005      	movs	r5, r0
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	07db      	lsls	r3, r3, #31
 8004542:	d40e      	bmi.n	8004562 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004544:	f001 fc12 	bl	8005d6c <HAL_GetTick>
 8004548:	1b40      	subs	r0, r0, r5
 800454a:	2802      	cmp	r0, #2
 800454c:	d9f6      	bls.n	800453c <ADC_Enable+0x78>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800454e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004550:	2210      	movs	r2, #16
 8004552:	4313      	orrs	r3, r2
 8004554:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004556:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004558:	3a0f      	subs	r2, #15
 800455a:	4313      	orrs	r3, r2
 800455c:	64a3      	str	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 800455e:	2001      	movs	r0, #1
 8004560:	e002      	b.n	8004568 <ADC_Enable+0xa4>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004562:	2000      	movs	r0, #0
 8004564:	e000      	b.n	8004568 <ADC_Enable+0xa4>
 8004566:	2000      	movs	r0, #0
}
 8004568:	b003      	add	sp, #12
 800456a:	bd30      	pop	{r4, r5, pc}
 800456c:	80000017 	.word	0x80000017
 8004570:	200001d0 	.word	0x200001d0
 8004574:	000f4240 	.word	0x000f4240

08004578 <HAL_ADC_MspInit>:
}
 8004578:	4770      	bx	lr
	...

0800457c <HAL_ADC_Init>:
{
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8004580:	d100      	bne.n	8004584 <HAL_ADC_Init+0x8>
 8004582:	e0b9      	b.n	80046f8 <HAL_ADC_Init+0x17c>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004584:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004586:	2b00      	cmp	r3, #0
 8004588:	d100      	bne.n	800458c <HAL_ADC_Init+0x10>
 800458a:	e080      	b.n	800468e <HAL_ADC_Init+0x112>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800458c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800458e:	06db      	lsls	r3, r3, #27
 8004590:	d500      	bpl.n	8004594 <HAL_ADC_Init+0x18>
 8004592:	e0ab      	b.n	80046ec <HAL_ADC_Init+0x170>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004594:	6822      	ldr	r2, [r4, #0]
 8004596:	6893      	ldr	r3, [r2, #8]
 8004598:	2104      	movs	r1, #4
 800459a:	400b      	ands	r3, r1
      (tmp_hal_status == HAL_OK)                                &&
 800459c:	d000      	beq.n	80045a0 <HAL_ADC_Init+0x24>
 800459e:	e0a5      	b.n	80046ec <HAL_ADC_Init+0x170>
    ADC_STATE_CLR_SET(hadc->State,
 80045a0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80045a2:	4856      	ldr	r0, [pc, #344]	; (80046fc <HAL_ADC_Init+0x180>)
 80045a4:	4001      	ands	r1, r0
 80045a6:	3006      	adds	r0, #6
 80045a8:	30ff      	adds	r0, #255	; 0xff
 80045aa:	4301      	orrs	r1, r0
 80045ac:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80045ae:	6890      	ldr	r0, [r2, #8]
 80045b0:	2103      	movs	r1, #3
 80045b2:	4001      	ands	r1, r0
 80045b4:	2901      	cmp	r1, #1
 80045b6:	d070      	beq.n	800469a <HAL_ADC_Init+0x11e>
 80045b8:	2100      	movs	r1, #0
 80045ba:	2900      	cmp	r1, #0
 80045bc:	d10c      	bne.n	80045d8 <HAL_ADC_Init+0x5c>
      MODIFY_REG(hadc->Instance->CFGR1,
 80045be:	68d1      	ldr	r1, [r2, #12]
 80045c0:	2018      	movs	r0, #24
 80045c2:	4381      	bics	r1, r0
 80045c4:	68a0      	ldr	r0, [r4, #8]
 80045c6:	4301      	orrs	r1, r0
 80045c8:	60d1      	str	r1, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80045ca:	6821      	ldr	r1, [r4, #0]
 80045cc:	690a      	ldr	r2, [r1, #16]
 80045ce:	0092      	lsls	r2, r2, #2
 80045d0:	0892      	lsrs	r2, r2, #2
 80045d2:	6860      	ldr	r0, [r4, #4]
 80045d4:	4302      	orrs	r2, r0
 80045d6:	610a      	str	r2, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80045d8:	6821      	ldr	r1, [r4, #0]
 80045da:	68ca      	ldr	r2, [r1, #12]
 80045dc:	4848      	ldr	r0, [pc, #288]	; (8004700 <HAL_ADC_Init+0x184>)
 80045de:	4002      	ands	r2, r0
 80045e0:	60ca      	str	r2, [r1, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80045e2:	69a2      	ldr	r2, [r4, #24]
 80045e4:	0392      	lsls	r2, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80045e6:	69e1      	ldr	r1, [r4, #28]
 80045e8:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80045ea:	430a      	orrs	r2, r1
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80045ec:	6a20      	ldr	r0, [r4, #32]
 80045ee:	0341      	lsls	r1, r0, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80045f0:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80045f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045f4:	2901      	cmp	r1, #1
 80045f6:	d05c      	beq.n	80046b2 <HAL_ADC_Init+0x136>
 80045f8:	2180      	movs	r1, #128	; 0x80
 80045fa:	0149      	lsls	r1, r1, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80045fc:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80045fe:	68e1      	ldr	r1, [r4, #12]
 8004600:	430a      	orrs	r2, r1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8004602:	6921      	ldr	r1, [r4, #16]
 8004604:	2902      	cmp	r1, #2
 8004606:	d056      	beq.n	80046b6 <HAL_ADC_Init+0x13a>
                 hadc->Init.DataAlign                                   |
 8004608:	4313      	orrs	r3, r2
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800460a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800460c:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800460e:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004610:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004612:	2a01      	cmp	r2, #1
 8004614:	d051      	beq.n	80046ba <HAL_ADC_Init+0x13e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004616:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004618:	21c2      	movs	r1, #194	; 0xc2
 800461a:	31ff      	adds	r1, #255	; 0xff
 800461c:	428a      	cmp	r2, r1
 800461e:	d002      	beq.n	8004626 <HAL_ADC_Init+0xaa>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004620:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004622:	430a      	orrs	r2, r1
 8004624:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004626:	6821      	ldr	r1, [r4, #0]
 8004628:	68ca      	ldr	r2, [r1, #12]
 800462a:	431a      	orrs	r2, r3
 800462c:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800462e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	0549      	lsls	r1, r1, #21
 8004634:	428a      	cmp	r2, r1
 8004636:	d00d      	beq.n	8004654 <HAL_ADC_Init+0xd8>
 8004638:	2a01      	cmp	r2, #1
 800463a:	d00b      	beq.n	8004654 <HAL_ADC_Init+0xd8>
 800463c:	2a02      	cmp	r2, #2
 800463e:	d009      	beq.n	8004654 <HAL_ADC_Init+0xd8>
 8004640:	2a03      	cmp	r2, #3
 8004642:	d007      	beq.n	8004654 <HAL_ADC_Init+0xd8>
 8004644:	2a04      	cmp	r2, #4
 8004646:	d005      	beq.n	8004654 <HAL_ADC_Init+0xd8>
 8004648:	2a05      	cmp	r2, #5
 800464a:	d003      	beq.n	8004654 <HAL_ADC_Init+0xd8>
 800464c:	2a06      	cmp	r2, #6
 800464e:	d001      	beq.n	8004654 <HAL_ADC_Init+0xd8>
 8004650:	2a07      	cmp	r2, #7
 8004652:	d10a      	bne.n	800466a <HAL_ADC_Init+0xee>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004654:	6820      	ldr	r0, [r4, #0]
 8004656:	6941      	ldr	r1, [r0, #20]
 8004658:	2207      	movs	r2, #7
 800465a:	4391      	bics	r1, r2
 800465c:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800465e:	6820      	ldr	r0, [r4, #0]
 8004660:	6941      	ldr	r1, [r0, #20]
 8004662:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004664:	402a      	ands	r2, r5
 8004666:	430a      	orrs	r2, r1
 8004668:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800466a:	6822      	ldr	r2, [r4, #0]
 800466c:	68d2      	ldr	r2, [r2, #12]
 800466e:	4925      	ldr	r1, [pc, #148]	; (8004704 <HAL_ADC_Init+0x188>)
 8004670:	400a      	ands	r2, r1
 8004672:	4293      	cmp	r3, r2
 8004674:	d030      	beq.n	80046d8 <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 8004676:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004678:	2212      	movs	r2, #18
 800467a:	4393      	bics	r3, r2
 800467c:	3a02      	subs	r2, #2
 800467e:	4313      	orrs	r3, r2
 8004680:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004682:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004684:	3a0f      	subs	r2, #15
 8004686:	4313      	orrs	r3, r2
 8004688:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800468a:	2001      	movs	r0, #1
 800468c:	e033      	b.n	80046f6 <HAL_ADC_Init+0x17a>
    ADC_CLEAR_ERRORCODE(hadc);
 800468e:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8004690:	2240      	movs	r2, #64	; 0x40
 8004692:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8004694:	f7ff ff70 	bl	8004578 <HAL_ADC_MspInit>
 8004698:	e778      	b.n	800458c <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800469a:	6811      	ldr	r1, [r2, #0]
 800469c:	07c9      	lsls	r1, r1, #31
 800469e:	d404      	bmi.n	80046aa <HAL_ADC_Init+0x12e>
 80046a0:	68d1      	ldr	r1, [r2, #12]
 80046a2:	0409      	lsls	r1, r1, #16
 80046a4:	d403      	bmi.n	80046ae <HAL_ADC_Init+0x132>
 80046a6:	2100      	movs	r1, #0
 80046a8:	e787      	b.n	80045ba <HAL_ADC_Init+0x3e>
 80046aa:	2101      	movs	r1, #1
 80046ac:	e785      	b.n	80045ba <HAL_ADC_Init+0x3e>
 80046ae:	2101      	movs	r1, #1
 80046b0:	e783      	b.n	80045ba <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80046b2:	0019      	movs	r1, r3
 80046b4:	e7a2      	b.n	80045fc <HAL_ADC_Init+0x80>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80046b6:	2304      	movs	r3, #4
 80046b8:	e7a6      	b.n	8004608 <HAL_ADC_Init+0x8c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d103      	bne.n	80046c6 <HAL_ADC_Init+0x14a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80046be:	2280      	movs	r2, #128	; 0x80
 80046c0:	0252      	lsls	r2, r2, #9
 80046c2:	4313      	orrs	r3, r2
 80046c4:	e7a7      	b.n	8004616 <HAL_ADC_Init+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80046c8:	2120      	movs	r1, #32
 80046ca:	430a      	orrs	r2, r1
 80046cc:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80046d0:	391f      	subs	r1, #31
 80046d2:	430a      	orrs	r2, r1
 80046d4:	64a2      	str	r2, [r4, #72]	; 0x48
 80046d6:	e79e      	b.n	8004616 <HAL_ADC_Init+0x9a>
      ADC_CLEAR_ERRORCODE(hadc);
 80046d8:	2300      	movs	r3, #0
 80046da:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80046dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80046de:	2203      	movs	r2, #3
 80046e0:	4393      	bics	r3, r2
 80046e2:	3a02      	subs	r2, #2
 80046e4:	4313      	orrs	r3, r2
 80046e6:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046e8:	2000      	movs	r0, #0
 80046ea:	e004      	b.n	80046f6 <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80046ee:	2210      	movs	r2, #16
 80046f0:	4313      	orrs	r3, r2
 80046f2:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80046f4:	2001      	movs	r0, #1
}
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80046f8:	2001      	movs	r0, #1
 80046fa:	e7fc      	b.n	80046f6 <HAL_ADC_Init+0x17a>
 80046fc:	fffffefd 	.word	0xfffffefd
 8004700:	fffe0219 	.word	0xfffe0219
 8004704:	833fffe7 	.word	0x833fffe7

08004708 <HAL_ADC_Start>:
{
 8004708:	b510      	push	{r4, lr}
 800470a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800470c:	6803      	ldr	r3, [r0, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	075b      	lsls	r3, r3, #29
 8004712:	d501      	bpl.n	8004718 <HAL_ADC_Start+0x10>
    tmp_hal_status = HAL_BUSY;
 8004714:	2002      	movs	r0, #2
}
 8004716:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hadc);
 8004718:	2340      	movs	r3, #64	; 0x40
 800471a:	5cc3      	ldrb	r3, [r0, r3]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d01f      	beq.n	8004760 <HAL_ADC_Start+0x58>
 8004720:	2201      	movs	r2, #1
 8004722:	2340      	movs	r3, #64	; 0x40
 8004724:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004726:	69c3      	ldr	r3, [r0, #28]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d017      	beq.n	800475c <HAL_ADC_Start+0x54>
      tmp_hal_status = ADC_Enable(hadc);
 800472c:	f7ff feca 	bl	80044c4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004730:	2800      	cmp	r0, #0
 8004732:	d1f0      	bne.n	8004716 <HAL_ADC_Start+0xe>
      ADC_STATE_CLR_SET(hadc->State,
 8004734:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004736:	4a0b      	ldr	r2, [pc, #44]	; (8004764 <HAL_ADC_Start+0x5c>)
 8004738:	401a      	ands	r2, r3
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4313      	orrs	r3, r2
 8004740:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8004742:	2300      	movs	r3, #0
 8004744:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8004746:	2240      	movs	r2, #64	; 0x40
 8004748:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	3a24      	subs	r2, #36	; 0x24
 800474e:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004750:	6822      	ldr	r2, [r4, #0]
 8004752:	6893      	ldr	r3, [r2, #8]
 8004754:	2104      	movs	r1, #4
 8004756:	430b      	orrs	r3, r1
 8004758:	6093      	str	r3, [r2, #8]
 800475a:	e7dc      	b.n	8004716 <HAL_ADC_Start+0xe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800475c:	2000      	movs	r0, #0
 800475e:	e7e7      	b.n	8004730 <HAL_ADC_Start+0x28>
    __HAL_LOCK(hadc);
 8004760:	2002      	movs	r0, #2
 8004762:	e7d8      	b.n	8004716 <HAL_ADC_Start+0xe>
 8004764:	fffff0fe 	.word	0xfffff0fe

08004768 <HAL_ADC_PollForConversion>:
{
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	0004      	movs	r4, r0
 800476c:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800476e:	6945      	ldr	r5, [r0, #20]
 8004770:	2d08      	cmp	r5, #8
 8004772:	d004      	beq.n	800477e <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004774:	6803      	ldr	r3, [r0, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	07db      	lsls	r3, r3, #31
 800477a:	d419      	bmi.n	80047b0 <HAL_ADC_PollForConversion+0x48>
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800477c:	250c      	movs	r5, #12
  tickstart = HAL_GetTick();
 800477e:	f001 faf5 	bl	8005d6c <HAL_GetTick>
 8004782:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	422a      	tst	r2, r5
 800478a:	d11a      	bne.n	80047c2 <HAL_ADC_PollForConversion+0x5a>
    if(Timeout != HAL_MAX_DELAY)
 800478c:	1c73      	adds	r3, r6, #1
 800478e:	d0f9      	beq.n	8004784 <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004790:	2e00      	cmp	r6, #0
 8004792:	d004      	beq.n	800479e <HAL_ADC_PollForConversion+0x36>
 8004794:	f001 faea 	bl	8005d6c <HAL_GetTick>
 8004798:	1bc0      	subs	r0, r0, r7
 800479a:	4286      	cmp	r6, r0
 800479c:	d2f2      	bcs.n	8004784 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800479e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80047a0:	2204      	movs	r2, #4
 80047a2:	4313      	orrs	r3, r2
 80047a4:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80047a6:	2200      	movs	r2, #0
 80047a8:	2340      	movs	r3, #64	; 0x40
 80047aa:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80047ac:	2003      	movs	r0, #3
 80047ae:	e02d      	b.n	800480c <HAL_ADC_PollForConversion+0xa4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80047b2:	2220      	movs	r2, #32
 80047b4:	4313      	orrs	r3, r2
 80047b6:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80047b8:	2200      	movs	r2, #0
 80047ba:	2340      	movs	r3, #64	; 0x40
 80047bc:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 80047be:	2001      	movs	r0, #1
 80047c0:	e024      	b.n	800480c <HAL_ADC_PollForConversion+0xa4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80047c4:	2280      	movs	r2, #128	; 0x80
 80047c6:	0092      	lsls	r2, r2, #2
 80047c8:	430a      	orrs	r2, r1
 80047ca:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80047cc:	68d9      	ldr	r1, [r3, #12]
 80047ce:	22c0      	movs	r2, #192	; 0xc0
 80047d0:	0112      	lsls	r2, r2, #4
 80047d2:	4211      	tst	r1, r2
 80047d4:	d113      	bne.n	80047fe <HAL_ADC_PollForConversion+0x96>
 80047d6:	6a22      	ldr	r2, [r4, #32]
 80047d8:	2a00      	cmp	r2, #0
 80047da:	d110      	bne.n	80047fe <HAL_ADC_PollForConversion+0x96>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	0712      	lsls	r2, r2, #28
 80047e0:	d50d      	bpl.n	80047fe <HAL_ADC_PollForConversion+0x96>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	0752      	lsls	r2, r2, #29
 80047e6:	d412      	bmi.n	800480e <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	210c      	movs	r1, #12
 80047ec:	438a      	bics	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80047f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80047f2:	4a0c      	ldr	r2, [pc, #48]	; (8004824 <HAL_ADC_PollForConversion+0xbc>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	3204      	adds	r2, #4
 80047f8:	32ff      	adds	r2, #255	; 0xff
 80047fa:	4313      	orrs	r3, r2
 80047fc:	6463      	str	r3, [r4, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80047fe:	69a3      	ldr	r3, [r4, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10d      	bne.n	8004820 <HAL_ADC_PollForConversion+0xb8>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	220c      	movs	r2, #12
 8004808:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800480a:	2000      	movs	r0, #0
}
 800480c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800480e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004810:	2220      	movs	r2, #32
 8004812:	4313      	orrs	r3, r2
 8004814:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004816:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004818:	3a1f      	subs	r2, #31
 800481a:	4313      	orrs	r3, r2
 800481c:	64a3      	str	r3, [r4, #72]	; 0x48
 800481e:	e7ee      	b.n	80047fe <HAL_ADC_PollForConversion+0x96>
  return HAL_OK;
 8004820:	2000      	movs	r0, #0
 8004822:	e7f3      	b.n	800480c <HAL_ADC_PollForConversion+0xa4>
 8004824:	fffffefe 	.word	0xfffffefe

08004828 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8004828:	6803      	ldr	r3, [r0, #0]
 800482a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800482c:	4770      	bx	lr
	...

08004830 <HAL_ADC_ConfigChannel>:
{
 8004830:	b530      	push	{r4, r5, lr}
 8004832:	b083      	sub	sp, #12
 8004834:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800483a:	3340      	adds	r3, #64	; 0x40
 800483c:	5cc3      	ldrb	r3, [r0, r3]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d100      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x14>
 8004842:	e081      	b.n	8004948 <HAL_ADC_ConfigChannel+0x118>
 8004844:	2201      	movs	r2, #1
 8004846:	2340      	movs	r3, #64	; 0x40
 8004848:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800484a:	6803      	ldr	r3, [r0, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	0752      	lsls	r2, r2, #29
 8004850:	d470      	bmi.n	8004934 <HAL_ADC_ConfigChannel+0x104>
    if (sConfig->Rank != ADC_RANK_NONE)
 8004852:	4a3e      	ldr	r2, [pc, #248]	; (800494c <HAL_ADC_ConfigChannel+0x11c>)
 8004854:	6848      	ldr	r0, [r1, #4]
 8004856:	4290      	cmp	r0, r2
 8004858:	d053      	beq.n	8004902 <HAL_ADC_ConfigChannel+0xd2>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800485a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800485c:	2001      	movs	r0, #1
 800485e:	680d      	ldr	r5, [r1, #0]
 8004860:	40a8      	lsls	r0, r5
 8004862:	4302      	orrs	r2, r0
 8004864:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004866:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004868:	2280      	movs	r2, #128	; 0x80
 800486a:	0552      	lsls	r2, r2, #21
 800486c:	4293      	cmp	r3, r2
 800486e:	d01e      	beq.n	80048ae <HAL_ADC_ConfigChannel+0x7e>
 8004870:	2b01      	cmp	r3, #1
 8004872:	d01c      	beq.n	80048ae <HAL_ADC_ConfigChannel+0x7e>
 8004874:	2b02      	cmp	r3, #2
 8004876:	d01a      	beq.n	80048ae <HAL_ADC_ConfigChannel+0x7e>
 8004878:	2b03      	cmp	r3, #3
 800487a:	d018      	beq.n	80048ae <HAL_ADC_ConfigChannel+0x7e>
 800487c:	2b04      	cmp	r3, #4
 800487e:	d016      	beq.n	80048ae <HAL_ADC_ConfigChannel+0x7e>
 8004880:	2b05      	cmp	r3, #5
 8004882:	d014      	beq.n	80048ae <HAL_ADC_ConfigChannel+0x7e>
 8004884:	2b06      	cmp	r3, #6
 8004886:	d012      	beq.n	80048ae <HAL_ADC_ConfigChannel+0x7e>
 8004888:	2b07      	cmp	r3, #7
 800488a:	d010      	beq.n	80048ae <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	6950      	ldr	r0, [r2, #20]
 8004890:	2307      	movs	r3, #7
 8004892:	4003      	ands	r3, r0
 8004894:	6888      	ldr	r0, [r1, #8]
 8004896:	4298      	cmp	r0, r3
 8004898:	d009      	beq.n	80048ae <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800489a:	6950      	ldr	r0, [r2, #20]
 800489c:	2307      	movs	r3, #7
 800489e:	4398      	bics	r0, r3
 80048a0:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80048a2:	6820      	ldr	r0, [r4, #0]
 80048a4:	6942      	ldr	r2, [r0, #20]
 80048a6:	688d      	ldr	r5, [r1, #8]
 80048a8:	402b      	ands	r3, r5
 80048aa:	4313      	orrs	r3, r2
 80048ac:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048ae:	680b      	ldr	r3, [r1, #0]
 80048b0:	001a      	movs	r2, r3
 80048b2:	3a10      	subs	r2, #16
 80048b4:	2a01      	cmp	r2, #1
 80048b6:	d901      	bls.n	80048bc <HAL_ADC_ConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048b8:	2000      	movs	r0, #0
 80048ba:	e040      	b.n	800493e <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80048bc:	4a24      	ldr	r2, [pc, #144]	; (8004950 <HAL_ADC_ConfigChannel+0x120>)
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d009      	beq.n	80048d8 <HAL_ADC_ConfigChannel+0xa8>
 80048c4:	2380      	movs	r3, #128	; 0x80
 80048c6:	03db      	lsls	r3, r3, #15
 80048c8:	4313      	orrs	r3, r2
 80048ca:	4a21      	ldr	r2, [pc, #132]	; (8004950 <HAL_ADC_ConfigChannel+0x120>)
 80048cc:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048ce:	680b      	ldr	r3, [r1, #0]
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d004      	beq.n	80048de <HAL_ADC_ConfigChannel+0xae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048d4:	2000      	movs	r0, #0
 80048d6:	e032      	b.n	800493e <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80048d8:	2380      	movs	r3, #128	; 0x80
 80048da:	041b      	lsls	r3, r3, #16
 80048dc:	e7f4      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <HAL_ADC_ConfigChannel+0x124>)
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	491d      	ldr	r1, [pc, #116]	; (8004958 <HAL_ADC_ConfigChannel+0x128>)
 80048e4:	f7fb fc22 	bl	800012c <__udivsi3>
 80048e8:	0083      	lsls	r3, r0, #2
 80048ea:	1818      	adds	r0, r3, r0
 80048ec:	0043      	lsls	r3, r0, #1
 80048ee:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80048f0:	e002      	b.n	80048f8 <HAL_ADC_ConfigChannel+0xc8>
            wait_loop_index--;
 80048f2:	9b01      	ldr	r3, [sp, #4]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80048f8:	9b01      	ldr	r3, [sp, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f9      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0xc2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048fe:	2000      	movs	r0, #0
 8004900:	e01d      	b.n	800493e <HAL_ADC_ConfigChannel+0x10e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004904:	2001      	movs	r0, #1
 8004906:	680d      	ldr	r5, [r1, #0]
 8004908:	40a8      	lsls	r0, r5
 800490a:	4382      	bics	r2, r0
 800490c:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800490e:	680b      	ldr	r3, [r1, #0]
 8004910:	001a      	movs	r2, r3
 8004912:	3a10      	subs	r2, #16
 8004914:	2a01      	cmp	r2, #1
 8004916:	d901      	bls.n	800491c <HAL_ADC_ConfigChannel+0xec>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004918:	2000      	movs	r0, #0
 800491a:	e010      	b.n	800493e <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800491c:	4a0c      	ldr	r2, [pc, #48]	; (8004950 <HAL_ADC_ConfigChannel+0x120>)
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	2b10      	cmp	r3, #16
 8004922:	d005      	beq.n	8004930 <HAL_ADC_ConfigChannel+0x100>
 8004924:	4b0d      	ldr	r3, [pc, #52]	; (800495c <HAL_ADC_ConfigChannel+0x12c>)
 8004926:	4013      	ands	r3, r2
 8004928:	4a09      	ldr	r2, [pc, #36]	; (8004950 <HAL_ADC_ConfigChannel+0x120>)
 800492a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800492c:	2000      	movs	r0, #0
 800492e:	e006      	b.n	800493e <HAL_ADC_ConfigChannel+0x10e>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_ADC_ConfigChannel+0x130>)
 8004932:	e7f8      	b.n	8004926 <HAL_ADC_ConfigChannel+0xf6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004934:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004936:	2220      	movs	r2, #32
 8004938:	4313      	orrs	r3, r2
 800493a:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800493c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800493e:	2200      	movs	r2, #0
 8004940:	2340      	movs	r3, #64	; 0x40
 8004942:	54e2      	strb	r2, [r4, r3]
}
 8004944:	b003      	add	sp, #12
 8004946:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 8004948:	2002      	movs	r0, #2
 800494a:	e7fb      	b.n	8004944 <HAL_ADC_ConfigChannel+0x114>
 800494c:	00001001 	.word	0x00001001
 8004950:	40012708 	.word	0x40012708
 8004954:	200001d0 	.word	0x200001d0
 8004958:	000f4240 	.word	0x000f4240
 800495c:	ffbfffff 	.word	0xffbfffff
 8004960:	ff7fffff 	.word	0xff7fffff

08004964 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004964:	b570      	push	{r4, r5, r6, lr}
 8004966:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004968:	2340      	movs	r3, #64	; 0x40
 800496a:	5cc3      	ldrb	r3, [r0, r3]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d055      	beq.n	8004a1c <HAL_ADCEx_Calibration_Start+0xb8>
 8004970:	2201      	movs	r2, #1
 8004972:	2340      	movs	r3, #64	; 0x40
 8004974:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004976:	6802      	ldr	r2, [r0, #0]
 8004978:	6891      	ldr	r1, [r2, #8]
 800497a:	3b3d      	subs	r3, #61	; 0x3d
 800497c:	400b      	ands	r3, r1
 800497e:	2b01      	cmp	r3, #1
 8004980:	d00b      	beq.n	800499a <HAL_ADCEx_Calibration_Start+0x36>
 8004982:	2300      	movs	r3, #0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d014      	beq.n	80049b2 <HAL_ADCEx_Calibration_Start+0x4e>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004988:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800498a:	2220      	movs	r2, #32
 800498c:	4313      	orrs	r3, r2
 800498e:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8004990:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004992:	2200      	movs	r2, #0
 8004994:	2340      	movs	r3, #64	; 0x40
 8004996:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8004998:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800499a:	6813      	ldr	r3, [r2, #0]
 800499c:	07db      	lsls	r3, r3, #31
 800499e:	d404      	bmi.n	80049aa <HAL_ADCEx_Calibration_Start+0x46>
 80049a0:	68d3      	ldr	r3, [r2, #12]
 80049a2:	041b      	lsls	r3, r3, #16
 80049a4:	d403      	bmi.n	80049ae <HAL_ADCEx_Calibration_Start+0x4a>
 80049a6:	2300      	movs	r3, #0
 80049a8:	e7ec      	b.n	8004984 <HAL_ADCEx_Calibration_Start+0x20>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e7ea      	b.n	8004984 <HAL_ADCEx_Calibration_Start+0x20>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e7e8      	b.n	8004984 <HAL_ADCEx_Calibration_Start+0x20>
    ADC_STATE_CLR_SET(hadc->State, 
 80049b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80049b4:	491a      	ldr	r1, [pc, #104]	; (8004a20 <HAL_ADCEx_Calibration_Start+0xbc>)
 80049b6:	400b      	ands	r3, r1
 80049b8:	3106      	adds	r1, #6
 80049ba:	31ff      	adds	r1, #255	; 0xff
 80049bc:	430b      	orrs	r3, r1
 80049be:	6463      	str	r3, [r4, #68]	; 0x44
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80049c0:	68d6      	ldr	r6, [r2, #12]
 80049c2:	3101      	adds	r1, #1
 80049c4:	400e      	ands	r6, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80049c6:	68d3      	ldr	r3, [r2, #12]
 80049c8:	438b      	bics	r3, r1
 80049ca:	60d3      	str	r3, [r2, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80049cc:	6822      	ldr	r2, [r4, #0]
 80049ce:	6891      	ldr	r1, [r2, #8]
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	061b      	lsls	r3, r3, #24
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80049d8:	f001 f9c8 	bl	8005d6c <HAL_GetTick>
 80049dc:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	2a00      	cmp	r2, #0
 80049e4:	da0f      	bge.n	8004a06 <HAL_ADCEx_Calibration_Start+0xa2>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80049e6:	f001 f9c1 	bl	8005d6c <HAL_GetTick>
 80049ea:	1b40      	subs	r0, r0, r5
 80049ec:	2802      	cmp	r0, #2
 80049ee:	d9f6      	bls.n	80049de <HAL_ADCEx_Calibration_Start+0x7a>
        ADC_STATE_CLR_SET(hadc->State,
 80049f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80049f2:	2212      	movs	r2, #18
 80049f4:	4393      	bics	r3, r2
 80049f6:	3a02      	subs	r2, #2
 80049f8:	4313      	orrs	r3, r2
 80049fa:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80049fc:	2200      	movs	r2, #0
 80049fe:	2340      	movs	r3, #64	; 0x40
 8004a00:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8004a02:	2001      	movs	r0, #1
 8004a04:	e7c8      	b.n	8004998 <HAL_ADCEx_Calibration_Start+0x34>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	4316      	orrs	r6, r2
 8004a0a:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004a0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a0e:	2203      	movs	r2, #3
 8004a10:	4393      	bics	r3, r2
 8004a12:	3a02      	subs	r2, #2
 8004a14:	4313      	orrs	r3, r2
 8004a16:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e7ba      	b.n	8004992 <HAL_ADCEx_Calibration_Start+0x2e>
  __HAL_LOCK(hadc);
 8004a1c:	2002      	movs	r0, #2
 8004a1e:	e7bb      	b.n	8004998 <HAL_ADCEx_Calibration_Start+0x34>
 8004a20:	fffffefd 	.word	0xfffffefd

08004a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a2a:	6803      	ldr	r3, [r0, #0]
 8004a2c:	07db      	lsls	r3, r3, #31
 8004a2e:	d53b      	bpl.n	8004aa8 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a30:	4bc3      	ldr	r3, [pc, #780]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	230c      	movs	r3, #12
 8004a36:	4013      	ands	r3, r2
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d02d      	beq.n	8004a98 <HAL_RCC_OscConfig+0x74>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a3c:	4bc0      	ldr	r3, [pc, #768]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	230c      	movs	r3, #12
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d01e      	beq.n	8004a86 <HAL_RCC_OscConfig+0x62>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a48:	6863      	ldr	r3, [r4, #4]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d050      	beq.n	8004af0 <HAL_RCC_OscConfig+0xcc>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d155      	bne.n	8004afe <HAL_RCC_OscConfig+0xda>
 8004a52:	4bbb      	ldr	r3, [pc, #748]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	49bb      	ldr	r1, [pc, #748]	; (8004d44 <HAL_RCC_OscConfig+0x320>)
 8004a58:	400a      	ands	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	49ba      	ldr	r1, [pc, #744]	; (8004d48 <HAL_RCC_OscConfig+0x324>)
 8004a60:	400a      	ands	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a64:	6863      	ldr	r3, [r4, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d061      	beq.n	8004b2e <HAL_RCC_OscConfig+0x10a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6a:	f001 f97f 	bl	8005d6c <HAL_GetTick>
 8004a6e:	0005      	movs	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a70:	4bb3      	ldr	r3, [pc, #716]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	039b      	lsls	r3, r3, #14
 8004a76:	d417      	bmi.n	8004aa8 <HAL_RCC_OscConfig+0x84>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a78:	f001 f978 	bl	8005d6c <HAL_GetTick>
 8004a7c:	1b40      	subs	r0, r0, r5
 8004a7e:	2864      	cmp	r0, #100	; 0x64
 8004a80:	d9f6      	bls.n	8004a70 <HAL_RCC_OscConfig+0x4c>
          {
            return HAL_TIMEOUT;
 8004a82:	2003      	movs	r0, #3
 8004a84:	e1f2      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a86:	4bae      	ldr	r3, [pc, #696]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	22c0      	movs	r2, #192	; 0xc0
 8004a8c:	0252      	lsls	r2, r2, #9
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	0252      	lsls	r2, r2, #9
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d1d7      	bne.n	8004a48 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a98:	4ba9      	ldr	r3, [pc, #676]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	039b      	lsls	r3, r3, #14
 8004a9e:	d503      	bpl.n	8004aa8 <HAL_RCC_OscConfig+0x84>
 8004aa0:	6863      	ldr	r3, [r4, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d100      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x84>
 8004aa6:	e1de      	b.n	8004e66 <HAL_RCC_OscConfig+0x442>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	079b      	lsls	r3, r3, #30
 8004aac:	d567      	bpl.n	8004b7e <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004aae:	4ba4      	ldr	r3, [pc, #656]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	220c      	movs	r2, #12
 8004ab4:	421a      	tst	r2, r3
 8004ab6:	d051      	beq.n	8004b5c <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ab8:	4ba1      	ldr	r3, [pc, #644]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	230c      	movs	r3, #12
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d042      	beq.n	8004b4a <HAL_RCC_OscConfig+0x126>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ac4:	68e3      	ldr	r3, [r4, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d07b      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x19e>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aca:	4a9d      	ldr	r2, [pc, #628]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004acc:	6813      	ldr	r3, [r2, #0]
 8004ace:	2101      	movs	r1, #1
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f001 f94a 	bl	8005d6c <HAL_GetTick>
 8004ad8:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ada:	4b99      	ldr	r3, [pc, #612]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	079b      	lsls	r3, r3, #30
 8004ae0:	d466      	bmi.n	8004bb0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ae2:	f001 f943 	bl	8005d6c <HAL_GetTick>
 8004ae6:	1b40      	subs	r0, r0, r5
 8004ae8:	2802      	cmp	r0, #2
 8004aea:	d9f6      	bls.n	8004ada <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 8004aec:	2003      	movs	r0, #3
 8004aee:	e1bd      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af0:	4a93      	ldr	r2, [pc, #588]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004af2:	6811      	ldr	r1, [r2, #0]
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	025b      	lsls	r3, r3, #9
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	e7b2      	b.n	8004a64 <HAL_RCC_OscConfig+0x40>
 8004afe:	2b05      	cmp	r3, #5
 8004b00:	d009      	beq.n	8004b16 <HAL_RCC_OscConfig+0xf2>
 8004b02:	4b8f      	ldr	r3, [pc, #572]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	498f      	ldr	r1, [pc, #572]	; (8004d44 <HAL_RCC_OscConfig+0x320>)
 8004b08:	400a      	ands	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	498e      	ldr	r1, [pc, #568]	; (8004d48 <HAL_RCC_OscConfig+0x324>)
 8004b10:	400a      	ands	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	e7a6      	b.n	8004a64 <HAL_RCC_OscConfig+0x40>
 8004b16:	4b8a      	ldr	r3, [pc, #552]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004b18:	6819      	ldr	r1, [r3, #0]
 8004b1a:	2280      	movs	r2, #128	; 0x80
 8004b1c:	02d2      	lsls	r2, r2, #11
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	6819      	ldr	r1, [r3, #0]
 8004b24:	2280      	movs	r2, #128	; 0x80
 8004b26:	0252      	lsls	r2, r2, #9
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	e79a      	b.n	8004a64 <HAL_RCC_OscConfig+0x40>
        tickstart = HAL_GetTick();
 8004b2e:	f001 f91d 	bl	8005d6c <HAL_GetTick>
 8004b32:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b34:	4b82      	ldr	r3, [pc, #520]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	039b      	lsls	r3, r3, #14
 8004b3a:	d5b5      	bpl.n	8004aa8 <HAL_RCC_OscConfig+0x84>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b3c:	f001 f916 	bl	8005d6c <HAL_GetTick>
 8004b40:	1b40      	subs	r0, r0, r5
 8004b42:	2864      	cmp	r0, #100	; 0x64
 8004b44:	d9f6      	bls.n	8004b34 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8004b46:	2003      	movs	r0, #3
 8004b48:	e190      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b4a:	4b7d      	ldr	r3, [pc, #500]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	22c0      	movs	r2, #192	; 0xc0
 8004b50:	0252      	lsls	r2, r2, #9
 8004b52:	4013      	ands	r3, r2
 8004b54:	2280      	movs	r2, #128	; 0x80
 8004b56:	0212      	lsls	r2, r2, #8
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d1b3      	bne.n	8004ac4 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5c:	4b78      	ldr	r3, [pc, #480]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	079b      	lsls	r3, r3, #30
 8004b62:	d504      	bpl.n	8004b6e <HAL_RCC_OscConfig+0x14a>
 8004b64:	68e3      	ldr	r3, [r4, #12]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d001      	beq.n	8004b6e <HAL_RCC_OscConfig+0x14a>
        return HAL_ERROR;
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	e17e      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6e:	4974      	ldr	r1, [pc, #464]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004b70:	680b      	ldr	r3, [r1, #0]
 8004b72:	22f8      	movs	r2, #248	; 0xf8
 8004b74:	4393      	bics	r3, r2
 8004b76:	6922      	ldr	r2, [r4, #16]
 8004b78:	00d2      	lsls	r2, r2, #3
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	071b      	lsls	r3, r3, #28
 8004b82:	d544      	bpl.n	8004c0e <HAL_RCC_OscConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b84:	69e3      	ldr	r3, [r4, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d02e      	beq.n	8004be8 <HAL_RCC_OscConfig+0x1c4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b8a:	4a6d      	ldr	r2, [pc, #436]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004b8c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004b8e:	2101      	movs	r1, #1
 8004b90:	430b      	orrs	r3, r1
 8004b92:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b94:	f001 f8ea 	bl	8005d6c <HAL_GetTick>
 8004b98:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	4b69      	ldr	r3, [pc, #420]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	079b      	lsls	r3, r3, #30
 8004ba0:	d435      	bmi.n	8004c0e <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ba2:	f001 f8e3 	bl	8005d6c <HAL_GetTick>
 8004ba6:	1b40      	subs	r0, r0, r5
 8004ba8:	2802      	cmp	r0, #2
 8004baa:	d9f6      	bls.n	8004b9a <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 8004bac:	2003      	movs	r0, #3
 8004bae:	e15d      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4963      	ldr	r1, [pc, #396]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004bb2:	680b      	ldr	r3, [r1, #0]
 8004bb4:	22f8      	movs	r2, #248	; 0xf8
 8004bb6:	4393      	bics	r3, r2
 8004bb8:	6922      	ldr	r2, [r4, #16]
 8004bba:	00d2      	lsls	r2, r2, #3
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]
 8004bc0:	e7dd      	b.n	8004b7e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8004bc2:	4a5f      	ldr	r2, [pc, #380]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004bc4:	6813      	ldr	r3, [r2, #0]
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	438b      	bics	r3, r1
 8004bca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004bcc:	f001 f8ce 	bl	8005d6c <HAL_GetTick>
 8004bd0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	4b5b      	ldr	r3, [pc, #364]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	079b      	lsls	r3, r3, #30
 8004bd8:	d5d1      	bpl.n	8004b7e <HAL_RCC_OscConfig+0x15a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bda:	f001 f8c7 	bl	8005d6c <HAL_GetTick>
 8004bde:	1b40      	subs	r0, r0, r5
 8004be0:	2802      	cmp	r0, #2
 8004be2:	d9f6      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8004be4:	2003      	movs	r0, #3
 8004be6:	e141      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004be8:	4a55      	ldr	r2, [pc, #340]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004bea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004bec:	2101      	movs	r1, #1
 8004bee:	438b      	bics	r3, r1
 8004bf0:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf2:	f001 f8bb 	bl	8005d6c <HAL_GetTick>
 8004bf6:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf8:	4b51      	ldr	r3, [pc, #324]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	079b      	lsls	r3, r3, #30
 8004bfe:	d506      	bpl.n	8004c0e <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c00:	f001 f8b4 	bl	8005d6c <HAL_GetTick>
 8004c04:	1b40      	subs	r0, r0, r5
 8004c06:	2802      	cmp	r0, #2
 8004c08:	d9f6      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x1d4>
        {
          return HAL_TIMEOUT;
 8004c0a:	2003      	movs	r0, #3
 8004c0c:	e12e      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	075b      	lsls	r3, r3, #29
 8004c12:	d575      	bpl.n	8004d00 <HAL_RCC_OscConfig+0x2dc>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c14:	4b4a      	ldr	r3, [pc, #296]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	d40b      	bmi.n	8004c34 <HAL_RCC_OscConfig+0x210>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c1c:	4a48      	ldr	r2, [pc, #288]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004c1e:	69d1      	ldr	r1, [r2, #28]
 8004c20:	2080      	movs	r0, #128	; 0x80
 8004c22:	0540      	lsls	r0, r0, #21
 8004c24:	4301      	orrs	r1, r0
 8004c26:	61d1      	str	r1, [r2, #28]
 8004c28:	69d3      	ldr	r3, [r2, #28]
 8004c2a:	4003      	ands	r3, r0
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004c30:	2501      	movs	r5, #1
 8004c32:	e000      	b.n	8004c36 <HAL_RCC_OscConfig+0x212>
    FlagStatus       pwrclkchanged = RESET;
 8004c34:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c36:	4b45      	ldr	r3, [pc, #276]	; (8004d4c <HAL_RCC_OscConfig+0x328>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	05db      	lsls	r3, r3, #23
 8004c3c:	d51f      	bpl.n	8004c7e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c3e:	68a3      	ldr	r3, [r4, #8]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d030      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x282>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d134      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x28e>
 8004c48:	4b3d      	ldr	r3, [pc, #244]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004c4a:	6a1a      	ldr	r2, [r3, #32]
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	438a      	bics	r2, r1
 8004c50:	621a      	str	r2, [r3, #32]
 8004c52:	6a1a      	ldr	r2, [r3, #32]
 8004c54:	3103      	adds	r1, #3
 8004c56:	438a      	bics	r2, r1
 8004c58:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c5a:	68a3      	ldr	r3, [r4, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d03e      	beq.n	8004cde <HAL_RCC_OscConfig+0x2ba>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c60:	f001 f884 	bl	8005d6c <HAL_GetTick>
 8004c64:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c66:	4b36      	ldr	r3, [pc, #216]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	079b      	lsls	r3, r3, #30
 8004c6c:	d446      	bmi.n	8004cfc <HAL_RCC_OscConfig+0x2d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f001 f87d 	bl	8005d6c <HAL_GetTick>
 8004c72:	1b80      	subs	r0, r0, r6
 8004c74:	4b36      	ldr	r3, [pc, #216]	; (8004d50 <HAL_RCC_OscConfig+0x32c>)
 8004c76:	4298      	cmp	r0, r3
 8004c78:	d9f5      	bls.n	8004c66 <HAL_RCC_OscConfig+0x242>
        {
          return HAL_TIMEOUT;
 8004c7a:	2003      	movs	r0, #3
 8004c7c:	e0f6      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7e:	4a33      	ldr	r2, [pc, #204]	; (8004d4c <HAL_RCC_OscConfig+0x328>)
 8004c80:	6811      	ldr	r1, [r2, #0]
 8004c82:	2380      	movs	r3, #128	; 0x80
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	430b      	orrs	r3, r1
 8004c88:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004c8a:	f001 f86f 	bl	8005d6c <HAL_GetTick>
 8004c8e:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c90:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <HAL_RCC_OscConfig+0x328>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	05db      	lsls	r3, r3, #23
 8004c96:	d4d2      	bmi.n	8004c3e <HAL_RCC_OscConfig+0x21a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c98:	f001 f868 	bl	8005d6c <HAL_GetTick>
 8004c9c:	1b80      	subs	r0, r0, r6
 8004c9e:	2864      	cmp	r0, #100	; 0x64
 8004ca0:	d9f6      	bls.n	8004c90 <HAL_RCC_OscConfig+0x26c>
          return HAL_TIMEOUT;
 8004ca2:	2003      	movs	r0, #3
 8004ca4:	e0e2      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca6:	4a26      	ldr	r2, [pc, #152]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004ca8:	6a13      	ldr	r3, [r2, #32]
 8004caa:	2101      	movs	r1, #1
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6213      	str	r3, [r2, #32]
 8004cb0:	e7d3      	b.n	8004c5a <HAL_RCC_OscConfig+0x236>
 8004cb2:	2b05      	cmp	r3, #5
 8004cb4:	d009      	beq.n	8004cca <HAL_RCC_OscConfig+0x2a6>
 8004cb6:	4b22      	ldr	r3, [pc, #136]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004cb8:	6a1a      	ldr	r2, [r3, #32]
 8004cba:	2101      	movs	r1, #1
 8004cbc:	438a      	bics	r2, r1
 8004cbe:	621a      	str	r2, [r3, #32]
 8004cc0:	6a1a      	ldr	r2, [r3, #32]
 8004cc2:	3103      	adds	r1, #3
 8004cc4:	438a      	bics	r2, r1
 8004cc6:	621a      	str	r2, [r3, #32]
 8004cc8:	e7c7      	b.n	8004c5a <HAL_RCC_OscConfig+0x236>
 8004cca:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004ccc:	6a1a      	ldr	r2, [r3, #32]
 8004cce:	2104      	movs	r1, #4
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	621a      	str	r2, [r3, #32]
 8004cd4:	6a1a      	ldr	r2, [r3, #32]
 8004cd6:	3903      	subs	r1, #3
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	621a      	str	r2, [r3, #32]
 8004cdc:	e7bd      	b.n	8004c5a <HAL_RCC_OscConfig+0x236>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cde:	f001 f845 	bl	8005d6c <HAL_GetTick>
 8004ce2:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce4:	4b16      	ldr	r3, [pc, #88]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	079b      	lsls	r3, r3, #30
 8004cea:	d507      	bpl.n	8004cfc <HAL_RCC_OscConfig+0x2d8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cec:	f001 f83e 	bl	8005d6c <HAL_GetTick>
 8004cf0:	1b80      	subs	r0, r0, r6
 8004cf2:	4b17      	ldr	r3, [pc, #92]	; (8004d50 <HAL_RCC_OscConfig+0x32c>)
 8004cf4:	4298      	cmp	r0, r3
 8004cf6:	d9f5      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8004cf8:	2003      	movs	r0, #3
 8004cfa:	e0b7      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cfc:	2d01      	cmp	r5, #1
 8004cfe:	d029      	beq.n	8004d54 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	06db      	lsls	r3, r3, #27
 8004d04:	d558      	bpl.n	8004db8 <HAL_RCC_OscConfig+0x394>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004d06:	6963      	ldr	r3, [r4, #20]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d029      	beq.n	8004d60 <HAL_RCC_OscConfig+0x33c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004d0c:	3305      	adds	r3, #5
 8004d0e:	d047      	beq.n	8004da0 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d14:	2104      	movs	r1, #4
 8004d16:	430a      	orrs	r2, r1
 8004d18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1c:	3903      	subs	r1, #3
 8004d1e:	438a      	bics	r2, r1
 8004d20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d22:	f001 f823 	bl	8005d6c <HAL_GetTick>
 8004d26:	0005      	movs	r5, r0
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <HAL_RCC_OscConfig+0x31c>)
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	079b      	lsls	r3, r3, #30
 8004d2e:	d543      	bpl.n	8004db8 <HAL_RCC_OscConfig+0x394>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d30:	f001 f81c 	bl	8005d6c <HAL_GetTick>
 8004d34:	1b40      	subs	r0, r0, r5
 8004d36:	2802      	cmp	r0, #2
 8004d38:	d9f6      	bls.n	8004d28 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8004d3a:	2003      	movs	r0, #3
 8004d3c:	e096      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	40021000 	.word	0x40021000
 8004d44:	fffeffff 	.word	0xfffeffff
 8004d48:	fffbffff 	.word	0xfffbffff
 8004d4c:	40007000 	.word	0x40007000
 8004d50:	00001388 	.word	0x00001388
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d54:	4a47      	ldr	r2, [pc, #284]	; (8004e74 <HAL_RCC_OscConfig+0x450>)
 8004d56:	69d3      	ldr	r3, [r2, #28]
 8004d58:	4947      	ldr	r1, [pc, #284]	; (8004e78 <HAL_RCC_OscConfig+0x454>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	61d3      	str	r3, [r2, #28]
 8004d5e:	e7cf      	b.n	8004d00 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d60:	4b44      	ldr	r3, [pc, #272]	; (8004e74 <HAL_RCC_OscConfig+0x450>)
 8004d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d64:	2104      	movs	r1, #4
 8004d66:	430a      	orrs	r2, r1
 8004d68:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8004d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d6c:	3903      	subs	r1, #3
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8004d72:	f000 fffb 	bl	8005d6c <HAL_GetTick>
 8004d76:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004d78:	4b3e      	ldr	r3, [pc, #248]	; (8004e74 <HAL_RCC_OscConfig+0x450>)
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	079b      	lsls	r3, r3, #30
 8004d7e:	d406      	bmi.n	8004d8e <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d80:	f000 fff4 	bl	8005d6c <HAL_GetTick>
 8004d84:	1b40      	subs	r0, r0, r5
 8004d86:	2802      	cmp	r0, #2
 8004d88:	d9f6      	bls.n	8004d78 <HAL_RCC_OscConfig+0x354>
          return HAL_TIMEOUT;
 8004d8a:	2003      	movs	r0, #3
 8004d8c:	e06e      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004d8e:	4939      	ldr	r1, [pc, #228]	; (8004e74 <HAL_RCC_OscConfig+0x450>)
 8004d90:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004d92:	22f8      	movs	r2, #248	; 0xf8
 8004d94:	4393      	bics	r3, r2
 8004d96:	69a2      	ldr	r2, [r4, #24]
 8004d98:	00d2      	lsls	r2, r2, #3
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	634b      	str	r3, [r1, #52]	; 0x34
 8004d9e:	e00b      	b.n	8004db8 <HAL_RCC_OscConfig+0x394>
      __HAL_RCC_HSI14ADC_ENABLE();
 8004da0:	4a34      	ldr	r2, [pc, #208]	; (8004e74 <HAL_RCC_OscConfig+0x450>)
 8004da2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004da4:	2104      	movs	r1, #4
 8004da6:	438b      	bics	r3, r1
 8004da8:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004daa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004dac:	31f4      	adds	r1, #244	; 0xf4
 8004dae:	438b      	bics	r3, r1
 8004db0:	69a1      	ldr	r1, [r4, #24]
 8004db2:	00c9      	lsls	r1, r1, #3
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004db8:	6a23      	ldr	r3, [r4, #32]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d055      	beq.n	8004e6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dbe:	4a2d      	ldr	r2, [pc, #180]	; (8004e74 <HAL_RCC_OscConfig+0x450>)
 8004dc0:	6851      	ldr	r1, [r2, #4]
 8004dc2:	220c      	movs	r2, #12
 8004dc4:	400a      	ands	r2, r1
 8004dc6:	2a08      	cmp	r2, #8
 8004dc8:	d052      	beq.n	8004e70 <HAL_RCC_OscConfig+0x44c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d012      	beq.n	8004df4 <HAL_RCC_OscConfig+0x3d0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dce:	4a29      	ldr	r2, [pc, #164]	; (8004e74 <HAL_RCC_OscConfig+0x450>)
 8004dd0:	6813      	ldr	r3, [r2, #0]
 8004dd2:	492a      	ldr	r1, [pc, #168]	; (8004e7c <HAL_RCC_OscConfig+0x458>)
 8004dd4:	400b      	ands	r3, r1
 8004dd6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd8:	f000 ffc8 	bl	8005d6c <HAL_GetTick>
 8004ddc:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dde:	4b25      	ldr	r3, [pc, #148]	; (8004e74 <HAL_RCC_OscConfig+0x450>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	019b      	lsls	r3, r3, #6
 8004de4:	d53d      	bpl.n	8004e62 <HAL_RCC_OscConfig+0x43e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de6:	f000 ffc1 	bl	8005d6c <HAL_GetTick>
 8004dea:	1b00      	subs	r0, r0, r4
 8004dec:	2802      	cmp	r0, #2
 8004dee:	d9f6      	bls.n	8004dde <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004df0:	2003      	movs	r0, #3
 8004df2:	e03b      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
        __HAL_RCC_PLL_DISABLE();
 8004df4:	4a1f      	ldr	r2, [pc, #124]	; (8004e74 <HAL_RCC_OscConfig+0x450>)
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	4920      	ldr	r1, [pc, #128]	; (8004e7c <HAL_RCC_OscConfig+0x458>)
 8004dfa:	400b      	ands	r3, r1
 8004dfc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004dfe:	f000 ffb5 	bl	8005d6c <HAL_GetTick>
 8004e02:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e04:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <HAL_RCC_OscConfig+0x450>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	019b      	lsls	r3, r3, #6
 8004e0a:	d506      	bpl.n	8004e1a <HAL_RCC_OscConfig+0x3f6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0c:	f000 ffae 	bl	8005d6c <HAL_GetTick>
 8004e10:	1b40      	subs	r0, r0, r5
 8004e12:	2802      	cmp	r0, #2
 8004e14:	d9f6      	bls.n	8004e04 <HAL_RCC_OscConfig+0x3e0>
            return HAL_TIMEOUT;
 8004e16:	2003      	movs	r0, #3
 8004e18:	e028      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e1a:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <HAL_RCC_OscConfig+0x450>)
 8004e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1e:	210f      	movs	r1, #15
 8004e20:	438a      	bics	r2, r1
 8004e22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004e24:	430a      	orrs	r2, r1
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	4915      	ldr	r1, [pc, #84]	; (8004e80 <HAL_RCC_OscConfig+0x45c>)
 8004e2c:	400a      	ands	r2, r1
 8004e2e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004e30:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e32:	4301      	orrs	r1, r0
 8004e34:	430a      	orrs	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8004e38:	6819      	ldr	r1, [r3, #0]
 8004e3a:	2280      	movs	r2, #128	; 0x80
 8004e3c:	0452      	lsls	r2, r2, #17
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004e42:	f000 ff93 	bl	8005d6c <HAL_GetTick>
 8004e46:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <HAL_RCC_OscConfig+0x450>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	019b      	lsls	r3, r3, #6
 8004e4e:	d406      	bmi.n	8004e5e <HAL_RCC_OscConfig+0x43a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e50:	f000 ff8c 	bl	8005d6c <HAL_GetTick>
 8004e54:	1b00      	subs	r0, r0, r4
 8004e56:	2802      	cmp	r0, #2
 8004e58:	d9f6      	bls.n	8004e48 <HAL_RCC_OscConfig+0x424>
            return HAL_TIMEOUT;
 8004e5a:	2003      	movs	r0, #3
 8004e5c:	e006      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8004e5e:	2000      	movs	r0, #0
 8004e60:	e004      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
 8004e62:	2000      	movs	r0, #0
 8004e64:	e002      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
        return HAL_ERROR;
 8004e66:	2001      	movs	r0, #1
 8004e68:	e000      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
  return HAL_OK;
 8004e6a:	2000      	movs	r0, #0
}
 8004e6c:	b002      	add	sp, #8
 8004e6e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004e70:	2001      	movs	r0, #1
 8004e72:	e7fb      	b.n	8004e6c <HAL_RCC_OscConfig+0x448>
 8004e74:	40021000 	.word	0x40021000
 8004e78:	efffffff 	.word	0xefffffff
 8004e7c:	feffffff 	.word	0xfeffffff
 8004e80:	ffc27fff 	.word	0xffc27fff

08004e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	b530      	push	{r4, r5, lr}
 8004e86:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004e88:	aa04      	add	r2, sp, #16
 8004e8a:	4b18      	ldr	r3, [pc, #96]	; (8004eec <HAL_RCC_GetSysClockFreq+0x68>)
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	c832      	ldmia	r0!, {r1, r4, r5}
 8004e90:	c232      	stmia	r2!, {r1, r4, r5}
 8004e92:	0011      	movs	r1, r2
 8004e94:	6802      	ldr	r2, [r0, #0]
 8004e96:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004e98:	466a      	mov	r2, sp
 8004e9a:	3310      	adds	r3, #16
 8004e9c:	cb13      	ldmia	r3!, {r0, r1, r4}
 8004e9e:	c213      	stmia	r2!, {r0, r1, r4}
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8004ea4:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004ea6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ea8:	230c      	movs	r3, #12
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d11a      	bne.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004eb0:	0c91      	lsrs	r1, r2, #18
 8004eb2:	3307      	adds	r3, #7
 8004eb4:	4019      	ands	r1, r3
 8004eb6:	a804      	add	r0, sp, #16
 8004eb8:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004eba:	490d      	ldr	r1, [pc, #52]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004ebc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	4669      	mov	r1, sp
 8004ec2:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004ec4:	23c0      	movs	r3, #192	; 0xc0
 8004ec6:	025b      	lsls	r3, r3, #9
 8004ec8:	401a      	ands	r2, r3
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	025b      	lsls	r3, r3, #9
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d004      	beq.n	8004edc <HAL_RCC_GetSysClockFreq+0x58>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8004ed2:	4808      	ldr	r0, [pc, #32]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x70>)
 8004ed4:	f7fb f92a 	bl	800012c <__udivsi3>
 8004ed8:	4360      	muls	r0, r4
 8004eda:	e005      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x64>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8004edc:	4805      	ldr	r0, [pc, #20]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x70>)
 8004ede:	f7fb f925 	bl	800012c <__udivsi3>
 8004ee2:	4360      	muls	r0, r4
 8004ee4:	e000      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x64>
      sysclockfreq = HSE_VALUE;
 8004ee6:	4803      	ldr	r0, [pc, #12]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004ee8:	b009      	add	sp, #36	; 0x24
 8004eea:	bd30      	pop	{r4, r5, pc}
 8004eec:	08008874 	.word	0x08008874
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	007a1200 	.word	0x007a1200

08004ef8 <HAL_RCC_ClockConfig>:
{
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	0005      	movs	r5, r0
 8004efc:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004efe:	4b4d      	ldr	r3, [pc, #308]	; (8005034 <HAL_RCC_ClockConfig+0x13c>)
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	2301      	movs	r3, #1
 8004f04:	4013      	ands	r3, r2
 8004f06:	428b      	cmp	r3, r1
 8004f08:	d20b      	bcs.n	8004f22 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0a:	494a      	ldr	r1, [pc, #296]	; (8005034 <HAL_RCC_ClockConfig+0x13c>)
 8004f0c:	680b      	ldr	r3, [r1, #0]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	4393      	bics	r3, r2
 8004f12:	4323      	orrs	r3, r4
 8004f14:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f16:	680b      	ldr	r3, [r1, #0]
 8004f18:	401a      	ands	r2, r3
 8004f1a:	4294      	cmp	r4, r2
 8004f1c:	d001      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8004f1e:	2001      	movs	r0, #1
 8004f20:	e085      	b.n	800502e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f22:	682b      	ldr	r3, [r5, #0]
 8004f24:	079b      	lsls	r3, r3, #30
 8004f26:	d506      	bpl.n	8004f36 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f28:	4a43      	ldr	r2, [pc, #268]	; (8005038 <HAL_RCC_ClockConfig+0x140>)
 8004f2a:	6853      	ldr	r3, [r2, #4]
 8004f2c:	21f0      	movs	r1, #240	; 0xf0
 8004f2e:	438b      	bics	r3, r1
 8004f30:	68a9      	ldr	r1, [r5, #8]
 8004f32:	430b      	orrs	r3, r1
 8004f34:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f36:	682b      	ldr	r3, [r5, #0]
 8004f38:	07db      	lsls	r3, r3, #31
 8004f3a:	d54c      	bpl.n	8004fd6 <HAL_RCC_ClockConfig+0xde>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3c:	686b      	ldr	r3, [r5, #4]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d021      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x8e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d025      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x9a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f46:	4a3c      	ldr	r2, [pc, #240]	; (8005038 <HAL_RCC_ClockConfig+0x140>)
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	0792      	lsls	r2, r2, #30
 8004f4c:	d400      	bmi.n	8004f50 <HAL_RCC_ClockConfig+0x58>
 8004f4e:	e06f      	b.n	8005030 <HAL_RCC_ClockConfig+0x138>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f50:	4939      	ldr	r1, [pc, #228]	; (8005038 <HAL_RCC_ClockConfig+0x140>)
 8004f52:	684a      	ldr	r2, [r1, #4]
 8004f54:	2003      	movs	r0, #3
 8004f56:	4382      	bics	r2, r0
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8004f5c:	f000 ff06 	bl	8005d6c <HAL_GetTick>
 8004f60:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f62:	686b      	ldr	r3, [r5, #4]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d01a      	beq.n	8004f9e <HAL_RCC_ClockConfig+0xa6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d026      	beq.n	8004fba <HAL_RCC_ClockConfig+0xc2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f6c:	4b32      	ldr	r3, [pc, #200]	; (8005038 <HAL_RCC_ClockConfig+0x140>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	220c      	movs	r2, #12
 8004f72:	421a      	tst	r2, r3
 8004f74:	d02f      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f76:	f000 fef9 	bl	8005d6c <HAL_GetTick>
 8004f7a:	1b80      	subs	r0, r0, r6
 8004f7c:	4b2f      	ldr	r3, [pc, #188]	; (800503c <HAL_RCC_ClockConfig+0x144>)
 8004f7e:	4298      	cmp	r0, r3
 8004f80:	d9f4      	bls.n	8004f6c <HAL_RCC_ClockConfig+0x74>
          return HAL_TIMEOUT;
 8004f82:	2003      	movs	r0, #3
 8004f84:	e053      	b.n	800502e <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f86:	4a2c      	ldr	r2, [pc, #176]	; (8005038 <HAL_RCC_ClockConfig+0x140>)
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	0392      	lsls	r2, r2, #14
 8004f8c:	d4e0      	bmi.n	8004f50 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 8004f8e:	2001      	movs	r0, #1
 8004f90:	e04d      	b.n	800502e <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f92:	4a29      	ldr	r2, [pc, #164]	; (8005038 <HAL_RCC_ClockConfig+0x140>)
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	0192      	lsls	r2, r2, #6
 8004f98:	d4da      	bmi.n	8004f50 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	e047      	b.n	800502e <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f9e:	4b26      	ldr	r3, [pc, #152]	; (8005038 <HAL_RCC_ClockConfig+0x140>)
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d015      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004faa:	f000 fedf 	bl	8005d6c <HAL_GetTick>
 8004fae:	1b80      	subs	r0, r0, r6
 8004fb0:	4b22      	ldr	r3, [pc, #136]	; (800503c <HAL_RCC_ClockConfig+0x144>)
 8004fb2:	4298      	cmp	r0, r3
 8004fb4:	d9f3      	bls.n	8004f9e <HAL_RCC_ClockConfig+0xa6>
          return HAL_TIMEOUT;
 8004fb6:	2003      	movs	r0, #3
 8004fb8:	e039      	b.n	800502e <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fba:	4b1f      	ldr	r3, [pc, #124]	; (8005038 <HAL_RCC_ClockConfig+0x140>)
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	230c      	movs	r3, #12
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d007      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc6:	f000 fed1 	bl	8005d6c <HAL_GetTick>
 8004fca:	1b80      	subs	r0, r0, r6
 8004fcc:	4b1b      	ldr	r3, [pc, #108]	; (800503c <HAL_RCC_ClockConfig+0x144>)
 8004fce:	4298      	cmp	r0, r3
 8004fd0:	d9f3      	bls.n	8004fba <HAL_RCC_ClockConfig+0xc2>
          return HAL_TIMEOUT;
 8004fd2:	2003      	movs	r0, #3
 8004fd4:	e02b      	b.n	800502e <HAL_RCC_ClockConfig+0x136>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004fd6:	4b17      	ldr	r3, [pc, #92]	; (8005034 <HAL_RCC_ClockConfig+0x13c>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4013      	ands	r3, r2
 8004fde:	429c      	cmp	r4, r3
 8004fe0:	d20b      	bcs.n	8004ffa <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe2:	4914      	ldr	r1, [pc, #80]	; (8005034 <HAL_RCC_ClockConfig+0x13c>)
 8004fe4:	680b      	ldr	r3, [r1, #0]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	4393      	bics	r3, r2
 8004fea:	4323      	orrs	r3, r4
 8004fec:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fee:	680b      	ldr	r3, [r1, #0]
 8004ff0:	401a      	ands	r2, r3
 8004ff2:	4294      	cmp	r4, r2
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
 8004ff6:	2001      	movs	r0, #1
 8004ff8:	e019      	b.n	800502e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffa:	682b      	ldr	r3, [r5, #0]
 8004ffc:	075b      	lsls	r3, r3, #29
 8004ffe:	d506      	bpl.n	800500e <HAL_RCC_ClockConfig+0x116>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005000:	4a0d      	ldr	r2, [pc, #52]	; (8005038 <HAL_RCC_ClockConfig+0x140>)
 8005002:	6853      	ldr	r3, [r2, #4]
 8005004:	490e      	ldr	r1, [pc, #56]	; (8005040 <HAL_RCC_ClockConfig+0x148>)
 8005006:	400b      	ands	r3, r1
 8005008:	68e9      	ldr	r1, [r5, #12]
 800500a:	430b      	orrs	r3, r1
 800500c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800500e:	f7ff ff39 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8005012:	4b09      	ldr	r3, [pc, #36]	; (8005038 <HAL_RCC_ClockConfig+0x140>)
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	0912      	lsrs	r2, r2, #4
 8005018:	230f      	movs	r3, #15
 800501a:	4013      	ands	r3, r2
 800501c:	4a09      	ldr	r2, [pc, #36]	; (8005044 <HAL_RCC_ClockConfig+0x14c>)
 800501e:	5cd3      	ldrb	r3, [r2, r3]
 8005020:	40d8      	lsrs	r0, r3
 8005022:	4b09      	ldr	r3, [pc, #36]	; (8005048 <HAL_RCC_ClockConfig+0x150>)
 8005024:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8005026:	2003      	movs	r0, #3
 8005028:	f000 fe9a 	bl	8005d60 <HAL_InitTick>
  return HAL_OK;
 800502c:	2000      	movs	r0, #0
}
 800502e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005030:	2001      	movs	r0, #1
 8005032:	e7fc      	b.n	800502e <HAL_RCC_ClockConfig+0x136>
 8005034:	40022000 	.word	0x40022000
 8005038:	40021000 	.word	0x40021000
 800503c:	00001388 	.word	0x00001388
 8005040:	fffff8ff 	.word	0xfffff8ff
 8005044:	08008894 	.word	0x08008894
 8005048:	200001d0 	.word	0x200001d0

0800504c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800504c:	4b01      	ldr	r3, [pc, #4]	; (8005054 <HAL_RCC_GetHCLKFreq+0x8>)
 800504e:	6818      	ldr	r0, [r3, #0]
}
 8005050:	4770      	bx	lr
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	200001d0 	.word	0x200001d0

08005058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005058:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800505a:	f7ff fff7 	bl	800504c <HAL_RCC_GetHCLKFreq>
 800505e:	4b04      	ldr	r3, [pc, #16]	; (8005070 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	0a12      	lsrs	r2, r2, #8
 8005064:	2307      	movs	r3, #7
 8005066:	4013      	ands	r3, r2
 8005068:	4a02      	ldr	r2, [pc, #8]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800506a:	5cd3      	ldrb	r3, [r2, r3]
 800506c:	40d8      	lsrs	r0, r3
}    
 800506e:	bd10      	pop	{r4, pc}
 8005070:	40021000 	.word	0x40021000
 8005074:	080088a4 	.word	0x080088a4

08005078 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005078:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800507a:	2307      	movs	r3, #7
 800507c:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800507e:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <HAL_RCC_GetClockConfig+0x30>)
 8005080:	685c      	ldr	r4, [r3, #4]
 8005082:	2203      	movs	r2, #3
 8005084:	4022      	ands	r2, r4
 8005086:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005088:	685c      	ldr	r4, [r3, #4]
 800508a:	22f0      	movs	r2, #240	; 0xf0
 800508c:	4022      	ands	r2, r4
 800508e:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	22e0      	movs	r2, #224	; 0xe0
 8005094:	00d2      	lsls	r2, r2, #3
 8005096:	4013      	ands	r3, r2
 8005098:	60c3      	str	r3, [r0, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800509a:	4b04      	ldr	r3, [pc, #16]	; (80050ac <HAL_RCC_GetClockConfig+0x34>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	2301      	movs	r3, #1
 80050a0:	4013      	ands	r3, r2
 80050a2:	600b      	str	r3, [r1, #0]
}
 80050a4:	bd10      	pop	{r4, pc}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	40021000 	.word	0x40021000
 80050ac:	40022000 	.word	0x40022000

080050b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b2:	6a03      	ldr	r3, [r0, #32]
 80050b4:	2201      	movs	r2, #1
 80050b6:	4393      	bics	r3, r2
 80050b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050be:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050c0:	2573      	movs	r5, #115	; 0x73
 80050c2:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c4:	680d      	ldr	r5, [r1, #0]
 80050c6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050c8:	2502      	movs	r5, #2
 80050ca:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050cc:	688d      	ldr	r5, [r1, #8]
 80050ce:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050d0:	4d15      	ldr	r5, [pc, #84]	; (8005128 <TIM_OC1_SetConfig+0x78>)
 80050d2:	42a8      	cmp	r0, r5
 80050d4:	d020      	beq.n	8005118 <TIM_OC1_SetConfig+0x68>
 80050d6:	4d15      	ldr	r5, [pc, #84]	; (800512c <TIM_OC1_SetConfig+0x7c>)
 80050d8:	42a8      	cmp	r0, r5
 80050da:	d01d      	beq.n	8005118 <TIM_OC1_SetConfig+0x68>
 80050dc:	4d14      	ldr	r5, [pc, #80]	; (8005130 <TIM_OC1_SetConfig+0x80>)
 80050de:	42a8      	cmp	r0, r5
 80050e0:	d01a      	beq.n	8005118 <TIM_OC1_SetConfig+0x68>
 80050e2:	4d14      	ldr	r5, [pc, #80]	; (8005134 <TIM_OC1_SetConfig+0x84>)
 80050e4:	42a8      	cmp	r0, r5
 80050e6:	d017      	beq.n	8005118 <TIM_OC1_SetConfig+0x68>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80050e8:	4d0f      	ldr	r5, [pc, #60]	; (8005128 <TIM_OC1_SetConfig+0x78>)
 80050ea:	42a8      	cmp	r0, r5
 80050ec:	d008      	beq.n	8005100 <TIM_OC1_SetConfig+0x50>
 80050ee:	4d0f      	ldr	r5, [pc, #60]	; (800512c <TIM_OC1_SetConfig+0x7c>)
 80050f0:	42a8      	cmp	r0, r5
 80050f2:	d005      	beq.n	8005100 <TIM_OC1_SetConfig+0x50>
 80050f4:	4d0e      	ldr	r5, [pc, #56]	; (8005130 <TIM_OC1_SetConfig+0x80>)
 80050f6:	42a8      	cmp	r0, r5
 80050f8:	d002      	beq.n	8005100 <TIM_OC1_SetConfig+0x50>
 80050fa:	4d0e      	ldr	r5, [pc, #56]	; (8005134 <TIM_OC1_SetConfig+0x84>)
 80050fc:	42a8      	cmp	r0, r5
 80050fe:	d105      	bne.n	800510c <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005100:	4d0d      	ldr	r5, [pc, #52]	; (8005138 <TIM_OC1_SetConfig+0x88>)
 8005102:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005104:	694d      	ldr	r5, [r1, #20]
 8005106:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005108:	698d      	ldr	r5, [r1, #24]
 800510a:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800510e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005110:	684a      	ldr	r2, [r1, #4]
 8005112:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005114:	6203      	str	r3, [r0, #32]
}
 8005116:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 8005118:	2508      	movs	r5, #8
 800511a:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 800511c:	68cd      	ldr	r5, [r1, #12]
 800511e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005120:	2504      	movs	r5, #4
 8005122:	43ab      	bics	r3, r5
 8005124:	e7e0      	b.n	80050e8 <TIM_OC1_SetConfig+0x38>
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40014000 	.word	0x40014000
 8005130:	40014400 	.word	0x40014400
 8005134:	40014800 	.word	0x40014800
 8005138:	fffffcff 	.word	0xfffffcff

0800513c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800513e:	6a03      	ldr	r3, [r0, #32]
 8005140:	4a1a      	ldr	r2, [pc, #104]	; (80051ac <TIM_OC3_SetConfig+0x70>)
 8005142:	4013      	ands	r3, r2
 8005144:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005146:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800514a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800514c:	3275      	adds	r2, #117	; 0x75
 800514e:	32ff      	adds	r2, #255	; 0xff
 8005150:	4394      	bics	r4, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005152:	680a      	ldr	r2, [r1, #0]
 8005154:	4314      	orrs	r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005156:	4a16      	ldr	r2, [pc, #88]	; (80051b0 <TIM_OC3_SetConfig+0x74>)
 8005158:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800515a:	688a      	ldr	r2, [r1, #8]
 800515c:	0212      	lsls	r2, r2, #8
 800515e:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005160:	4a14      	ldr	r2, [pc, #80]	; (80051b4 <TIM_OC3_SetConfig+0x78>)
 8005162:	4290      	cmp	r0, r2
 8005164:	d019      	beq.n	800519a <TIM_OC3_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005166:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <TIM_OC3_SetConfig+0x78>)
 8005168:	4290      	cmp	r0, r2
 800516a:	d008      	beq.n	800517e <TIM_OC3_SetConfig+0x42>
 800516c:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <TIM_OC3_SetConfig+0x7c>)
 800516e:	4290      	cmp	r0, r2
 8005170:	d005      	beq.n	800517e <TIM_OC3_SetConfig+0x42>
 8005172:	4a12      	ldr	r2, [pc, #72]	; (80051bc <TIM_OC3_SetConfig+0x80>)
 8005174:	4290      	cmp	r0, r2
 8005176:	d002      	beq.n	800517e <TIM_OC3_SetConfig+0x42>
 8005178:	4a11      	ldr	r2, [pc, #68]	; (80051c0 <TIM_OC3_SetConfig+0x84>)
 800517a:	4290      	cmp	r0, r2
 800517c:	d107      	bne.n	800518e <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800517e:	4a11      	ldr	r2, [pc, #68]	; (80051c4 <TIM_OC3_SetConfig+0x88>)
 8005180:	4015      	ands	r5, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005182:	694a      	ldr	r2, [r1, #20]
 8005184:	0112      	lsls	r2, r2, #4
 8005186:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005188:	698a      	ldr	r2, [r1, #24]
 800518a:	0112      	lsls	r2, r2, #4
 800518c:	4315      	orrs	r5, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005190:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005192:	684a      	ldr	r2, [r1, #4]
 8005194:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005196:	6203      	str	r3, [r0, #32]
}
 8005198:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 800519a:	4a0b      	ldr	r2, [pc, #44]	; (80051c8 <TIM_OC3_SetConfig+0x8c>)
 800519c:	4013      	ands	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800519e:	68ca      	ldr	r2, [r1, #12]
 80051a0:	0212      	lsls	r2, r2, #8
 80051a2:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 80051a4:	4a09      	ldr	r2, [pc, #36]	; (80051cc <TIM_OC3_SetConfig+0x90>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	e7dd      	b.n	8005166 <TIM_OC3_SetConfig+0x2a>
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	fffffeff 	.word	0xfffffeff
 80051b0:	fffffdff 	.word	0xfffffdff
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800
 80051c4:	ffffcfff 	.word	0xffffcfff
 80051c8:	fffff7ff 	.word	0xfffff7ff
 80051cc:	fffffbff 	.word	0xfffffbff

080051d0 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051d2:	6a03      	ldr	r3, [r0, #32]
 80051d4:	4a13      	ldr	r2, [pc, #76]	; (8005224 <TIM_OC4_SetConfig+0x54>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051da:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051dc:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051de:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051e0:	4c11      	ldr	r4, [pc, #68]	; (8005228 <TIM_OC4_SetConfig+0x58>)
 80051e2:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e4:	680c      	ldr	r4, [r1, #0]
 80051e6:	0224      	lsls	r4, r4, #8
 80051e8:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051ea:	4c10      	ldr	r4, [pc, #64]	; (800522c <TIM_OC4_SetConfig+0x5c>)
 80051ec:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051ee:	688c      	ldr	r4, [r1, #8]
 80051f0:	0324      	lsls	r4, r4, #12
 80051f2:	4323      	orrs	r3, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80051f4:	4c0e      	ldr	r4, [pc, #56]	; (8005230 <TIM_OC4_SetConfig+0x60>)
 80051f6:	42a0      	cmp	r0, r4
 80051f8:	d008      	beq.n	800520c <TIM_OC4_SetConfig+0x3c>
 80051fa:	4c0e      	ldr	r4, [pc, #56]	; (8005234 <TIM_OC4_SetConfig+0x64>)
 80051fc:	42a0      	cmp	r0, r4
 80051fe:	d005      	beq.n	800520c <TIM_OC4_SetConfig+0x3c>
 8005200:	4c0d      	ldr	r4, [pc, #52]	; (8005238 <TIM_OC4_SetConfig+0x68>)
 8005202:	42a0      	cmp	r0, r4
 8005204:	d002      	beq.n	800520c <TIM_OC4_SetConfig+0x3c>
 8005206:	4c0d      	ldr	r4, [pc, #52]	; (800523c <TIM_OC4_SetConfig+0x6c>)
 8005208:	42a0      	cmp	r0, r4
 800520a:	d104      	bne.n	8005216 <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800520c:	4c0c      	ldr	r4, [pc, #48]	; (8005240 <TIM_OC4_SetConfig+0x70>)
 800520e:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005210:	694d      	ldr	r5, [r1, #20]
 8005212:	01ad      	lsls	r5, r5, #6
 8005214:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005216:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005218:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800521a:	684a      	ldr	r2, [r1, #4]
 800521c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800521e:	6203      	str	r3, [r0, #32]
}
 8005220:	bd30      	pop	{r4, r5, pc}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	ffffefff 	.word	0xffffefff
 8005228:	ffff8cff 	.word	0xffff8cff
 800522c:	ffffdfff 	.word	0xffffdfff
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40014000 	.word	0x40014000
 8005238:	40014400 	.word	0x40014400
 800523c:	40014800 	.word	0x40014800
 8005240:	ffffbfff 	.word	0xffffbfff

08005244 <HAL_TIM_Base_MspInit>:
}
 8005244:	4770      	bx	lr

08005246 <HAL_TIM_Base_Start>:
{
 8005246:	b510      	push	{r4, lr}
  htim->State= HAL_TIM_STATE_BUSY;
 8005248:	223d      	movs	r2, #61	; 0x3d
 800524a:	2302      	movs	r3, #2
 800524c:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 800524e:	6804      	ldr	r4, [r0, #0]
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	2101      	movs	r1, #1
 8005254:	430b      	orrs	r3, r1
 8005256:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 8005258:	5481      	strb	r1, [r0, r2]
}
 800525a:	2000      	movs	r0, #0
 800525c:	bd10      	pop	{r4, pc}

0800525e <HAL_TIM_PWM_MspInit>:
}
 800525e:	4770      	bx	lr

08005260 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005260:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005262:	4a1d      	ldr	r2, [pc, #116]	; (80052d8 <TIM_Base_SetConfig+0x78>)
 8005264:	4290      	cmp	r0, r2
 8005266:	d032      	beq.n	80052ce <TIM_Base_SetConfig+0x6e>
 8005268:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <TIM_Base_SetConfig+0x7c>)
 800526a:	4290      	cmp	r0, r2
 800526c:	d02f      	beq.n	80052ce <TIM_Base_SetConfig+0x6e>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800526e:	4a1a      	ldr	r2, [pc, #104]	; (80052d8 <TIM_Base_SetConfig+0x78>)
 8005270:	4290      	cmp	r0, r2
 8005272:	d00e      	beq.n	8005292 <TIM_Base_SetConfig+0x32>
 8005274:	4a19      	ldr	r2, [pc, #100]	; (80052dc <TIM_Base_SetConfig+0x7c>)
 8005276:	4290      	cmp	r0, r2
 8005278:	d00b      	beq.n	8005292 <TIM_Base_SetConfig+0x32>
 800527a:	4a19      	ldr	r2, [pc, #100]	; (80052e0 <TIM_Base_SetConfig+0x80>)
 800527c:	4290      	cmp	r0, r2
 800527e:	d008      	beq.n	8005292 <TIM_Base_SetConfig+0x32>
 8005280:	4a18      	ldr	r2, [pc, #96]	; (80052e4 <TIM_Base_SetConfig+0x84>)
 8005282:	4290      	cmp	r0, r2
 8005284:	d005      	beq.n	8005292 <TIM_Base_SetConfig+0x32>
 8005286:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <TIM_Base_SetConfig+0x88>)
 8005288:	4290      	cmp	r0, r2
 800528a:	d002      	beq.n	8005292 <TIM_Base_SetConfig+0x32>
 800528c:	4a17      	ldr	r2, [pc, #92]	; (80052ec <TIM_Base_SetConfig+0x8c>)
 800528e:	4290      	cmp	r0, r2
 8005290:	d103      	bne.n	800529a <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005292:	4a17      	ldr	r2, [pc, #92]	; (80052f0 <TIM_Base_SetConfig+0x90>)
 8005294:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005296:	68ca      	ldr	r2, [r1, #12]
 8005298:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800529a:	2280      	movs	r2, #128	; 0x80
 800529c:	4393      	bics	r3, r2
 800529e:	694a      	ldr	r2, [r1, #20]
 80052a0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80052a2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a4:	688b      	ldr	r3, [r1, #8]
 80052a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80052a8:	680b      	ldr	r3, [r1, #0]
 80052aa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <TIM_Base_SetConfig+0x78>)
 80052ae:	4298      	cmp	r0, r3
 80052b0:	d008      	beq.n	80052c4 <TIM_Base_SetConfig+0x64>
 80052b2:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <TIM_Base_SetConfig+0x84>)
 80052b4:	4298      	cmp	r0, r3
 80052b6:	d005      	beq.n	80052c4 <TIM_Base_SetConfig+0x64>
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <TIM_Base_SetConfig+0x88>)
 80052ba:	4298      	cmp	r0, r3
 80052bc:	d002      	beq.n	80052c4 <TIM_Base_SetConfig+0x64>
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <TIM_Base_SetConfig+0x8c>)
 80052c0:	4298      	cmp	r0, r3
 80052c2:	d101      	bne.n	80052c8 <TIM_Base_SetConfig+0x68>
    TIMx->RCR = Structure->RepetitionCounter;
 80052c4:	690b      	ldr	r3, [r1, #16]
 80052c6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80052c8:	2301      	movs	r3, #1
 80052ca:	6143      	str	r3, [r0, #20]
}
 80052cc:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052ce:	2270      	movs	r2, #112	; 0x70
 80052d0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80052d2:	684a      	ldr	r2, [r1, #4]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	e7ca      	b.n	800526e <TIM_Base_SetConfig+0xe>
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40002000 	.word	0x40002000
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800
 80052f0:	fffffcff 	.word	0xfffffcff

080052f4 <HAL_TIM_Base_Init>:
{
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80052f8:	d014      	beq.n	8005324 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80052fa:	233d      	movs	r3, #61	; 0x3d
 80052fc:	5cc3      	ldrb	r3, [r0, r3]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8005302:	253d      	movs	r5, #61	; 0x3d
 8005304:	2302      	movs	r3, #2
 8005306:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005308:	1d21      	adds	r1, r4, #4
 800530a:	6820      	ldr	r0, [r4, #0]
 800530c:	f7ff ffa8 	bl	8005260 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8005310:	2301      	movs	r3, #1
 8005312:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8005314:	2000      	movs	r0, #0
}
 8005316:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8005318:	2200      	movs	r2, #0
 800531a:	333c      	adds	r3, #60	; 0x3c
 800531c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800531e:	f7ff ff91 	bl	8005244 <HAL_TIM_Base_MspInit>
 8005322:	e7ee      	b.n	8005302 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8005324:	2001      	movs	r0, #1
 8005326:	e7f6      	b.n	8005316 <HAL_TIM_Base_Init+0x22>

08005328 <HAL_TIM_PWM_Init>:
{
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 800532c:	d014      	beq.n	8005358 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800532e:	233d      	movs	r3, #61	; 0x3d
 8005330:	5cc3      	ldrb	r3, [r0, r3]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8005336:	253d      	movs	r5, #61	; 0x3d
 8005338:	2302      	movs	r3, #2
 800533a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533c:	1d21      	adds	r1, r4, #4
 800533e:	6820      	ldr	r0, [r4, #0]
 8005340:	f7ff ff8e 	bl	8005260 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8005344:	2301      	movs	r3, #1
 8005346:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8005348:	2000      	movs	r0, #0
}
 800534a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800534c:	2200      	movs	r2, #0
 800534e:	333c      	adds	r3, #60	; 0x3c
 8005350:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8005352:	f7ff ff84 	bl	800525e <HAL_TIM_PWM_MspInit>
 8005356:	e7ee      	b.n	8005336 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8005358:	2001      	movs	r0, #1
 800535a:	e7f6      	b.n	800534a <HAL_TIM_PWM_Init+0x22>

0800535c <TIM_OC2_SetConfig>:
{
 800535c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800535e:	6a03      	ldr	r3, [r0, #32]
 8005360:	2210      	movs	r2, #16
 8005362:	4393      	bics	r3, r2
 8005364:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005366:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005368:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800536a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800536c:	4a17      	ldr	r2, [pc, #92]	; (80053cc <TIM_OC2_SetConfig+0x70>)
 800536e:	4014      	ands	r4, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005370:	680a      	ldr	r2, [r1, #0]
 8005372:	0212      	lsls	r2, r2, #8
 8005374:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 8005376:	2220      	movs	r2, #32
 8005378:	4393      	bics	r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800537a:	688a      	ldr	r2, [r1, #8]
 800537c:	0112      	lsls	r2, r2, #4
 800537e:	4313      	orrs	r3, r2
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005380:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <TIM_OC2_SetConfig+0x74>)
 8005382:	4290      	cmp	r0, r2
 8005384:	d019      	beq.n	80053ba <TIM_OC2_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005386:	4a12      	ldr	r2, [pc, #72]	; (80053d0 <TIM_OC2_SetConfig+0x74>)
 8005388:	4290      	cmp	r0, r2
 800538a:	d008      	beq.n	800539e <TIM_OC2_SetConfig+0x42>
 800538c:	4a11      	ldr	r2, [pc, #68]	; (80053d4 <TIM_OC2_SetConfig+0x78>)
 800538e:	4290      	cmp	r0, r2
 8005390:	d005      	beq.n	800539e <TIM_OC2_SetConfig+0x42>
 8005392:	4a11      	ldr	r2, [pc, #68]	; (80053d8 <TIM_OC2_SetConfig+0x7c>)
 8005394:	4290      	cmp	r0, r2
 8005396:	d002      	beq.n	800539e <TIM_OC2_SetConfig+0x42>
 8005398:	4a10      	ldr	r2, [pc, #64]	; (80053dc <TIM_OC2_SetConfig+0x80>)
 800539a:	4290      	cmp	r0, r2
 800539c:	d107      	bne.n	80053ae <TIM_OC2_SetConfig+0x52>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800539e:	4a10      	ldr	r2, [pc, #64]	; (80053e0 <TIM_OC2_SetConfig+0x84>)
 80053a0:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053a2:	694a      	ldr	r2, [r1, #20]
 80053a4:	0092      	lsls	r2, r2, #2
 80053a6:	4315      	orrs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053a8:	698a      	ldr	r2, [r1, #24]
 80053aa:	0092      	lsls	r2, r2, #2
 80053ac:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 80053ae:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80053b0:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80053b2:	684a      	ldr	r2, [r1, #4]
 80053b4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80053b6:	6203      	str	r3, [r0, #32]
}
 80053b8:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 80053ba:	2280      	movs	r2, #128	; 0x80
 80053bc:	4393      	bics	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053be:	68ca      	ldr	r2, [r1, #12]
 80053c0:	0112      	lsls	r2, r2, #4
 80053c2:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 80053c4:	2240      	movs	r2, #64	; 0x40
 80053c6:	4393      	bics	r3, r2
 80053c8:	e7dd      	b.n	8005386 <TIM_OC2_SetConfig+0x2a>
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	ffff8cff 	.word	0xffff8cff
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400
 80053dc:	40014800 	.word	0x40014800
 80053e0:	fffff3ff 	.word	0xfffff3ff

080053e4 <HAL_TIM_PWM_ConfigChannel>:
{
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	0004      	movs	r4, r0
 80053e8:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80053ea:	233c      	movs	r3, #60	; 0x3c
 80053ec:	5cc3      	ldrb	r3, [r0, r3]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d069      	beq.n	80054c6 <HAL_TIM_PWM_ConfigChannel+0xe2>
 80053f2:	2101      	movs	r1, #1
 80053f4:	233c      	movs	r3, #60	; 0x3c
 80053f6:	54c1      	strb	r1, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	3101      	adds	r1, #1
 80053fa:	3301      	adds	r3, #1
 80053fc:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 80053fe:	2a04      	cmp	r2, #4
 8005400:	d037      	beq.n	8005472 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005402:	d919      	bls.n	8005438 <HAL_TIM_PWM_ConfigChannel+0x54>
 8005404:	2a08      	cmp	r2, #8
 8005406:	d04a      	beq.n	800549e <HAL_TIM_PWM_ConfigChannel+0xba>
 8005408:	2a0c      	cmp	r2, #12
 800540a:	d12a      	bne.n	8005462 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800540c:	0029      	movs	r1, r5
 800540e:	6800      	ldr	r0, [r0, #0]
 8005410:	f7ff fede 	bl	80051d0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005414:	6822      	ldr	r2, [r4, #0]
 8005416:	69d1      	ldr	r1, [r2, #28]
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	430b      	orrs	r3, r1
 800541e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005420:	6822      	ldr	r2, [r4, #0]
 8005422:	69d3      	ldr	r3, [r2, #28]
 8005424:	4929      	ldr	r1, [pc, #164]	; (80054cc <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8005426:	400b      	ands	r3, r1
 8005428:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800542a:	6821      	ldr	r1, [r4, #0]
 800542c:	69cb      	ldr	r3, [r1, #28]
 800542e:	692a      	ldr	r2, [r5, #16]
 8005430:	0212      	lsls	r2, r2, #8
 8005432:	4313      	orrs	r3, r2
 8005434:	61cb      	str	r3, [r1, #28]
    break;
 8005436:	e014      	b.n	8005462 <HAL_TIM_PWM_ConfigChannel+0x7e>
  switch (Channel)
 8005438:	2a00      	cmp	r2, #0
 800543a:	d112      	bne.n	8005462 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800543c:	0029      	movs	r1, r5
 800543e:	6800      	ldr	r0, [r0, #0]
 8005440:	f7ff fe36 	bl	80050b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005444:	6822      	ldr	r2, [r4, #0]
 8005446:	6993      	ldr	r3, [r2, #24]
 8005448:	2108      	movs	r1, #8
 800544a:	430b      	orrs	r3, r1
 800544c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800544e:	6822      	ldr	r2, [r4, #0]
 8005450:	6993      	ldr	r3, [r2, #24]
 8005452:	3904      	subs	r1, #4
 8005454:	438b      	bics	r3, r1
 8005456:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005458:	6822      	ldr	r2, [r4, #0]
 800545a:	6993      	ldr	r3, [r2, #24]
 800545c:	6929      	ldr	r1, [r5, #16]
 800545e:	430b      	orrs	r3, r1
 8005460:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005462:	2201      	movs	r2, #1
 8005464:	233d      	movs	r3, #61	; 0x3d
 8005466:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8005468:	2200      	movs	r2, #0
 800546a:	3b01      	subs	r3, #1
 800546c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800546e:	2000      	movs	r0, #0
}
 8005470:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005472:	0029      	movs	r1, r5
 8005474:	6800      	ldr	r0, [r0, #0]
 8005476:	f7ff ff71 	bl	800535c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800547a:	6822      	ldr	r2, [r4, #0]
 800547c:	6991      	ldr	r1, [r2, #24]
 800547e:	2380      	movs	r3, #128	; 0x80
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	430b      	orrs	r3, r1
 8005484:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	6993      	ldr	r3, [r2, #24]
 800548a:	4910      	ldr	r1, [pc, #64]	; (80054cc <HAL_TIM_PWM_ConfigChannel+0xe8>)
 800548c:	400b      	ands	r3, r1
 800548e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005490:	6821      	ldr	r1, [r4, #0]
 8005492:	698b      	ldr	r3, [r1, #24]
 8005494:	692a      	ldr	r2, [r5, #16]
 8005496:	0212      	lsls	r2, r2, #8
 8005498:	4313      	orrs	r3, r2
 800549a:	618b      	str	r3, [r1, #24]
    break;
 800549c:	e7e1      	b.n	8005462 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800549e:	0029      	movs	r1, r5
 80054a0:	6800      	ldr	r0, [r0, #0]
 80054a2:	f7ff fe4b 	bl	800513c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054a6:	6822      	ldr	r2, [r4, #0]
 80054a8:	69d3      	ldr	r3, [r2, #28]
 80054aa:	2108      	movs	r1, #8
 80054ac:	430b      	orrs	r3, r1
 80054ae:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054b0:	6822      	ldr	r2, [r4, #0]
 80054b2:	69d3      	ldr	r3, [r2, #28]
 80054b4:	3904      	subs	r1, #4
 80054b6:	438b      	bics	r3, r1
 80054b8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	69d3      	ldr	r3, [r2, #28]
 80054be:	6929      	ldr	r1, [r5, #16]
 80054c0:	430b      	orrs	r3, r1
 80054c2:	61d3      	str	r3, [r2, #28]
    break;
 80054c4:	e7cd      	b.n	8005462 <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 80054c6:	2002      	movs	r0, #2
 80054c8:	e7d2      	b.n	8005470 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	fffffbff 	.word	0xfffffbff

080054d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054d0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80054d2:	2401      	movs	r4, #1
 80054d4:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054d6:	6a03      	ldr	r3, [r0, #32]
 80054d8:	43a3      	bics	r3, r4
 80054da:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80054dc:	6a03      	ldr	r3, [r0, #32]
 80054de:	408a      	lsls	r2, r1
 80054e0:	431a      	orrs	r2, r3
 80054e2:	6202      	str	r2, [r0, #32]
}
 80054e4:	bd10      	pop	{r4, pc}
	...

080054e8 <HAL_TIM_OC_Start>:
{
 80054e8:	b510      	push	{r4, lr}
 80054ea:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054ec:	2201      	movs	r2, #1
 80054ee:	6800      	ldr	r0, [r0, #0]
 80054f0:	f7ff ffee 	bl	80054d0 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	4a11      	ldr	r2, [pc, #68]	; (800553c <HAL_TIM_OC_Start+0x54>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d019      	beq.n	8005530 <HAL_TIM_OC_Start+0x48>
 80054fc:	4a10      	ldr	r2, [pc, #64]	; (8005540 <HAL_TIM_OC_Start+0x58>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d018      	beq.n	8005534 <HAL_TIM_OC_Start+0x4c>
 8005502:	4a10      	ldr	r2, [pc, #64]	; (8005544 <HAL_TIM_OC_Start+0x5c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d017      	beq.n	8005538 <HAL_TIM_OC_Start+0x50>
 8005508:	4a0f      	ldr	r2, [pc, #60]	; (8005548 <HAL_TIM_OC_Start+0x60>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00e      	beq.n	800552c <HAL_TIM_OC_Start+0x44>
 800550e:	2200      	movs	r2, #0
 8005510:	2a00      	cmp	r2, #0
 8005512:	d004      	beq.n	800551e <HAL_TIM_OC_Start+0x36>
    __HAL_TIM_MOE_ENABLE(htim);
 8005514:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005516:	2280      	movs	r2, #128	; 0x80
 8005518:	0212      	lsls	r2, r2, #8
 800551a:	430a      	orrs	r2, r1
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	6813      	ldr	r3, [r2, #0]
 8005522:	2101      	movs	r1, #1
 8005524:	430b      	orrs	r3, r1
 8005526:	6013      	str	r3, [r2, #0]
}
 8005528:	2000      	movs	r0, #0
 800552a:	bd10      	pop	{r4, pc}
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800552c:	2201      	movs	r2, #1
 800552e:	e7ef      	b.n	8005510 <HAL_TIM_OC_Start+0x28>
 8005530:	2201      	movs	r2, #1
 8005532:	e7ed      	b.n	8005510 <HAL_TIM_OC_Start+0x28>
 8005534:	2201      	movs	r2, #1
 8005536:	e7eb      	b.n	8005510 <HAL_TIM_OC_Start+0x28>
 8005538:	2201      	movs	r2, #1
 800553a:	e7e9      	b.n	8005510 <HAL_TIM_OC_Start+0x28>
 800553c:	40012c00 	.word	0x40012c00
 8005540:	40014000 	.word	0x40014000
 8005544:	40014400 	.word	0x40014400
 8005548:	40014800 	.word	0x40014800

0800554c <HAL_TIM_PWM_Start>:
{
 800554c:	b510      	push	{r4, lr}
 800554e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005550:	2201      	movs	r2, #1
 8005552:	6800      	ldr	r0, [r0, #0]
 8005554:	f7ff ffbc 	bl	80054d0 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	4a11      	ldr	r2, [pc, #68]	; (80055a0 <HAL_TIM_PWM_Start+0x54>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d019      	beq.n	8005594 <HAL_TIM_PWM_Start+0x48>
 8005560:	4a10      	ldr	r2, [pc, #64]	; (80055a4 <HAL_TIM_PWM_Start+0x58>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d018      	beq.n	8005598 <HAL_TIM_PWM_Start+0x4c>
 8005566:	4a10      	ldr	r2, [pc, #64]	; (80055a8 <HAL_TIM_PWM_Start+0x5c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d017      	beq.n	800559c <HAL_TIM_PWM_Start+0x50>
 800556c:	4a0f      	ldr	r2, [pc, #60]	; (80055ac <HAL_TIM_PWM_Start+0x60>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00e      	beq.n	8005590 <HAL_TIM_PWM_Start+0x44>
 8005572:	2200      	movs	r2, #0
 8005574:	2a00      	cmp	r2, #0
 8005576:	d004      	beq.n	8005582 <HAL_TIM_PWM_Start+0x36>
    __HAL_TIM_MOE_ENABLE(htim);
 8005578:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800557a:	2280      	movs	r2, #128	; 0x80
 800557c:	0212      	lsls	r2, r2, #8
 800557e:	430a      	orrs	r2, r1
 8005580:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	6813      	ldr	r3, [r2, #0]
 8005586:	2101      	movs	r1, #1
 8005588:	430b      	orrs	r3, r1
 800558a:	6013      	str	r3, [r2, #0]
}
 800558c:	2000      	movs	r0, #0
 800558e:	bd10      	pop	{r4, pc}
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005590:	2201      	movs	r2, #1
 8005592:	e7ef      	b.n	8005574 <HAL_TIM_PWM_Start+0x28>
 8005594:	2201      	movs	r2, #1
 8005596:	e7ed      	b.n	8005574 <HAL_TIM_PWM_Start+0x28>
 8005598:	2201      	movs	r2, #1
 800559a:	e7eb      	b.n	8005574 <HAL_TIM_PWM_Start+0x28>
 800559c:	2201      	movs	r2, #1
 800559e:	e7e9      	b.n	8005574 <HAL_TIM_PWM_Start+0x28>
 80055a0:	40012c00 	.word	0x40012c00
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40014400 	.word	0x40014400
 80055ac:	40014800 	.word	0x40014800

080055b0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80055b0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 80055b2:	2404      	movs	r4, #4
 80055b4:	408c      	lsls	r4, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80055b6:	6a03      	ldr	r3, [r0, #32]
 80055b8:	43a3      	bics	r3, r4
 80055ba:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 80055bc:	6a03      	ldr	r3, [r0, #32]
 80055be:	408a      	lsls	r2, r1
 80055c0:	431a      	orrs	r2, r3
 80055c2:	6202      	str	r2, [r0, #32]
}
 80055c4:	bd10      	pop	{r4, pc}

080055c6 <HAL_TIMEx_PWMN_Start>:
{
 80055c6:	b510      	push	{r4, lr}
 80055c8:	0004      	movs	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80055ca:	2204      	movs	r2, #4
 80055cc:	6800      	ldr	r0, [r0, #0]
 80055ce:	f7ff ffef 	bl	80055b0 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80055d2:	6822      	ldr	r2, [r4, #0]
 80055d4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	430b      	orrs	r3, r1
 80055dc:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80055de:	6822      	ldr	r2, [r4, #0]
 80055e0:	6813      	ldr	r3, [r2, #0]
 80055e2:	2101      	movs	r1, #1
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6013      	str	r3, [r2, #0]
}
 80055e8:	2000      	movs	r0, #0
 80055ea:	bd10      	pop	{r4, pc}

080055ec <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80055ec:	4770      	bx	lr
	...

080055f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	0004      	movs	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055f4:	6883      	ldr	r3, [r0, #8]
 80055f6:	6902      	ldr	r2, [r0, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	6942      	ldr	r2, [r0, #20]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	69c2      	ldr	r2, [r0, #28]
 8005600:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8005602:	6801      	ldr	r1, [r0, #0]
 8005604:	680a      	ldr	r2, [r1, #0]
 8005606:	4864      	ldr	r0, [pc, #400]	; (8005798 <UART_SetConfig+0x1a8>)
 8005608:	4002      	ands	r2, r0
 800560a:	4313      	orrs	r3, r2
 800560c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800560e:	6822      	ldr	r2, [r4, #0]
 8005610:	6853      	ldr	r3, [r2, #4]
 8005612:	4962      	ldr	r1, [pc, #392]	; (800579c <UART_SetConfig+0x1ac>)
 8005614:	400b      	ands	r3, r1
 8005616:	68e1      	ldr	r1, [r4, #12]
 8005618:	430b      	orrs	r3, r1
 800561a:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800561c:	69a3      	ldr	r3, [r4, #24]
 800561e:	6a22      	ldr	r2, [r4, #32]
 8005620:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005622:	6821      	ldr	r1, [r4, #0]
 8005624:	688a      	ldr	r2, [r1, #8]
 8005626:	485e      	ldr	r0, [pc, #376]	; (80057a0 <UART_SetConfig+0x1b0>)
 8005628:	4002      	ands	r2, r0
 800562a:	4313      	orrs	r3, r2
 800562c:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800562e:	6825      	ldr	r5, [r4, #0]
 8005630:	4b5c      	ldr	r3, [pc, #368]	; (80057a4 <UART_SetConfig+0x1b4>)
 8005632:	429d      	cmp	r5, r3
 8005634:	d026      	beq.n	8005684 <UART_SetConfig+0x94>
 8005636:	4b5c      	ldr	r3, [pc, #368]	; (80057a8 <UART_SetConfig+0x1b8>)
 8005638:	429d      	cmp	r5, r3
 800563a:	d03b      	beq.n	80056b4 <UART_SetConfig+0xc4>
 800563c:	4b5b      	ldr	r3, [pc, #364]	; (80057ac <UART_SetConfig+0x1bc>)
 800563e:	429d      	cmp	r5, r3
 8005640:	d03a      	beq.n	80056b8 <UART_SetConfig+0xc8>
 8005642:	4b5b      	ldr	r3, [pc, #364]	; (80057b0 <UART_SetConfig+0x1c0>)
 8005644:	429d      	cmp	r5, r3
 8005646:	d031      	beq.n	80056ac <UART_SetConfig+0xbc>
 8005648:	2310      	movs	r3, #16
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800564a:	2280      	movs	r2, #128	; 0x80
 800564c:	0212      	lsls	r2, r2, #8
 800564e:	69e1      	ldr	r1, [r4, #28]
 8005650:	4291      	cmp	r1, r2
 8005652:	d033      	beq.n	80056bc <UART_SetConfig+0xcc>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8005654:	2b02      	cmp	r3, #2
 8005656:	d100      	bne.n	800565a <UART_SetConfig+0x6a>
 8005658:	e083      	b.n	8005762 <UART_SetConfig+0x172>
 800565a:	d800      	bhi.n	800565e <UART_SetConfig+0x6e>
 800565c:	e073      	b.n	8005746 <UART_SetConfig+0x156>
 800565e:	2b04      	cmp	r3, #4
 8005660:	d100      	bne.n	8005664 <UART_SetConfig+0x74>
 8005662:	e08a      	b.n	800577a <UART_SetConfig+0x18a>
 8005664:	2b08      	cmp	r3, #8
 8005666:	d000      	beq.n	800566a <UART_SetConfig+0x7a>
 8005668:	e093      	b.n	8005792 <UART_SetConfig+0x1a2>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800566a:	6861      	ldr	r1, [r4, #4]
 800566c:	0848      	lsrs	r0, r1, #1
 800566e:	2380      	movs	r3, #128	; 0x80
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	469c      	mov	ip, r3
 8005674:	4460      	add	r0, ip
 8005676:	f7fa fd59 	bl	800012c <__udivsi3>
 800567a:	0400      	lsls	r0, r0, #16
 800567c:	0c00      	lsrs	r0, r0, #16
 800567e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005680:	2000      	movs	r0, #0
        break;
 8005682:	e045      	b.n	8005710 <UART_SetConfig+0x120>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005684:	4b4b      	ldr	r3, [pc, #300]	; (80057b4 <UART_SetConfig+0x1c4>)
 8005686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005688:	2303      	movs	r3, #3
 800568a:	4013      	ands	r3, r2
 800568c:	2b01      	cmp	r3, #1
 800568e:	d009      	beq.n	80056a4 <UART_SetConfig+0xb4>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <UART_SetConfig+0xb0>
 8005694:	2b02      	cmp	r3, #2
 8005696:	d007      	beq.n	80056a8 <UART_SetConfig+0xb8>
 8005698:	2b03      	cmp	r3, #3
 800569a:	d009      	beq.n	80056b0 <UART_SetConfig+0xc0>
 800569c:	2310      	movs	r3, #16
 800569e:	e7d4      	b.n	800564a <UART_SetConfig+0x5a>
 80056a0:	2300      	movs	r3, #0
 80056a2:	e7d2      	b.n	800564a <UART_SetConfig+0x5a>
 80056a4:	2304      	movs	r3, #4
 80056a6:	e7d0      	b.n	800564a <UART_SetConfig+0x5a>
 80056a8:	2308      	movs	r3, #8
 80056aa:	e7ce      	b.n	800564a <UART_SetConfig+0x5a>
 80056ac:	2300      	movs	r3, #0
 80056ae:	e7cc      	b.n	800564a <UART_SetConfig+0x5a>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e7ca      	b.n	800564a <UART_SetConfig+0x5a>
 80056b4:	2300      	movs	r3, #0
 80056b6:	e7c8      	b.n	800564a <UART_SetConfig+0x5a>
 80056b8:	2300      	movs	r3, #0
 80056ba:	e7c6      	b.n	800564a <UART_SetConfig+0x5a>
    switch (clocksource)
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d028      	beq.n	8005712 <UART_SetConfig+0x122>
 80056c0:	d90f      	bls.n	80056e2 <UART_SetConfig+0xf2>
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d030      	beq.n	8005728 <UART_SetConfig+0x138>
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d13a      	bne.n	8005740 <UART_SetConfig+0x150>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80056ca:	6863      	ldr	r3, [r4, #4]
 80056cc:	0858      	lsrs	r0, r3, #1
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	025b      	lsls	r3, r3, #9
 80056d2:	469c      	mov	ip, r3
 80056d4:	4460      	add	r0, ip
 80056d6:	6861      	ldr	r1, [r4, #4]
 80056d8:	f7fa fd28 	bl	800012c <__udivsi3>
 80056dc:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80056de:	2000      	movs	r0, #0
        break;
 80056e0:	e00c      	b.n	80056fc <UART_SetConfig+0x10c>
    switch (clocksource)
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d12c      	bne.n	8005740 <UART_SetConfig+0x150>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80056e6:	f7ff fcb7 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 80056ea:	0040      	lsls	r0, r0, #1
 80056ec:	6863      	ldr	r3, [r4, #4]
 80056ee:	085b      	lsrs	r3, r3, #1
 80056f0:	18c0      	adds	r0, r0, r3
 80056f2:	6861      	ldr	r1, [r4, #4]
 80056f4:	f7fa fd1a 	bl	800012c <__udivsi3>
 80056f8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80056fa:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80056fc:	220f      	movs	r2, #15
 80056fe:	0019      	movs	r1, r3
 8005700:	4391      	bics	r1, r2
 8005702:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005704:	105b      	asrs	r3, r3, #1
 8005706:	2107      	movs	r1, #7
 8005708:	400b      	ands	r3, r1
 800570a:	4313      	orrs	r3, r2
    huart->Instance->BRR = brrtemp;
 800570c:	6822      	ldr	r2, [r4, #0]
 800570e:	60d3      	str	r3, [r2, #12]
    }
  }

  return ret;

}
 8005710:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005712:	6863      	ldr	r3, [r4, #4]
 8005714:	0858      	lsrs	r0, r3, #1
 8005716:	4b28      	ldr	r3, [pc, #160]	; (80057b8 <UART_SetConfig+0x1c8>)
 8005718:	469c      	mov	ip, r3
 800571a:	4460      	add	r0, ip
 800571c:	6861      	ldr	r1, [r4, #4]
 800571e:	f7fa fd05 	bl	800012c <__udivsi3>
 8005722:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8005724:	2000      	movs	r0, #0
        break;
 8005726:	e7e9      	b.n	80056fc <UART_SetConfig+0x10c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005728:	f7ff fbac 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 800572c:	0040      	lsls	r0, r0, #1
 800572e:	6863      	ldr	r3, [r4, #4]
 8005730:	085b      	lsrs	r3, r3, #1
 8005732:	18c0      	adds	r0, r0, r3
 8005734:	6861      	ldr	r1, [r4, #4]
 8005736:	f7fa fcf9 	bl	800012c <__udivsi3>
 800573a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800573c:	2000      	movs	r0, #0
        break;
 800573e:	e7dd      	b.n	80056fc <UART_SetConfig+0x10c>
        ret = HAL_ERROR;
 8005740:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8005742:	2300      	movs	r3, #0
 8005744:	e7da      	b.n	80056fc <UART_SetConfig+0x10c>
    switch (clocksource)
 8005746:	2b00      	cmp	r3, #0
 8005748:	d123      	bne.n	8005792 <UART_SetConfig+0x1a2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800574a:	f7ff fc85 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 800574e:	6861      	ldr	r1, [r4, #4]
 8005750:	084b      	lsrs	r3, r1, #1
 8005752:	18c0      	adds	r0, r0, r3
 8005754:	f7fa fcea 	bl	800012c <__udivsi3>
 8005758:	0400      	lsls	r0, r0, #16
 800575a:	0c00      	lsrs	r0, r0, #16
 800575c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800575e:	2000      	movs	r0, #0
        break;
 8005760:	e7d6      	b.n	8005710 <UART_SetConfig+0x120>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005762:	6861      	ldr	r1, [r4, #4]
 8005764:	0848      	lsrs	r0, r1, #1
 8005766:	4b15      	ldr	r3, [pc, #84]	; (80057bc <UART_SetConfig+0x1cc>)
 8005768:	469c      	mov	ip, r3
 800576a:	4460      	add	r0, ip
 800576c:	f7fa fcde 	bl	800012c <__udivsi3>
 8005770:	0400      	lsls	r0, r0, #16
 8005772:	0c00      	lsrs	r0, r0, #16
 8005774:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005776:	2000      	movs	r0, #0
        break;
 8005778:	e7ca      	b.n	8005710 <UART_SetConfig+0x120>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800577a:	f7ff fb83 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 800577e:	6861      	ldr	r1, [r4, #4]
 8005780:	084b      	lsrs	r3, r1, #1
 8005782:	18c0      	adds	r0, r0, r3
 8005784:	f7fa fcd2 	bl	800012c <__udivsi3>
 8005788:	0400      	lsls	r0, r0, #16
 800578a:	0c00      	lsrs	r0, r0, #16
 800578c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800578e:	2000      	movs	r0, #0
        break;
 8005790:	e7be      	b.n	8005710 <UART_SetConfig+0x120>
        ret = HAL_ERROR;
 8005792:	2001      	movs	r0, #1
 8005794:	e7bc      	b.n	8005710 <UART_SetConfig+0x120>
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	efff69f3 	.word	0xefff69f3
 800579c:	ffffcfff 	.word	0xffffcfff
 80057a0:	fffff4ff 	.word	0xfffff4ff
 80057a4:	40013800 	.word	0x40013800
 80057a8:	40004400 	.word	0x40004400
 80057ac:	40004800 	.word	0x40004800
 80057b0:	40004c00 	.word	0x40004c00
 80057b4:	40021000 	.word	0x40021000
 80057b8:	00f42400 	.word	0x00f42400
 80057bc:	007a1200 	.word	0x007a1200

080057c0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80057c2:	07db      	lsls	r3, r3, #31
 80057c4:	d506      	bpl.n	80057d4 <UART_AdvFeatureConfig+0x14>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057c6:	6802      	ldr	r2, [r0, #0]
 80057c8:	6853      	ldr	r3, [r2, #4]
 80057ca:	492c      	ldr	r1, [pc, #176]	; (800587c <UART_AdvFeatureConfig+0xbc>)
 80057cc:	400b      	ands	r3, r1
 80057ce:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80057d0:	430b      	orrs	r3, r1
 80057d2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80057d6:	079b      	lsls	r3, r3, #30
 80057d8:	d506      	bpl.n	80057e8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057da:	6802      	ldr	r2, [r0, #0]
 80057dc:	6853      	ldr	r3, [r2, #4]
 80057de:	4928      	ldr	r1, [pc, #160]	; (8005880 <UART_AdvFeatureConfig+0xc0>)
 80057e0:	400b      	ands	r3, r1
 80057e2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80057e4:	430b      	orrs	r3, r1
 80057e6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80057ea:	075b      	lsls	r3, r3, #29
 80057ec:	d506      	bpl.n	80057fc <UART_AdvFeatureConfig+0x3c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057ee:	6802      	ldr	r2, [r0, #0]
 80057f0:	6853      	ldr	r3, [r2, #4]
 80057f2:	4924      	ldr	r1, [pc, #144]	; (8005884 <UART_AdvFeatureConfig+0xc4>)
 80057f4:	400b      	ands	r3, r1
 80057f6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80057fe:	071b      	lsls	r3, r3, #28
 8005800:	d506      	bpl.n	8005810 <UART_AdvFeatureConfig+0x50>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005802:	6802      	ldr	r2, [r0, #0]
 8005804:	6853      	ldr	r3, [r2, #4]
 8005806:	4920      	ldr	r1, [pc, #128]	; (8005888 <UART_AdvFeatureConfig+0xc8>)
 8005808:	400b      	ands	r3, r1
 800580a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800580c:	430b      	orrs	r3, r1
 800580e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005810:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005812:	06db      	lsls	r3, r3, #27
 8005814:	d506      	bpl.n	8005824 <UART_AdvFeatureConfig+0x64>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005816:	6802      	ldr	r2, [r0, #0]
 8005818:	6893      	ldr	r3, [r2, #8]
 800581a:	491c      	ldr	r1, [pc, #112]	; (800588c <UART_AdvFeatureConfig+0xcc>)
 800581c:	400b      	ands	r3, r1
 800581e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005820:	430b      	orrs	r3, r1
 8005822:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005824:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005826:	069b      	lsls	r3, r3, #26
 8005828:	d506      	bpl.n	8005838 <UART_AdvFeatureConfig+0x78>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800582a:	6802      	ldr	r2, [r0, #0]
 800582c:	6893      	ldr	r3, [r2, #8]
 800582e:	4918      	ldr	r1, [pc, #96]	; (8005890 <UART_AdvFeatureConfig+0xd0>)
 8005830:	400b      	ands	r3, r1
 8005832:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005834:	430b      	orrs	r3, r1
 8005836:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005838:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800583a:	065b      	lsls	r3, r3, #25
 800583c:	d50b      	bpl.n	8005856 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800583e:	6802      	ldr	r2, [r0, #0]
 8005840:	6853      	ldr	r3, [r2, #4]
 8005842:	4914      	ldr	r1, [pc, #80]	; (8005894 <UART_AdvFeatureConfig+0xd4>)
 8005844:	400b      	ands	r3, r1
 8005846:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005848:	430b      	orrs	r3, r1
 800584a:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	035b      	lsls	r3, r3, #13
 8005850:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005852:	429a      	cmp	r2, r3
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0xac>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005856:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005858:	061b      	lsls	r3, r3, #24
 800585a:	d506      	bpl.n	800586a <UART_AdvFeatureConfig+0xaa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800585c:	6802      	ldr	r2, [r0, #0]
 800585e:	6853      	ldr	r3, [r2, #4]
 8005860:	490d      	ldr	r1, [pc, #52]	; (8005898 <UART_AdvFeatureConfig+0xd8>)
 8005862:	400b      	ands	r3, r1
 8005864:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005866:	430b      	orrs	r3, r1
 8005868:	6053      	str	r3, [r2, #4]
  }
}
 800586a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800586c:	6802      	ldr	r2, [r0, #0]
 800586e:	6853      	ldr	r3, [r2, #4]
 8005870:	490a      	ldr	r1, [pc, #40]	; (800589c <UART_AdvFeatureConfig+0xdc>)
 8005872:	400b      	ands	r3, r1
 8005874:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005876:	430b      	orrs	r3, r1
 8005878:	6053      	str	r3, [r2, #4]
 800587a:	e7ec      	b.n	8005856 <UART_AdvFeatureConfig+0x96>
 800587c:	fffdffff 	.word	0xfffdffff
 8005880:	fffeffff 	.word	0xfffeffff
 8005884:	fffbffff 	.word	0xfffbffff
 8005888:	ffff7fff 	.word	0xffff7fff
 800588c:	ffffefff 	.word	0xffffefff
 8005890:	ffffdfff 	.word	0xffffdfff
 8005894:	ffefffff 	.word	0xffefffff
 8005898:	fff7ffff 	.word	0xfff7ffff
 800589c:	ff9fffff 	.word	0xff9fffff

080058a0 <UART_CheckIdleState>:
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	66c3      	str	r3, [r0, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80058a4:	2220      	movs	r2, #32
 80058a6:	2169      	movs	r1, #105	; 0x69
 80058a8:	5442      	strb	r2, [r0, r1]
  huart->RxState = HAL_UART_STATE_READY;
 80058aa:	3101      	adds	r1, #1
 80058ac:	5442      	strb	r2, [r0, r1]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058ae:	3248      	adds	r2, #72	; 0x48
 80058b0:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
}
 80058b2:	2000      	movs	r0, #0
 80058b4:	4770      	bx	lr
	...

080058b8 <HAL_UART_Init>:
{
 80058b8:	b510      	push	{r4, lr}
 80058ba:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80058bc:	d030      	beq.n	8005920 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 80058be:	2369      	movs	r3, #105	; 0x69
 80058c0:	5cc3      	ldrb	r3, [r0, r3]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d022      	beq.n	800590c <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80058c6:	2224      	movs	r2, #36	; 0x24
 80058c8:	2369      	movs	r3, #105	; 0x69
 80058ca:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80058cc:	6822      	ldr	r2, [r4, #0]
 80058ce:	6813      	ldr	r3, [r2, #0]
 80058d0:	2101      	movs	r1, #1
 80058d2:	438b      	bics	r3, r1
 80058d4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058d6:	0020      	movs	r0, r4
 80058d8:	f7ff fe8a 	bl	80055f0 <UART_SetConfig>
 80058dc:	2801      	cmp	r0, #1
 80058de:	d014      	beq.n	800590a <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d118      	bne.n	8005918 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80058e6:	6822      	ldr	r2, [r4, #0]
 80058e8:	6853      	ldr	r3, [r2, #4]
 80058ea:	490e      	ldr	r1, [pc, #56]	; (8005924 <HAL_UART_Init+0x6c>)
 80058ec:	400b      	ands	r3, r1
 80058ee:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80058f0:	6822      	ldr	r2, [r4, #0]
 80058f2:	6893      	ldr	r3, [r2, #8]
 80058f4:	2108      	movs	r1, #8
 80058f6:	438b      	bics	r3, r1
 80058f8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80058fa:	6822      	ldr	r2, [r4, #0]
 80058fc:	6813      	ldr	r3, [r2, #0]
 80058fe:	3907      	subs	r1, #7
 8005900:	430b      	orrs	r3, r1
 8005902:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005904:	0020      	movs	r0, r4
 8005906:	f7ff ffcb 	bl	80058a0 <UART_CheckIdleState>
}
 800590a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800590c:	2200      	movs	r2, #0
 800590e:	3368      	adds	r3, #104	; 0x68
 8005910:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8005912:	f7ff fe6b 	bl	80055ec <HAL_UART_MspInit>
 8005916:	e7d6      	b.n	80058c6 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8005918:	0020      	movs	r0, r4
 800591a:	f7ff ff51 	bl	80057c0 <UART_AdvFeatureConfig>
 800591e:	e7e2      	b.n	80058e6 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8005920:	2001      	movs	r0, #1
 8005922:	e7f2      	b.n	800590a <HAL_UART_Init+0x52>
 8005924:	fffff7ff 	.word	0xfffff7ff

08005928 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8005928:	b510      	push	{r4, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800592a:	4b20      	ldr	r3, [pc, #128]	; (80059ac <SystemCoreClockUpdate+0x84>)
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	230c      	movs	r3, #12
 8005930:	4013      	ands	r3, r2

  switch (tmp)
 8005932:	2b04      	cmp	r3, #4
 8005934:	d016      	beq.n	8005964 <SystemCoreClockUpdate+0x3c>
 8005936:	2b08      	cmp	r3, #8
 8005938:	d018      	beq.n	800596c <SystemCoreClockUpdate+0x44>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <SystemCoreClockUpdate+0x1e>
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
      }
      break;
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800593e:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <SystemCoreClockUpdate+0x88>)
 8005940:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <SystemCoreClockUpdate+0x8c>)
 8005942:	601a      	str	r2, [r3, #0]
      break;
 8005944:	e002      	b.n	800594c <SystemCoreClockUpdate+0x24>
      SystemCoreClock = HSI_VALUE;
 8005946:	4a1a      	ldr	r2, [pc, #104]	; (80059b0 <SystemCoreClockUpdate+0x88>)
 8005948:	4b1a      	ldr	r3, [pc, #104]	; (80059b4 <SystemCoreClockUpdate+0x8c>)
 800594a:	601a      	str	r2, [r3, #0]
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800594c:	4b17      	ldr	r3, [pc, #92]	; (80059ac <SystemCoreClockUpdate+0x84>)
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	0912      	lsrs	r2, r2, #4
 8005952:	230f      	movs	r3, #15
 8005954:	4013      	ands	r3, r2
 8005956:	4a18      	ldr	r2, [pc, #96]	; (80059b8 <SystemCoreClockUpdate+0x90>)
 8005958:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800595a:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <SystemCoreClockUpdate+0x8c>)
 800595c:	6811      	ldr	r1, [r2, #0]
 800595e:	40d9      	lsrs	r1, r3
 8005960:	6011      	str	r1, [r2, #0]
}
 8005962:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 8005964:	4a12      	ldr	r2, [pc, #72]	; (80059b0 <SystemCoreClockUpdate+0x88>)
 8005966:	4b13      	ldr	r3, [pc, #76]	; (80059b4 <SystemCoreClockUpdate+0x8c>)
 8005968:	601a      	str	r2, [r3, #0]
      break;
 800596a:	e7ef      	b.n	800594c <SystemCoreClockUpdate+0x24>
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 800596c:	4a0f      	ldr	r2, [pc, #60]	; (80059ac <SystemCoreClockUpdate+0x84>)
 800596e:	6854      	ldr	r4, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8005970:	6853      	ldr	r3, [r2, #4]
 8005972:	21c0      	movs	r1, #192	; 0xc0
 8005974:	0249      	lsls	r1, r1, #9
 8005976:	400b      	ands	r3, r1
      pllmull = ( pllmull >> 18) + 2;
 8005978:	0ca4      	lsrs	r4, r4, #18
 800597a:	210f      	movs	r1, #15
 800597c:	400c      	ands	r4, r1
 800597e:	3402      	adds	r4, #2
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8005980:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005982:	4011      	ands	r1, r2
 8005984:	3101      	adds	r1, #1
      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005986:	2280      	movs	r2, #128	; 0x80
 8005988:	0252      	lsls	r2, r2, #9
 800598a:	4293      	cmp	r3, r2
 800598c:	d006      	beq.n	800599c <SystemCoreClockUpdate+0x74>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 800598e:	4808      	ldr	r0, [pc, #32]	; (80059b0 <SystemCoreClockUpdate+0x88>)
 8005990:	f7fa fbcc 	bl	800012c <__udivsi3>
 8005994:	4344      	muls	r4, r0
 8005996:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <SystemCoreClockUpdate+0x8c>)
 8005998:	601c      	str	r4, [r3, #0]
 800599a:	e7d7      	b.n	800594c <SystemCoreClockUpdate+0x24>
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 800599c:	4804      	ldr	r0, [pc, #16]	; (80059b0 <SystemCoreClockUpdate+0x88>)
 800599e:	f7fa fbc5 	bl	800012c <__udivsi3>
 80059a2:	4344      	muls	r4, r0
 80059a4:	4b03      	ldr	r3, [pc, #12]	; (80059b4 <SystemCoreClockUpdate+0x8c>)
 80059a6:	601c      	str	r4, [r3, #0]
 80059a8:	e7d0      	b.n	800594c <SystemCoreClockUpdate+0x24>
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	40021000 	.word	0x40021000
 80059b0:	007a1200 	.word	0x007a1200
 80059b4:	200001d0 	.word	0x200001d0
 80059b8:	08008894 	.word	0x08008894

080059bc <uart_irq>:
/******************************************************************************
 * INTERRUPTS HANDLING
 ******************************************************************************/

static void uart_irq(UARTName uart_name)
{
 80059bc:	b510      	push	{r4, lr}
    int8_t id = get_uart_index(uart_name);
 80059be:	f000 fd27 	bl	8006410 <get_uart_index>
 80059c2:	1e04      	subs	r4, r0, #0

    if (id >= 0) {
 80059c4:	db27      	blt.n	8005a16 <uart_irq+0x5a>
        UART_HandleTypeDef *huart = &uart_handlers[id];
        if (serial_irq_ids[id] != 0) {
 80059c6:	0083      	lsls	r3, r0, #2
 80059c8:	4a1a      	ldr	r2, [pc, #104]	; (8005a34 <uart_irq+0x78>)
 80059ca:	5898      	ldr	r0, [r3, r2]
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d022      	beq.n	8005a16 <uart_irq+0x5a>
            if (__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE) != RESET) {
 80059d0:	00e3      	lsls	r3, r4, #3
 80059d2:	1b1b      	subs	r3, r3, r4
 80059d4:	011a      	lsls	r2, r3, #4
 80059d6:	4b18      	ldr	r3, [pc, #96]	; (8005a38 <uart_irq+0x7c>)
 80059d8:	58d3      	ldr	r3, [r2, r3]
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	0612      	lsls	r2, r2, #24
 80059de:	d502      	bpl.n	80059e6 <uart_irq+0x2a>
                if (__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) {
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	061b      	lsls	r3, r3, #24
 80059e4:	d418      	bmi.n	8005a18 <uart_irq+0x5c>
                    irq_handler(serial_irq_ids[id], TxIrq);
                }
            }
            if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE) != RESET) {
 80059e6:	00e3      	lsls	r3, r4, #3
 80059e8:	1b1b      	subs	r3, r3, r4
 80059ea:	011a      	lsls	r2, r3, #4
 80059ec:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <uart_irq+0x7c>)
 80059ee:	58d3      	ldr	r3, [r2, r3]
 80059f0:	69da      	ldr	r2, [r3, #28]
 80059f2:	0692      	lsls	r2, r2, #26
 80059f4:	d502      	bpl.n	80059fc <uart_irq+0x40>
                if (__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) {
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	069b      	lsls	r3, r3, #26
 80059fa:	d412      	bmi.n	8005a22 <uart_irq+0x66>
                    irq_handler(serial_irq_ids[id], RxIrq);
                    /* Flag has been cleared when reading the content */
                }
            }
            if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) != RESET) {
 80059fc:	00e3      	lsls	r3, r4, #3
 80059fe:	1b1c      	subs	r4, r3, r4
 8005a00:	0123      	lsls	r3, r4, #4
 8005a02:	4a0d      	ldr	r2, [pc, #52]	; (8005a38 <uart_irq+0x7c>)
 8005a04:	589b      	ldr	r3, [r3, r2]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	0712      	lsls	r2, r2, #28
 8005a0a:	d504      	bpl.n	8005a16 <uart_irq+0x5a>
                if (__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) {
 8005a0c:	69da      	ldr	r2, [r3, #28]
 8005a0e:	0712      	lsls	r2, r2, #28
 8005a10:	d501      	bpl.n	8005a16 <uart_irq+0x5a>
                    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a12:	2208      	movs	r2, #8
 8005a14:	621a      	str	r2, [r3, #32]
                }
            }
        }
    }
}
 8005a16:	bd10      	pop	{r4, pc}
                    irq_handler(serial_irq_ids[id], TxIrq);
 8005a18:	4b08      	ldr	r3, [pc, #32]	; (8005a3c <uart_irq+0x80>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	4798      	blx	r3
 8005a20:	e7e1      	b.n	80059e6 <uart_irq+0x2a>
                    irq_handler(serial_irq_ids[id], RxIrq);
 8005a22:	00a3      	lsls	r3, r4, #2
 8005a24:	4a03      	ldr	r2, [pc, #12]	; (8005a34 <uart_irq+0x78>)
 8005a26:	5898      	ldr	r0, [r3, r2]
 8005a28:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <uart_irq+0x80>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4798      	blx	r3
 8005a30:	e7e4      	b.n	80059fc <uart_irq+0x40>
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	20000ab0 	.word	0x20000ab0
 8005a38:	20000b44 	.word	0x20000b44
 8005a3c:	20000aac 	.word	0x20000aac

08005a40 <uart3_8_irq>:
}
#endif

// Used for both USART3_4_IRQn and USART3_8_IRQn
static void uart3_8_irq(void)
{
 8005a40:	b510      	push	{r4, lr}
        uart_irq(UART_8);
    }
#endif
#else // TARGET_STM32F070RB, TARGET_STM32F072RB
#if defined(USART3_BASE)
    if (USART3->ISR & (UART_FLAG_TXE | UART_FLAG_RXNE | UART_FLAG_ORE)) {
 8005a42:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <uart3_8_irq+0x28>)
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	22a8      	movs	r2, #168	; 0xa8
 8005a48:	421a      	tst	r2, r3
 8005a4a:	d105      	bne.n	8005a58 <uart3_8_irq+0x18>
        uart_irq(UART_3);
    }
#endif
#if defined(USART4_BASE)
    if (USART4->ISR & (UART_FLAG_TXE | UART_FLAG_RXNE | UART_FLAG_ORE)) {
 8005a4c:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <uart3_8_irq+0x2c>)
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	22a8      	movs	r2, #168	; 0xa8
 8005a52:	421a      	tst	r2, r3
 8005a54:	d104      	bne.n	8005a60 <uart3_8_irq+0x20>
        uart_irq(UART_4);
    }
#endif
#endif
}
 8005a56:	bd10      	pop	{r4, pc}
        uart_irq(UART_3);
 8005a58:	4803      	ldr	r0, [pc, #12]	; (8005a68 <uart3_8_irq+0x28>)
 8005a5a:	f7ff ffaf 	bl	80059bc <uart_irq>
 8005a5e:	e7f5      	b.n	8005a4c <uart3_8_irq+0xc>
        uart_irq(UART_4);
 8005a60:	4802      	ldr	r0, [pc, #8]	; (8005a6c <uart3_8_irq+0x2c>)
 8005a62:	f7ff ffab 	bl	80059bc <uart_irq>
}
 8005a66:	e7f6      	b.n	8005a56 <uart3_8_irq+0x16>
 8005a68:	40004800 	.word	0x40004800
 8005a6c:	40004c00 	.word	0x40004c00

08005a70 <uart2_irq>:
{
 8005a70:	b510      	push	{r4, lr}
    uart_irq(UART_2);
 8005a72:	4802      	ldr	r0, [pc, #8]	; (8005a7c <uart2_irq+0xc>)
 8005a74:	f7ff ffa2 	bl	80059bc <uart_irq>
}
 8005a78:	bd10      	pop	{r4, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	40004400 	.word	0x40004400

08005a80 <uart1_irq>:
{
 8005a80:	b510      	push	{r4, lr}
    uart_irq(UART_1);
 8005a82:	4802      	ldr	r0, [pc, #8]	; (8005a8c <uart1_irq+0xc>)
 8005a84:	f7ff ff9a 	bl	80059bc <uart_irq>
}
 8005a88:	bd10      	pop	{r4, pc}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	40013800 	.word	0x40013800

08005a90 <serial_irq_handler>:

void serial_irq_handler(serial_t *obj, uart_irq_handler handler, uint32_t id)
{
    struct serial_s *obj_s = SERIAL_S(obj);

    irq_handler = handler;
 8005a90:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <serial_irq_handler+0x10>)
 8005a92:	6019      	str	r1, [r3, #0]
    serial_irq_ids[obj_s->index] = id;
 8005a94:	6843      	ldr	r3, [r0, #4]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4902      	ldr	r1, [pc, #8]	; (8005aa4 <serial_irq_handler+0x14>)
 8005a9a:	505a      	str	r2, [r3, r1]
}
 8005a9c:	4770      	bx	lr
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	20000aac 	.word	0x20000aac
 8005aa4:	20000ab0 	.word	0x20000ab0

08005aa8 <serial_irq_set>:

void serial_irq_set(serial_t *obj, SerialIrq irq, uint32_t enable)
{
 8005aa8:	b570      	push	{r4, r5, r6, lr}
    struct serial_s *obj_s = SERIAL_S(obj);
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8005aaa:	6845      	ldr	r5, [r0, #4]
    IRQn_Type irq_n = (IRQn_Type)0;
    uint32_t vector = 0;

#if defined(USART1_BASE)
    if (obj_s->uart == UART_1) {
 8005aac:	6803      	ldr	r3, [r0, #0]
 8005aae:	4838      	ldr	r0, [pc, #224]	; (8005b90 <serial_irq_set+0xe8>)
 8005ab0:	4283      	cmp	r3, r0
 8005ab2:	d022      	beq.n	8005afa <serial_irq_set+0x52>
    uint32_t vector = 0;
 8005ab4:	2000      	movs	r0, #0
    IRQn_Type irq_n = (IRQn_Type)0;
 8005ab6:	2400      	movs	r4, #0
        vector = (uint32_t)&uart1_irq;
    }
#endif

#if defined(USART2_BASE)
    if (obj_s->uart == UART_2) {
 8005ab8:	4e36      	ldr	r6, [pc, #216]	; (8005b94 <serial_irq_set+0xec>)
 8005aba:	42b3      	cmp	r3, r6
 8005abc:	d020      	beq.n	8005b00 <serial_irq_set+0x58>
        vector = (uint32_t)&uart2_irq;
    }
#endif

#if defined(USART3_BASE)
    if (obj_s->uart == UART_3) {
 8005abe:	4e36      	ldr	r6, [pc, #216]	; (8005b98 <serial_irq_set+0xf0>)
 8005ac0:	42b3      	cmp	r3, r6
 8005ac2:	d020      	beq.n	8005b06 <serial_irq_set+0x5e>
        vector = (uint32_t)&uart3_8_irq;
    }
#endif

#if defined(USART4_BASE)
    if (obj_s->uart == UART_4) {
 8005ac4:	4e35      	ldr	r6, [pc, #212]	; (8005b9c <serial_irq_set+0xf4>)
 8005ac6:	42b3      	cmp	r3, r6
 8005ac8:	d020      	beq.n	8005b0c <serial_irq_set+0x64>
        irq_n = USART3_8_IRQn;
        vector = (uint32_t)&uart3_8_irq;
    }
#endif

    if (enable) {
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	d02b      	beq.n	8005b26 <serial_irq_set+0x7e>
        if (irq == RxIrq) {
 8005ace:	2900      	cmp	r1, #0
 8005ad0:	d11f      	bne.n	8005b12 <serial_irq_set+0x6a>
            __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ad2:	00eb      	lsls	r3, r5, #3
 8005ad4:	1b5d      	subs	r5, r3, r5
 8005ad6:	012b      	lsls	r3, r5, #4
 8005ad8:	4a31      	ldr	r2, [pc, #196]	; (8005ba0 <serial_irq_set+0xf8>)
 8005ada:	589a      	ldr	r2, [r3, r2]
 8005adc:	6813      	ldr	r3, [r2, #0]
 8005ade:	3120      	adds	r1, #32
 8005ae0:	430b      	orrs	r3, r1
 8005ae2:	6013      	str	r3, [r2, #0]
        } else { // TxIrq
            __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
        }
        NVIC_SetVector(irq_n, vector);
 8005ae4:	0001      	movs	r1, r0
 8005ae6:	0020      	movs	r0, r4
 8005ae8:	f7fe fb2c 	bl	8004144 <NVIC_SetVector>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8005aec:	2c00      	cmp	r4, #0
 8005aee:	db03      	blt.n	8005af8 <serial_irq_set+0x50>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005af0:	2301      	movs	r3, #1
 8005af2:	40a3      	lsls	r3, r4
 8005af4:	4a2b      	ldr	r2, [pc, #172]	; (8005ba4 <serial_irq_set+0xfc>)
 8005af6:	6013      	str	r3, [r2, #0]

        if (all_disabled) {
            NVIC_DisableIRQ(irq_n);
        }
    }
}
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
        vector = (uint32_t)&uart1_irq;
 8005afa:	482b      	ldr	r0, [pc, #172]	; (8005ba8 <serial_irq_set+0x100>)
        irq_n = USART1_IRQn;
 8005afc:	241b      	movs	r4, #27
 8005afe:	e7db      	b.n	8005ab8 <serial_irq_set+0x10>
        vector = (uint32_t)&uart2_irq;
 8005b00:	482a      	ldr	r0, [pc, #168]	; (8005bac <serial_irq_set+0x104>)
        irq_n = USART2_IRQn;
 8005b02:	241c      	movs	r4, #28
 8005b04:	e7db      	b.n	8005abe <serial_irq_set+0x16>
        vector = (uint32_t)&uart3_8_irq;
 8005b06:	482a      	ldr	r0, [pc, #168]	; (8005bb0 <serial_irq_set+0x108>)
        irq_n = USART3_4_IRQn;
 8005b08:	241d      	movs	r4, #29
 8005b0a:	e7db      	b.n	8005ac4 <serial_irq_set+0x1c>
        vector = (uint32_t)&uart3_8_irq;
 8005b0c:	4828      	ldr	r0, [pc, #160]	; (8005bb0 <serial_irq_set+0x108>)
        irq_n = USART3_4_IRQn;
 8005b0e:	241d      	movs	r4, #29
 8005b10:	e7db      	b.n	8005aca <serial_irq_set+0x22>
            __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005b12:	00eb      	lsls	r3, r5, #3
 8005b14:	1b5d      	subs	r5, r3, r5
 8005b16:	012b      	lsls	r3, r5, #4
 8005b18:	4a21      	ldr	r2, [pc, #132]	; (8005ba0 <serial_irq_set+0xf8>)
 8005b1a:	589a      	ldr	r2, [r3, r2]
 8005b1c:	6813      	ldr	r3, [r2, #0]
 8005b1e:	2180      	movs	r1, #128	; 0x80
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	e7de      	b.n	8005ae4 <serial_irq_set+0x3c>
        if (irq == RxIrq) {
 8005b26:	2900      	cmp	r1, #0
 8005b28:	d11d      	bne.n	8005b66 <serial_irq_set+0xbe>
            __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b2a:	491d      	ldr	r1, [pc, #116]	; (8005ba0 <serial_irq_set+0xf8>)
 8005b2c:	00eb      	lsls	r3, r5, #3
 8005b2e:	1b58      	subs	r0, r3, r5
 8005b30:	0102      	lsls	r2, r0, #4
 8005b32:	5850      	ldr	r0, [r2, r1]
 8005b34:	6802      	ldr	r2, [r0, #0]
 8005b36:	2620      	movs	r6, #32
 8005b38:	43b2      	bics	r2, r6
 8005b3a:	6002      	str	r2, [r0, #0]
            if ((huart->Instance->CR1 & USART_CR1_TXEIE) == 0) {
 8005b3c:	1b5d      	subs	r5, r3, r5
 8005b3e:	012b      	lsls	r3, r5, #4
 8005b40:	585b      	ldr	r3, [r3, r1]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	061b      	lsls	r3, r3, #24
 8005b46:	d51f      	bpl.n	8005b88 <serial_irq_set+0xe0>
        int all_disabled = 0;
 8005b48:	2300      	movs	r3, #0
        if (all_disabled) {
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0d4      	beq.n	8005af8 <serial_irq_set+0x50>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8005b4e:	2c00      	cmp	r4, #0
 8005b50:	dbd2      	blt.n	8005af8 <serial_irq_set+0x50>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b52:	2301      	movs	r3, #1
 8005b54:	40a3      	lsls	r3, r4
 8005b56:	2280      	movs	r2, #128	; 0x80
 8005b58:	4912      	ldr	r1, [pc, #72]	; (8005ba4 <serial_irq_set+0xfc>)
 8005b5a:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005b60:	f3bf 8f6f 	isb	sy
}
 8005b64:	e7c8      	b.n	8005af8 <serial_irq_set+0x50>
            __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b66:	490e      	ldr	r1, [pc, #56]	; (8005ba0 <serial_irq_set+0xf8>)
 8005b68:	00eb      	lsls	r3, r5, #3
 8005b6a:	1b58      	subs	r0, r3, r5
 8005b6c:	0102      	lsls	r2, r0, #4
 8005b6e:	5850      	ldr	r0, [r2, r1]
 8005b70:	6802      	ldr	r2, [r0, #0]
 8005b72:	2680      	movs	r6, #128	; 0x80
 8005b74:	43b2      	bics	r2, r6
 8005b76:	6002      	str	r2, [r0, #0]
            if ((huart->Instance->CR1 & USART_CR1_RXNEIE) == 0) {
 8005b78:	1b5d      	subs	r5, r3, r5
 8005b7a:	012b      	lsls	r3, r5, #4
 8005b7c:	585b      	ldr	r3, [r3, r1]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	069b      	lsls	r3, r3, #26
 8005b82:	d503      	bpl.n	8005b8c <serial_irq_set+0xe4>
        int all_disabled = 0;
 8005b84:	2300      	movs	r3, #0
 8005b86:	e7e0      	b.n	8005b4a <serial_irq_set+0xa2>
                all_disabled = 1;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e7de      	b.n	8005b4a <serial_irq_set+0xa2>
                all_disabled = 1;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e7dc      	b.n	8005b4a <serial_irq_set+0xa2>
 8005b90:	40013800 	.word	0x40013800
 8005b94:	40004400 	.word	0x40004400
 8005b98:	40004800 	.word	0x40004800
 8005b9c:	40004c00 	.word	0x40004c00
 8005ba0:	20000b44 	.word	0x20000b44
 8005ba4:	e000e100 	.word	0xe000e100
 8005ba8:	08005a81 	.word	0x08005a81
 8005bac:	08005a71 	.word	0x08005a71
 8005bb0:	08005a41 	.word	0x08005a41

08005bb4 <serial_getc>:
/******************************************************************************
 * READ/WRITE
 ******************************************************************************/

int serial_getc(serial_t *obj)
{
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	0004      	movs	r4, r0
    struct serial_s *obj_s = SERIAL_S(obj);
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8005bb8:	6845      	ldr	r5, [r0, #4]

    while (!serial_readable(obj));
 8005bba:	0020      	movs	r0, r4
 8005bbc:	f000 fbbc 	bl	8006338 <serial_readable>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d0fa      	beq.n	8005bba <serial_getc+0x6>
    return (int)(huart->Instance->RDR & (uint16_t)0xFF);
 8005bc4:	00eb      	lsls	r3, r5, #3
 8005bc6:	1b5b      	subs	r3, r3, r5
 8005bc8:	011a      	lsls	r2, r3, #4
 8005bca:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <serial_getc+0x24>)
 8005bcc:	58d3      	ldr	r3, [r2, r3]
 8005bce:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8005bd0:	23ff      	movs	r3, #255	; 0xff
 8005bd2:	4018      	ands	r0, r3
}
 8005bd4:	bd70      	pop	{r4, r5, r6, pc}
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	20000b44 	.word	0x20000b44

08005bdc <serial_putc>:

void serial_putc(serial_t *obj, int c)
{
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	0004      	movs	r4, r0
 8005be0:	000e      	movs	r6, r1
    struct serial_s *obj_s = SERIAL_S(obj);
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8005be2:	6845      	ldr	r5, [r0, #4]

    while (!serial_writable(obj));
 8005be4:	0020      	movs	r0, r4
 8005be6:	f000 fbbf 	bl	8006368 <serial_writable>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d0fa      	beq.n	8005be4 <serial_putc+0x8>
    huart->Instance->TDR = (uint32_t)(c & (uint16_t)0xFF);
 8005bee:	00eb      	lsls	r3, r5, #3
 8005bf0:	1b5b      	subs	r3, r3, r5
 8005bf2:	011a      	lsls	r2, r3, #4
 8005bf4:	4b02      	ldr	r3, [pc, #8]	; (8005c00 <serial_putc+0x24>)
 8005bf6:	58d3      	ldr	r3, [r2, r3]
 8005bf8:	21ff      	movs	r1, #255	; 0xff
 8005bfa:	4031      	ands	r1, r6
 8005bfc:	8519      	strh	r1, [r3, #40]	; 0x28
}
 8005bfe:	bd70      	pop	{r4, r5, r6, pc}
 8005c00:	20000b44 	.word	0x20000b44

08005c04 <analogin_read>:
    value = ((value << 4) & (uint16_t)0xFFF0) | ((value >> 8) & (uint16_t)0x000F);
    return value;
}

float analogin_read(analogin_t *obj)
{
 8005c04:	b510      	push	{r4, lr}
    uint16_t value = adc_read(obj);
 8005c06:	f7fe fbe3 	bl	80043d0 <adc_read>
    return (float)value * (1.0f / (float)0xFFF); // 12 bits range
 8005c0a:	f7fb faf9 	bl	8001200 <__aeabi_ui2f>
 8005c0e:	4902      	ldr	r1, [pc, #8]	; (8005c18 <analogin_read+0x14>)
 8005c10:	f7fa ffca 	bl	8000ba8 <__aeabi_fmul>
}
 8005c14:	bd10      	pop	{r4, pc}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	39800801 	.word	0x39800801

08005c1c <Set_GPIO_Clock>:

extern const uint32_t ll_pin_defines[16];

// Enable GPIO clock and return GPIO base address
GPIO_TypeDef *Set_GPIO_Clock(uint32_t port_idx)
{
 8005c1c:	b500      	push	{lr}
 8005c1e:	b087      	sub	sp, #28
    uint32_t gpio_add = 0;
    switch (port_idx) {
 8005c20:	2805      	cmp	r0, #5
 8005c22:	d841      	bhi.n	8005ca8 <Set_GPIO_Clock+0x8c>
 8005c24:	0080      	lsls	r0, r0, #2
 8005c26:	4b23      	ldr	r3, [pc, #140]	; (8005cb4 <Set_GPIO_Clock+0x98>)
 8005c28:	581b      	ldr	r3, [r3, r0]
 8005c2a:	469f      	mov	pc, r3
        case PortA:
            gpio_add = GPIOA_BASE;
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c2c:	4a22      	ldr	r2, [pc, #136]	; (8005cb8 <Set_GPIO_Clock+0x9c>)
 8005c2e:	6951      	ldr	r1, [r2, #20]
 8005c30:	2080      	movs	r0, #128	; 0x80
 8005c32:	0280      	lsls	r0, r0, #10
 8005c34:	4301      	orrs	r1, r0
 8005c36:	6151      	str	r1, [r2, #20]
 8005c38:	6953      	ldr	r3, [r2, #20]
 8005c3a:	4003      	ands	r3, r0
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	9b01      	ldr	r3, [sp, #4]
            gpio_add = GPIOA_BASE;
 8005c40:	2090      	movs	r0, #144	; 0x90
 8005c42:	05c0      	lsls	r0, r0, #23
        default:
            error("Pinmap error: wrong port number.");
            break;
    }
    return (GPIO_TypeDef *) gpio_add;
}
 8005c44:	b007      	add	sp, #28
 8005c46:	bd00      	pop	{pc}
            __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c48:	4a1b      	ldr	r2, [pc, #108]	; (8005cb8 <Set_GPIO_Clock+0x9c>)
 8005c4a:	6951      	ldr	r1, [r2, #20]
 8005c4c:	2080      	movs	r0, #128	; 0x80
 8005c4e:	02c0      	lsls	r0, r0, #11
 8005c50:	4301      	orrs	r1, r0
 8005c52:	6151      	str	r1, [r2, #20]
 8005c54:	6953      	ldr	r3, [r2, #20]
 8005c56:	4003      	ands	r3, r0
 8005c58:	9302      	str	r3, [sp, #8]
 8005c5a:	9b02      	ldr	r3, [sp, #8]
            gpio_add = GPIOB_BASE;
 8005c5c:	4817      	ldr	r0, [pc, #92]	; (8005cbc <Set_GPIO_Clock+0xa0>)
            break;
 8005c5e:	e7f1      	b.n	8005c44 <Set_GPIO_Clock+0x28>
            __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c60:	4a15      	ldr	r2, [pc, #84]	; (8005cb8 <Set_GPIO_Clock+0x9c>)
 8005c62:	6951      	ldr	r1, [r2, #20]
 8005c64:	2080      	movs	r0, #128	; 0x80
 8005c66:	0300      	lsls	r0, r0, #12
 8005c68:	4301      	orrs	r1, r0
 8005c6a:	6151      	str	r1, [r2, #20]
 8005c6c:	6953      	ldr	r3, [r2, #20]
 8005c6e:	4003      	ands	r3, r0
 8005c70:	9303      	str	r3, [sp, #12]
 8005c72:	9b03      	ldr	r3, [sp, #12]
            gpio_add = GPIOC_BASE;
 8005c74:	4812      	ldr	r0, [pc, #72]	; (8005cc0 <Set_GPIO_Clock+0xa4>)
            break;
 8005c76:	e7e5      	b.n	8005c44 <Set_GPIO_Clock+0x28>
            __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c78:	4a0f      	ldr	r2, [pc, #60]	; (8005cb8 <Set_GPIO_Clock+0x9c>)
 8005c7a:	6951      	ldr	r1, [r2, #20]
 8005c7c:	2080      	movs	r0, #128	; 0x80
 8005c7e:	0340      	lsls	r0, r0, #13
 8005c80:	4301      	orrs	r1, r0
 8005c82:	6151      	str	r1, [r2, #20]
 8005c84:	6953      	ldr	r3, [r2, #20]
 8005c86:	4003      	ands	r3, r0
 8005c88:	9304      	str	r3, [sp, #16]
 8005c8a:	9b04      	ldr	r3, [sp, #16]
            gpio_add = GPIOD_BASE;
 8005c8c:	480d      	ldr	r0, [pc, #52]	; (8005cc4 <Set_GPIO_Clock+0xa8>)
            break;
 8005c8e:	e7d9      	b.n	8005c44 <Set_GPIO_Clock+0x28>
            __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c90:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <Set_GPIO_Clock+0x9c>)
 8005c92:	6951      	ldr	r1, [r2, #20]
 8005c94:	2080      	movs	r0, #128	; 0x80
 8005c96:	03c0      	lsls	r0, r0, #15
 8005c98:	4301      	orrs	r1, r0
 8005c9a:	6151      	str	r1, [r2, #20]
 8005c9c:	6953      	ldr	r3, [r2, #20]
 8005c9e:	4003      	ands	r3, r0
 8005ca0:	9305      	str	r3, [sp, #20]
 8005ca2:	9b05      	ldr	r3, [sp, #20]
            gpio_add = GPIOF_BASE;
 8005ca4:	4808      	ldr	r0, [pc, #32]	; (8005cc8 <Set_GPIO_Clock+0xac>)
            break;
 8005ca6:	e7cd      	b.n	8005c44 <Set_GPIO_Clock+0x28>
            error("Pinmap error: wrong port number.");
 8005ca8:	4808      	ldr	r0, [pc, #32]	; (8005ccc <Set_GPIO_Clock+0xb0>)
 8005caa:	f7fd fdd3 	bl	8003854 <error>
    uint32_t gpio_add = 0;
 8005cae:	2000      	movs	r0, #0
            break;
 8005cb0:	e7c8      	b.n	8005c44 <Set_GPIO_Clock+0x28>
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	080088e4 	.word	0x080088e4
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	48000400 	.word	0x48000400
 8005cc0:	48000800 	.word	0x48000800
 8005cc4:	48000c00 	.word	0x48000c00
 8005cc8:	48001400 	.word	0x48001400
 8005ccc:	080088fc 	.word	0x080088fc

08005cd0 <gpio_set>:

uint32_t gpio_set(PinName pin)
{
 8005cd0:	b510      	push	{r4, lr}
 8005cd2:	0004      	movs	r4, r0
    MBED_ASSERT(pin != (PinName)NC);

    pin_function(pin, STM_PIN_DATA(STM_MODE_INPUT, GPIO_NOPULL, 0));
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	f000 f885 	bl	8005de4 <pin_function>

    return (uint32_t)(1 << ((uint32_t)pin & 0xF)); // Return the pin mask
 8005cda:	230f      	movs	r3, #15
 8005cdc:	401c      	ands	r4, r3
 8005cde:	2001      	movs	r0, #1
 8005ce0:	40a0      	lsls	r0, r4
}
 8005ce2:	bd10      	pop	{r4, pc}

08005ce4 <gpio_init>:


void gpio_init(gpio_t *obj, PinName pin)
{
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	0004      	movs	r4, r0
 8005ce8:	000e      	movs	r6, r1
    obj->pin = pin;
 8005cea:	8221      	strh	r1, [r4, #16]
    if (pin == (PinName)NC) {
 8005cec:	1c4b      	adds	r3, r1, #1
 8005cee:	d018      	beq.n	8005d22 <gpio_init+0x3e>
        return;
    }

    uint32_t port_index = STM_PORT(pin);
 8005cf0:	090b      	lsrs	r3, r1, #4
 8005cf2:	200f      	movs	r0, #15
 8005cf4:	4018      	ands	r0, r3

    // Enable GPIO clock
    GPIO_TypeDef *gpio = Set_GPIO_Clock(port_index);
 8005cf6:	f7ff ff91 	bl	8005c1c <Set_GPIO_Clock>
 8005cfa:	0005      	movs	r5, r0

    // Fill GPIO object structure for future use
    obj->mask    = gpio_set(pin);
 8005cfc:	0030      	movs	r0, r6
 8005cfe:	f7ff ffe7 	bl	8005cd0 <gpio_set>
 8005d02:	6020      	str	r0, [r4, #0]
    obj->gpio  = gpio;
 8005d04:	6165      	str	r5, [r4, #20]
    obj->ll_pin  = ll_pin_defines[STM_PIN(obj->pin)];
 8005d06:	8a22      	ldrh	r2, [r4, #16]
 8005d08:	230f      	movs	r3, #15
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4a05      	ldr	r2, [pc, #20]	; (8005d24 <gpio_init+0x40>)
 8005d10:	589b      	ldr	r3, [r3, r2]
 8005d12:	61a3      	str	r3, [r4, #24]
    obj->reg_in  = &gpio->IDR;
 8005d14:	002b      	movs	r3, r5
 8005d16:	3310      	adds	r3, #16
 8005d18:	6063      	str	r3, [r4, #4]
    obj->reg_set = &gpio->BSRR;
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	60a3      	str	r3, [r4, #8]
#ifdef GPIO_IP_WITHOUT_BRR
    obj->reg_clr = &gpio->BSRR;
#else
    obj->reg_clr = &gpio->BRR;
 8005d1e:	3528      	adds	r5, #40	; 0x28
 8005d20:	60e5      	str	r5, [r4, #12]
#endif
}
 8005d22:	bd70      	pop	{r4, r5, r6, pc}
 8005d24:	08008920 	.word	0x08008920

08005d28 <gpio_mode>:

void gpio_mode(gpio_t *obj, PinMode mode)
{
 8005d28:	b510      	push	{r4, lr}
    pin_mode(obj->pin, mode);
 8005d2a:	2310      	movs	r3, #16
 8005d2c:	5ec0      	ldrsh	r0, [r0, r3]
 8005d2e:	f000 f8e3 	bl	8005ef8 <pin_mode>
}
 8005d32:	bd10      	pop	{r4, pc}

08005d34 <gpio_dir>:

inline void gpio_dir(gpio_t *obj, PinDirection direction)
{
 8005d34:	b510      	push	{r4, lr}
    if (direction == PIN_INPUT) {
 8005d36:	2900      	cmp	r1, #0
 8005d38:	d009      	beq.n	8005d4e <gpio_dir+0x1a>
        LL_GPIO_SetPinMode(obj->gpio, obj->ll_pin, LL_GPIO_MODE_INPUT);
    } else {
        LL_GPIO_SetPinMode(obj->gpio, obj->ll_pin, LL_GPIO_MODE_OUTPUT);
 8005d3a:	6944      	ldr	r4, [r0, #20]
 8005d3c:	6983      	ldr	r3, [r0, #24]
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8005d3e:	6822      	ldr	r2, [r4, #0]
 8005d40:	435b      	muls	r3, r3
 8005d42:	0059      	lsls	r1, r3, #1
 8005d44:	18c9      	adds	r1, r1, r3
 8005d46:	438a      	bics	r2, r1
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	6023      	str	r3, [r4, #0]
    }
}
 8005d4c:	bd10      	pop	{r4, pc}
        LL_GPIO_SetPinMode(obj->gpio, obj->ll_pin, LL_GPIO_MODE_INPUT);
 8005d4e:	6944      	ldr	r4, [r0, #20]
 8005d50:	6983      	ldr	r3, [r0, #24]
 8005d52:	6822      	ldr	r2, [r4, #0]
 8005d54:	435b      	muls	r3, r3
 8005d56:	0059      	lsls	r1, r3, #1
 8005d58:	18cb      	adds	r3, r1, r3
 8005d5a:	439a      	bics	r2, r3
 8005d5c:	6022      	str	r2, [r4, #0]
 8005d5e:	e7f5      	b.n	8005d4c <gpio_dir+0x18>

08005d60 <HAL_InitTick>:
#endif

// Overwrite default HAL functions defined as "weak"

HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d60:	b510      	push	{r4, lr}
#if TIM_MST_BIT_WIDTH == 16
    init_16bit_timer();
 8005d62:	f000 fc43 	bl	80065ec <init_16bit_timer>
#else
    init_32bit_timer();
#endif
    return HAL_OK;
}
 8005d66:	2000      	movs	r0, #0
 8005d68:	bd10      	pop	{r4, pc}
	...

08005d6c <HAL_GetTick>:

uint32_t HAL_GetTick()
{
 8005d6c:	b510      	push	{r4, lr}
#if TIM_MST_BIT_WIDTH == 16
    uint32_t new_time;
    if (mbed_sdk_inited) {
 8005d6e:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <HAL_GetTick+0x4c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d111      	bne.n	8005d9a <HAL_GetTick+0x2e>
        new_time = ticker_read_us(get_us_ticker_data()) + prev_time;
        prev_time = 0; // Use this time only once
        return (new_time / 1000);
    }
    else {
        new_time = us_ticker_read();
 8005d76:	f000 fcb7 	bl	80066e8 <us_ticker_read>
 8005d7a:	0001      	movs	r1, r0
        elapsed_time += (new_time - prev_time) & 0xFFFF; // Only use the lower 16 bits
 8005d7c:	4a0f      	ldr	r2, [pc, #60]	; (8005dbc <HAL_GetTick+0x50>)
 8005d7e:	6813      	ldr	r3, [r2, #0]
 8005d80:	1ac3      	subs	r3, r0, r3
 8005d82:	041b      	lsls	r3, r3, #16
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	4c0e      	ldr	r4, [pc, #56]	; (8005dc0 <HAL_GetTick+0x54>)
 8005d88:	6820      	ldr	r0, [r4, #0]
 8005d8a:	1818      	adds	r0, r3, r0
 8005d8c:	6020      	str	r0, [r4, #0]
        prev_time = new_time;
 8005d8e:	6011      	str	r1, [r2, #0]
        return (elapsed_time / 1000);
 8005d90:	21fa      	movs	r1, #250	; 0xfa
 8005d92:	0089      	lsls	r1, r1, #2
 8005d94:	f7fa f9ca 	bl	800012c <__udivsi3>
    }
    else {
        return (us_ticker_read() / 1000);
    }
#endif
}
 8005d98:	bd10      	pop	{r4, pc}
        new_time = ticker_read_us(get_us_ticker_data()) + prev_time;
 8005d9a:	f7fd fabb 	bl	8003314 <get_us_ticker_data>
 8005d9e:	f7fd faa6 	bl	80032ee <ticker_read_us>
 8005da2:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <HAL_GetTick+0x50>)
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4694      	mov	ip, r2
 8005da8:	4460      	add	r0, ip
        prev_time = 0; // Use this time only once
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
        return (new_time / 1000);
 8005dae:	21fa      	movs	r1, #250	; 0xfa
 8005db0:	0089      	lsls	r1, r1, #2
 8005db2:	f7fa f9bb 	bl	800012c <__udivsi3>
 8005db6:	e7ef      	b.n	8005d98 <HAL_GetTick+0x2c>
 8005db8:	20000ac8 	.word	0x20000ac8
 8005dbc:	20000ac4 	.word	0x20000ac4
 8005dc0:	20000ac0 	.word	0x20000ac0

08005dc4 <mbed_sdk_init>:

int mbed_sdk_inited = 0;

// This function is called after RAM initialization and before main.
void mbed_sdk_init()
{
 8005dc4:	b510      	push	{r4, lr}
        SCB_EnableDCache();
    }
#endif /* TARGET_STM32F7 */

    // Update the SystemCoreClock variable.
    SystemCoreClockUpdate();
 8005dc6:	f7ff fdaf 	bl	8005928 <SystemCoreClockUpdate>
    HAL_Init();
 8005dca:	f7fe fb6b 	bl	80044a4 <HAL_Init>

    /* Configure the System clock source, PLL Multiplier and Divider factors,
       AHB/APBx prescalers and Flash settings */
    SetSysClock();
 8005dce:	f7fe fa87 	bl	80042e0 <SetSysClock>
    SystemCoreClockUpdate();
 8005dd2:	f7ff fda9 	bl	8005928 <SystemCoreClockUpdate>

    mbed_sdk_inited = 1;
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	4b01      	ldr	r3, [pc, #4]	; (8005de0 <mbed_sdk_init+0x1c>)
 8005dda:	601a      	str	r2, [r3, #0]
}
 8005ddc:	bd10      	pop	{r4, pc}
 8005dde:	46c0      	nop			; (mov r8, r8)
 8005de0:	20000ac8 	.word	0x20000ac8

08005de4 <pin_function>:

/**
 * Configure pin (mode, speed, output type and pull-up/pull-down)
 */
void pin_function(PinName pin, int data)
{
 8005de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de6:	46d6      	mov	lr, sl
 8005de8:	464f      	mov	r7, r9
 8005dea:	4646      	mov	r6, r8
 8005dec:	b5c0      	push	{r6, r7, lr}
 8005dee:	0007      	movs	r7, r0
 8005df0:	000e      	movs	r6, r1
    MBED_ASSERT(pin != (PinName)NC);

    // Get the pin informations
    uint32_t mode  = STM_PIN_FUNCTION(data);
 8005df2:	2507      	movs	r5, #7
 8005df4:	400d      	ands	r5, r1
    uint32_t afnum = STM_PIN_AFNUM(data);
 8005df6:	120b      	asrs	r3, r1, #8
 8005df8:	200f      	movs	r0, #15
 8005dfa:	4003      	ands	r3, r0
 8005dfc:	4698      	mov	r8, r3
    uint32_t port = STM_PORT(pin);
 8005dfe:	093b      	lsrs	r3, r7, #4
 8005e00:	4018      	ands	r0, r3
    uint32_t ll_pin  = ll_pin_defines[STM_PIN(pin)];
 8005e02:	230f      	movs	r3, #15
 8005e04:	403b      	ands	r3, r7
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4a3a      	ldr	r2, [pc, #232]	; (8005ef4 <pin_function+0x110>)
 8005e0a:	589c      	ldr	r4, [r3, r2]
    uint32_t ll_mode = 0;

    // Enable GPIO clock
    GPIO_TypeDef *gpio = Set_GPIO_Clock(port);
 8005e0c:	f7ff ff06 	bl	8005c1c <Set_GPIO_Clock>
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8005e10:	6883      	ldr	r3, [r0, #8]
 8005e12:	4699      	mov	r9, r3
 8005e14:	0022      	movs	r2, r4
 8005e16:	4362      	muls	r2, r4
 8005e18:	0053      	lsls	r3, r2, #1
 8005e1a:	469a      	mov	sl, r3
 8005e1c:	4492      	add	sl, r2
 8005e1e:	4653      	mov	r3, sl
 8005e20:	43d9      	mvns	r1, r3
 8005e22:	468c      	mov	ip, r1
 8005e24:	464b      	mov	r3, r9
 8005e26:	400b      	ands	r3, r1
 8005e28:	0019      	movs	r1, r3
 8005e2a:	4653      	mov	r3, sl
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinSpeed(gpio, ll_pin, LL_GPIO_SPEED_FREQ_HIGH);
#if defined (TARGET_STM32F1)
    }
#endif

    switch (mode) {
 8005e30:	2d02      	cmp	r5, #2
 8005e32:	d005      	beq.n	8005e40 <pin_function+0x5c>
 8005e34:	2d03      	cmp	r5, #3
 8005e36:	d027      	beq.n	8005e88 <pin_function+0xa4>
 8005e38:	2d01      	cmp	r5, #1
 8005e3a:	d025      	beq.n	8005e88 <pin_function+0xa4>
    uint32_t ll_mode = 0;
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	e024      	b.n	8005e8a <pin_function+0xa6>
 8005e40:	230f      	movs	r3, #15
 8005e42:	401f      	ands	r7, r3
    }
}

static inline void stm_pin_SetAFPin(GPIO_TypeDef *gpio, PinName pin, uint32_t afnum)
{
    uint32_t ll_pin  = ll_pin_defines[STM_PIN(pin)];
 8005e44:	00b9      	lsls	r1, r7, #2
 8005e46:	4b2b      	ldr	r3, [pc, #172]	; (8005ef4 <pin_function+0x110>)
 8005e48:	58c9      	ldr	r1, [r1, r3]

    if (STM_PIN(pin) > 7) {
 8005e4a:	2f07      	cmp	r7, #7
 8005e4c:	d80d      	bhi.n	8005e6a <pin_function+0x86>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8005e4e:	6a07      	ldr	r7, [r0, #32]
 8005e50:	000b      	movs	r3, r1
 8005e52:	434b      	muls	r3, r1
 8005e54:	434b      	muls	r3, r1
 8005e56:	434b      	muls	r3, r1
 8005e58:	0119      	lsls	r1, r3, #4
 8005e5a:	1ac9      	subs	r1, r1, r3
 8005e5c:	438f      	bics	r7, r1
 8005e5e:	4641      	mov	r1, r8
 8005e60:	434b      	muls	r3, r1
 8005e62:	433b      	orrs	r3, r7
 8005e64:	6203      	str	r3, [r0, #32]
            break;
        case STM_PIN_OUTPUT:
            ll_mode = LL_GPIO_MODE_OUTPUT;
            break;
        case STM_PIN_ALTERNATE:
            ll_mode = LL_GPIO_MODE_ALTERNATE;
 8005e66:	0029      	movs	r1, r5
 8005e68:	e00f      	b.n	8005e8a <pin_function+0xa6>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8005e6a:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8005e6c:	0a0b      	lsrs	r3, r1, #8
 8005e6e:	0019      	movs	r1, r3
 8005e70:	4359      	muls	r1, r3
 8005e72:	4359      	muls	r1, r3
 8005e74:	434b      	muls	r3, r1
 8005e76:	0119      	lsls	r1, r3, #4
 8005e78:	1ac9      	subs	r1, r1, r3
 8005e7a:	438f      	bics	r7, r1
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	434b      	muls	r3, r1
 8005e80:	433b      	orrs	r3, r7
 8005e82:	6243      	str	r3, [r0, #36]	; 0x24
 8005e84:	0029      	movs	r1, r5
 8005e86:	e000      	b.n	8005e8a <pin_function+0xa6>
            ll_mode = LL_GPIO_MODE_OUTPUT;
 8005e88:	0029      	movs	r1, r5
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8005e8a:	6803      	ldr	r3, [r0, #0]
 8005e8c:	4667      	mov	r7, ip
 8005e8e:	403b      	ands	r3, r7
 8005e90:	434a      	muls	r2, r1
 8005e92:	4313      	orrs	r3, r2
 8005e94:	6003      	str	r3, [r0, #0]
        LL_GPIO_DisablePinAnalogControl(gpio, ll_pin);
    }
#endif

    /*  For now by default use Speed HIGH for output or alt modes */
    if ((mode == STM_PIN_OUTPUT) || (mode == STM_PIN_ALTERNATE)) {
 8005e96:	3d01      	subs	r5, #1
 8005e98:	2d01      	cmp	r5, #1
 8005e9a:	d90d      	bls.n	8005eb8 <pin_function+0xd4>
        } else {
            LL_GPIO_SetPinOutputType(gpio, ll_pin, LL_GPIO_OUTPUT_PUSHPULL);
        }
    }

    stm_pin_PullConfig(gpio, ll_pin, STM_PIN_PUPD(data));
 8005e9c:	1136      	asrs	r6, r6, #4
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	401e      	ands	r6, r3
    switch (pull_config) {
 8005ea2:	2e01      	cmp	r6, #1
 8005ea4:	d012      	beq.n	8005ecc <pin_function+0xe8>
 8005ea6:	2e02      	cmp	r6, #2
 8005ea8:	d01c      	beq.n	8005ee4 <pin_function+0x100>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8005eaa:	68c3      	ldr	r3, [r0, #12]
 8005eac:	4364      	muls	r4, r4
 8005eae:	0062      	lsls	r2, r4, #1
 8005eb0:	1914      	adds	r4, r2, r4
 8005eb2:	43a3      	bics	r3, r4
 8005eb4:	60c3      	str	r3, [r0, #12]

    stm_pin_DisconnectDebug(pin);
}
 8005eb6:	e010      	b.n	8005eda <pin_function+0xf6>
        if (STM_PIN_OD(data)) {
 8005eb8:	0733      	lsls	r3, r6, #28
 8005eba:	d403      	bmi.n	8005ec4 <pin_function+0xe0>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005ebc:	6843      	ldr	r3, [r0, #4]
 8005ebe:	43a3      	bics	r3, r4
 8005ec0:	6043      	str	r3, [r0, #4]
 8005ec2:	e7eb      	b.n	8005e9c <pin_function+0xb8>
 8005ec4:	6843      	ldr	r3, [r0, #4]
 8005ec6:	4323      	orrs	r3, r4
 8005ec8:	6043      	str	r3, [r0, #4]
 8005eca:	e7e7      	b.n	8005e9c <pin_function+0xb8>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8005ecc:	68c3      	ldr	r3, [r0, #12]
 8005ece:	4364      	muls	r4, r4
 8005ed0:	0062      	lsls	r2, r4, #1
 8005ed2:	1912      	adds	r2, r2, r4
 8005ed4:	4393      	bics	r3, r2
 8005ed6:	431c      	orrs	r4, r3
 8005ed8:	60c4      	str	r4, [r0, #12]
}
 8005eda:	bc1c      	pop	{r2, r3, r4}
 8005edc:	4690      	mov	r8, r2
 8005ede:	4699      	mov	r9, r3
 8005ee0:	46a2      	mov	sl, r4
 8005ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee4:	68c3      	ldr	r3, [r0, #12]
 8005ee6:	4364      	muls	r4, r4
 8005ee8:	0062      	lsls	r2, r4, #1
 8005eea:	1914      	adds	r4, r2, r4
 8005eec:	43a3      	bics	r3, r4
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60c3      	str	r3, [r0, #12]
 8005ef2:	e7f2      	b.n	8005eda <pin_function+0xf6>
 8005ef4:	08008920 	.word	0x08008920

08005ef8 <pin_mode>:

/**
 * Configure pin pull-up/pull-down
 */
void pin_mode(PinName pin, PinMode mode)
{
 8005ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efa:	46c6      	mov	lr, r8
 8005efc:	b500      	push	{lr}
 8005efe:	0003      	movs	r3, r0
 8005f00:	000f      	movs	r7, r1
    MBED_ASSERT(pin != (PinName)NC);

    uint32_t port_index = STM_PORT(pin);
 8005f02:	0902      	lsrs	r2, r0, #4
 8005f04:	200f      	movs	r0, #15
 8005f06:	4010      	ands	r0, r2
    uint32_t ll_pin  = ll_pin_defines[STM_PIN(pin)];
 8005f08:	220f      	movs	r2, #15
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4a1c      	ldr	r2, [pc, #112]	; (8005f80 <pin_mode+0x88>)
 8005f10:	589b      	ldr	r3, [r3, r2]
 8005f12:	4698      	mov	r8, r3
    // Enable GPIO clock
    GPIO_TypeDef *gpio = Set_GPIO_Clock(port_index);
 8005f14:	f7ff fe82 	bl	8005c1c <Set_GPIO_Clock>
 8005f18:	0006      	movs	r6, r0
  return (uint32_t)(READ_BIT(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0)) / (Pin * Pin));
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	4644      	mov	r4, r8
 8005f1e:	4364      	muls	r4, r4
 8005f20:	0065      	lsls	r5, r4, #1
 8005f22:	192d      	adds	r5, r5, r4
 8005f24:	4028      	ands	r0, r5
 8005f26:	0021      	movs	r1, r4
 8005f28:	f7fa f900 	bl	800012c <__udivsi3>
    uint32_t function = LL_GPIO_GetPinMode(gpio, ll_pin);

    if ((function == LL_GPIO_MODE_OUTPUT) || (function == LL_GPIO_MODE_ALTERNATE)) {
 8005f2c:	3801      	subs	r0, #1
 8005f2e:	2801      	cmp	r0, #1
 8005f30:	d90d      	bls.n	8005f4e <pin_mode+0x56>
        } else {
            LL_GPIO_SetPinOutputType(gpio, ll_pin, LL_GPIO_OUTPUT_PUSHPULL);
        }
    }

    if ((mode == OpenDrainPullUp) || (mode == PullUp)) {
 8005f32:	2f03      	cmp	r7, #3
 8005f34:	d019      	beq.n	8005f6a <pin_mode+0x72>
 8005f36:	2f01      	cmp	r7, #1
 8005f38:	d017      	beq.n	8005f6a <pin_mode+0x72>
        stm_pin_PullConfig(gpio, ll_pin, GPIO_PULLUP);
    } else if ((mode == OpenDrainPullDown) || (mode == PullDown)) {
 8005f3a:	2f05      	cmp	r7, #5
 8005f3c:	d01a      	beq.n	8005f74 <pin_mode+0x7c>
 8005f3e:	2f02      	cmp	r7, #2
 8005f40:	d018      	beq.n	8005f74 <pin_mode+0x7c>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8005f42:	68f3      	ldr	r3, [r6, #12]
 8005f44:	43ab      	bics	r3, r5
 8005f46:	60f3      	str	r3, [r6, #12]
        stm_pin_PullConfig(gpio, ll_pin, GPIO_PULLDOWN);
    } else {
        stm_pin_PullConfig(gpio, ll_pin, GPIO_NOPULL);
    }
}
 8005f48:	bc04      	pop	{r2}
 8005f4a:	4690      	mov	r8, r2
 8005f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((mode == OpenDrainNoPull) || (mode == OpenDrainPullUp) || (mode == OpenDrainPullDown)) {
 8005f4e:	1efb      	subs	r3, r7, #3
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d804      	bhi.n	8005f60 <pin_mode+0x68>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005f56:	6873      	ldr	r3, [r6, #4]
 8005f58:	4642      	mov	r2, r8
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	6072      	str	r2, [r6, #4]
 8005f5e:	e7e8      	b.n	8005f32 <pin_mode+0x3a>
 8005f60:	6873      	ldr	r3, [r6, #4]
 8005f62:	4642      	mov	r2, r8
 8005f64:	4393      	bics	r3, r2
 8005f66:	6073      	str	r3, [r6, #4]
 8005f68:	e7e3      	b.n	8005f32 <pin_mode+0x3a>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8005f6a:	68f3      	ldr	r3, [r6, #12]
 8005f6c:	43ab      	bics	r3, r5
 8005f6e:	431c      	orrs	r4, r3
 8005f70:	60f4      	str	r4, [r6, #12]
 8005f72:	e7e9      	b.n	8005f48 <pin_mode+0x50>
 8005f74:	68f3      	ldr	r3, [r6, #12]
 8005f76:	43ab      	bics	r3, r5
 8005f78:	0064      	lsls	r4, r4, #1
 8005f7a:	431c      	orrs	r4, r3
 8005f7c:	60f4      	str	r4, [r6, #12]
 8005f7e:	e7e3      	b.n	8005f48 <pin_mode+0x50>
 8005f80:	08008920 	.word	0x08008920

08005f84 <pwmout_write>:
    // Configure GPIO
    pin_function(obj->pin, STM_PIN_DATA(STM_MODE_INPUT, GPIO_NOPULL, 0));
}

void pwmout_write(pwmout_t *obj, float value)
{
 8005f84:	b530      	push	{r4, r5, lr}
 8005f86:	b089      	sub	sp, #36	; 0x24
 8005f88:	0004      	movs	r4, r0
 8005f8a:	1c0d      	adds	r5, r1, #0
    TIM_OC_InitTypeDef sConfig;
    int channel = 0;

    TimHandle.Instance = (TIM_TypeDef *)(obj->pwm);
 8005f8c:	4b29      	ldr	r3, [pc, #164]	; (8006034 <pwmout_write+0xb0>)
 8005f8e:	6802      	ldr	r2, [r0, #0]
 8005f90:	601a      	str	r2, [r3, #0]

    if (value < (float)0.0) {
 8005f92:	2100      	movs	r1, #0
 8005f94:	1c28      	adds	r0, r5, #0
 8005f96:	f7fa fa8f 	bl	80004b8 <__aeabi_fcmplt>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d128      	bne.n	8005ff0 <pwmout_write+0x6c>
        value = 0.0;
    } else if (value > (float)1.0) {
 8005f9e:	21fe      	movs	r1, #254	; 0xfe
 8005fa0:	0589      	lsls	r1, r1, #22
 8005fa2:	1c28      	adds	r0, r5, #0
 8005fa4:	f7fa fa9c 	bl	80004e0 <__aeabi_fcmpgt>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	d001      	beq.n	8005fb0 <pwmout_write+0x2c>
        value = 1.0;
 8005fac:	25fe      	movs	r5, #254	; 0xfe
 8005fae:	05ad      	lsls	r5, r5, #22
    }

    obj->pulse = (uint32_t)((float)obj->period * value);
 8005fb0:	68e0      	ldr	r0, [r4, #12]
 8005fb2:	f7fb f925 	bl	8001200 <__aeabi_ui2f>
 8005fb6:	1c01      	adds	r1, r0, #0
 8005fb8:	1c28      	adds	r0, r5, #0
 8005fba:	f7fa fdf5 	bl	8000ba8 <__aeabi_fmul>
 8005fbe:	f7fa faed 	bl	800059c <__aeabi_f2uiz>
 8005fc2:	6120      	str	r0, [r4, #16]

    // Configure channels
    sConfig.OCMode       = TIM_OCMODE_PWM1;
 8005fc4:	2360      	movs	r3, #96	; 0x60
 8005fc6:	9301      	str	r3, [sp, #4]
    sConfig.Pulse        = obj->pulse / obj->prescaler;
 8005fc8:	68a1      	ldr	r1, [r4, #8]
 8005fca:	f7fa f8af 	bl	800012c <__udivsi3>
 8005fce:	9002      	str	r0, [sp, #8]
    sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	9303      	str	r3, [sp, #12]
    sConfig.OCFastMode   = TIM_OCFAST_DISABLE;
 8005fd4:	9305      	str	r3, [sp, #20]
#if defined(TIM_OCIDLESTATE_RESET)
    sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8005fd6:	9306      	str	r3, [sp, #24]
#endif
#if defined(TIM_OCNIDLESTATE_RESET)
    sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8005fd8:	9304      	str	r3, [sp, #16]
    sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005fda:	9307      	str	r3, [sp, #28]
#endif

    switch (obj->channel) {
 8005fdc:	7d23      	ldrb	r3, [r4, #20]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d01d      	beq.n	800601e <pwmout_write+0x9a>
 8005fe2:	d907      	bls.n	8005ff4 <pwmout_write+0x70>
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d018      	beq.n	800601a <pwmout_write+0x96>
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d114      	bne.n	8006016 <pwmout_write+0x92>
            break;
        case 3:
            channel = TIM_CHANNEL_3;
            break;
        case 4:
            channel = TIM_CHANNEL_4;
 8005fec:	220c      	movs	r2, #12
            break;
 8005fee:	e004      	b.n	8005ffa <pwmout_write+0x76>
        value = 0.0;
 8005ff0:	2500      	movs	r5, #0
 8005ff2:	e7dd      	b.n	8005fb0 <pwmout_write+0x2c>
    switch (obj->channel) {
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d10e      	bne.n	8006016 <pwmout_write+0x92>
            channel = TIM_CHANNEL_1;
 8005ff8:	2200      	movs	r2, #0
        default:
            return;
    }

    if (HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfig, channel) != HAL_OK) {
 8005ffa:	0015      	movs	r5, r2
 8005ffc:	a901      	add	r1, sp, #4
 8005ffe:	480d      	ldr	r0, [pc, #52]	; (8006034 <pwmout_write+0xb0>)
 8006000:	f7ff f9f0 	bl	80053e4 <HAL_TIM_PWM_ConfigChannel>
 8006004:	2800      	cmp	r0, #0
 8006006:	d10c      	bne.n	8006022 <pwmout_write+0x9e>
        error("Cannot initialize PWM\n");
    }

#if !defined(PWMOUT_INVERTED_NOT_SUPPORTED)
    if (obj->inverted) {
 8006008:	7d63      	ldrb	r3, [r4, #21]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00d      	beq.n	800602a <pwmout_write+0xa6>
        HAL_TIMEx_PWMN_Start(&TimHandle, channel);
 800600e:	0029      	movs	r1, r5
 8006010:	4808      	ldr	r0, [pc, #32]	; (8006034 <pwmout_write+0xb0>)
 8006012:	f7ff fad8 	bl	80055c6 <HAL_TIMEx_PWMN_Start>
    } else
#endif
    {
        HAL_TIM_PWM_Start(&TimHandle, channel);
    }
}
 8006016:	b009      	add	sp, #36	; 0x24
 8006018:	bd30      	pop	{r4, r5, pc}
            channel = TIM_CHANNEL_3;
 800601a:	2208      	movs	r2, #8
            break;
 800601c:	e7ed      	b.n	8005ffa <pwmout_write+0x76>
            channel = TIM_CHANNEL_2;
 800601e:	2204      	movs	r2, #4
 8006020:	e7eb      	b.n	8005ffa <pwmout_write+0x76>
        error("Cannot initialize PWM\n");
 8006022:	4805      	ldr	r0, [pc, #20]	; (8006038 <pwmout_write+0xb4>)
 8006024:	f7fd fc16 	bl	8003854 <error>
 8006028:	e7ee      	b.n	8006008 <pwmout_write+0x84>
        HAL_TIM_PWM_Start(&TimHandle, channel);
 800602a:	0029      	movs	r1, r5
 800602c:	4801      	ldr	r0, [pc, #4]	; (8006034 <pwmout_write+0xb0>)
 800602e:	f7ff fa8d 	bl	800554c <HAL_TIM_PWM_Start>
 8006032:	e7f0      	b.n	8006016 <pwmout_write+0x92>
 8006034:	20000acc 	.word	0x20000acc
 8006038:	08008978 	.word	0x08008978

0800603c <pwmout_read>:

float pwmout_read(pwmout_t *obj)
{
 800603c:	b570      	push	{r4, r5, r6, lr}
    float value = 0;
    if (obj->period > 0) {
 800603e:	68c4      	ldr	r4, [r0, #12]
 8006040:	2c00      	cmp	r4, #0
 8006042:	d016      	beq.n	8006072 <pwmout_read+0x36>
        value = (float)(obj->pulse) / (float)(obj->period);
 8006044:	6900      	ldr	r0, [r0, #16]
 8006046:	f7fb f8db 	bl	8001200 <__aeabi_ui2f>
 800604a:	1c05      	adds	r5, r0, #0
 800604c:	0020      	movs	r0, r4
 800604e:	f7fb f8d7 	bl	8001200 <__aeabi_ui2f>
 8006052:	1c01      	adds	r1, r0, #0
 8006054:	1c28      	adds	r0, r5, #0
 8006056:	f7fa fbb7 	bl	80007c8 <__aeabi_fdiv>
 800605a:	1c04      	adds	r4, r0, #0
    }
    return ((value > (float)1.0) ? (float)(1.0) : (value));
 800605c:	21fe      	movs	r1, #254	; 0xfe
 800605e:	0589      	lsls	r1, r1, #22
 8006060:	1c20      	adds	r0, r4, #0
 8006062:	f7fa fa3d 	bl	80004e0 <__aeabi_fcmpgt>
 8006066:	2800      	cmp	r0, #0
 8006068:	d001      	beq.n	800606e <pwmout_read+0x32>
 800606a:	24fe      	movs	r4, #254	; 0xfe
 800606c:	05a4      	lsls	r4, r4, #22
}
 800606e:	1c20      	adds	r0, r4, #0
 8006070:	bd70      	pop	{r4, r5, r6, pc}
    float value = 0;
 8006072:	2400      	movs	r4, #0
 8006074:	e7f2      	b.n	800605c <pwmout_read+0x20>
	...

08006078 <pwmout_period_us>:
{
    pwmout_period_us(obj, ms * 1000);
}

void pwmout_period_us(pwmout_t *obj, int us)
{
 8006078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800607a:	46c6      	mov	lr, r8
 800607c:	b500      	push	{lr}
 800607e:	b088      	sub	sp, #32
 8006080:	0007      	movs	r7, r0
 8006082:	4688      	mov	r8, r1
    TimHandle.Instance = (TIM_TypeDef *)(obj->pwm);
 8006084:	6804      	ldr	r4, [r0, #0]
 8006086:	4b4d      	ldr	r3, [pc, #308]	; (80061bc <pwmout_period_us+0x144>)
 8006088:	601c      	str	r4, [r3, #0]
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    uint32_t PclkFreq = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	9303      	str	r3, [sp, #12]
    uint32_t APBxCLKDivider = RCC_HCLK_DIV1;
    float dc = pwmout_read(obj);
 800608e:	f7ff ffd5 	bl	800603c <pwmout_read>
 8006092:	9001      	str	r0, [sp, #4]
    uint8_t i = 0;

    __HAL_TIM_DISABLE(&TimHandle);
 8006094:	6a22      	ldr	r2, [r4, #32]
 8006096:	4b4a      	ldr	r3, [pc, #296]	; (80061c0 <pwmout_period_us+0x148>)
 8006098:	421a      	tst	r2, r3
 800609a:	d107      	bne.n	80060ac <pwmout_period_us+0x34>
 800609c:	6a22      	ldr	r2, [r4, #32]
 800609e:	4b49      	ldr	r3, [pc, #292]	; (80061c4 <pwmout_period_us+0x14c>)
 80060a0:	421a      	tst	r2, r3
 80060a2:	d103      	bne.n	80060ac <pwmout_period_us+0x34>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	2201      	movs	r2, #1
 80060a8:	4393      	bics	r3, r2
 80060aa:	6023      	str	r3, [r4, #0]

    // Get clock configuration
    // Note: PclkFreq contains here the Latency (not used after)
    HAL_RCC_GetClockConfig(&RCC_ClkInitStruct, &PclkFreq);
 80060ac:	a903      	add	r1, sp, #12
 80060ae:	a804      	add	r0, sp, #16
 80060b0:	f7fe ffe2 	bl	8005078 <HAL_RCC_GetClockConfig>
    uint8_t i = 0;
 80060b4:	2300      	movs	r3, #0

    /*  Parse the pwm / apb mapping table to find the right entry */
    while (pwm_apb_map_table[i].pwm != obj->pwm) {
 80060b6:	e001      	b.n	80060bc <pwmout_period_us+0x44>
        i++;
 80060b8:	3301      	adds	r3, #1
 80060ba:	b2db      	uxtb	r3, r3
    while (pwm_apb_map_table[i].pwm != obj->pwm) {
 80060bc:	001c      	movs	r4, r3
 80060be:	00da      	lsls	r2, r3, #3
 80060c0:	4941      	ldr	r1, [pc, #260]	; (80061c8 <pwmout_period_us+0x150>)
 80060c2:	5852      	ldr	r2, [r2, r1]
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	428a      	cmp	r2, r1
 80060c8:	d1f6      	bne.n	80060b8 <pwmout_period_us+0x40>
    }

    if (pwm_apb_map_table[i].pwm == 0) {
 80060ca:	2a00      	cmp	r2, #0
 80060cc:	d055      	beq.n	800617a <pwmout_period_us+0x102>
        error("Unknown PWM instance");
    }

    if (pwm_apb_map_table[i].pwmoutApb == PWMOUT_ON_APB1) {
 80060ce:	00e4      	lsls	r4, r4, #3
 80060d0:	4b3d      	ldr	r3, [pc, #244]	; (80061c8 <pwmout_period_us+0x150>)
 80060d2:	191c      	adds	r4, r3, r4
 80060d4:	7923      	ldrb	r3, [r4, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d053      	beq.n	8006182 <pwmout_period_us+0x10a>
    uint32_t APBxCLKDivider = RCC_HCLK_DIV1;
 80060da:	2600      	movs	r6, #0
#endif
    }


    /* By default use, 1us as SW pre-scaler */
    obj->prescaler = 1;
 80060dc:	2301      	movs	r3, #1
 80060de:	60bb      	str	r3, [r7, #8]
    // TIMxCLK = PCLKx when the APB prescaler = 1 else TIMxCLK = 2 * PCLKx
    if (APBxCLKDivider == RCC_HCLK_DIV1) {
 80060e0:	2e00      	cmp	r6, #0
 80060e2:	d153      	bne.n	800618c <pwmout_period_us+0x114>
        TimHandle.Init.Prescaler = (((PclkFreq) / 1000000)) - 1; // 1 us tick
 80060e4:	4939      	ldr	r1, [pc, #228]	; (80061cc <pwmout_period_us+0x154>)
 80060e6:	9803      	ldr	r0, [sp, #12]
 80060e8:	f7fa f820 	bl	800012c <__udivsi3>
 80060ec:	3801      	subs	r0, #1
 80060ee:	4b33      	ldr	r3, [pc, #204]	; (80061bc <pwmout_period_us+0x144>)
 80060f0:	6058      	str	r0, [r3, #4]
    } else {
        TimHandle.Init.Prescaler = (((PclkFreq * 2) / 1000000)) - 1; // 1 us tick
    }
    TimHandle.Init.Period = (us - 1);
 80060f2:	4643      	mov	r3, r8
 80060f4:	1e5d      	subs	r5, r3, #1
 80060f6:	4b31      	ldr	r3, [pc, #196]	; (80061bc <pwmout_period_us+0x144>)
 80060f8:	60dd      	str	r5, [r3, #12]

    /*  In case period or pre-scalers are out of range, loop-in to get valid values */
    while ((TimHandle.Init.Period > 0xFFFF) || (TimHandle.Init.Prescaler > 0xFFFF)) {
 80060fa:	4b30      	ldr	r3, [pc, #192]	; (80061bc <pwmout_period_us+0x144>)
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	4b34      	ldr	r3, [pc, #208]	; (80061d0 <pwmout_period_us+0x158>)
 8006100:	429a      	cmp	r2, r3
 8006102:	d804      	bhi.n	800610e <pwmout_period_us+0x96>
 8006104:	4b2d      	ldr	r3, [pc, #180]	; (80061bc <pwmout_period_us+0x144>)
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	4b31      	ldr	r3, [pc, #196]	; (80061d0 <pwmout_period_us+0x158>)
 800610a:	429a      	cmp	r2, r3
 800610c:	d91d      	bls.n	800614a <pwmout_period_us+0xd2>
        obj->prescaler = obj->prescaler * 2;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	005c      	lsls	r4, r3, #1
 8006112:	60bc      	str	r4, [r7, #8]
        if (APBxCLKDivider == RCC_HCLK_DIV1) {
 8006114:	2e00      	cmp	r6, #0
 8006116:	d142      	bne.n	800619e <pwmout_period_us+0x126>
            TimHandle.Init.Prescaler = (((PclkFreq) / 1000000) * obj->prescaler) - 1;
 8006118:	492c      	ldr	r1, [pc, #176]	; (80061cc <pwmout_period_us+0x154>)
 800611a:	9803      	ldr	r0, [sp, #12]
 800611c:	f7fa f806 	bl	800012c <__udivsi3>
 8006120:	4360      	muls	r0, r4
 8006122:	3801      	subs	r0, #1
 8006124:	4b25      	ldr	r3, [pc, #148]	; (80061bc <pwmout_period_us+0x144>)
 8006126:	6058      	str	r0, [r3, #4]
        } else {
            TimHandle.Init.Prescaler = (((PclkFreq * 2) / 1000000) * obj->prescaler) - 1;
        }
        TimHandle.Init.Period = (us - 1) / obj->prescaler;
 8006128:	0021      	movs	r1, r4
 800612a:	0028      	movs	r0, r5
 800612c:	f7f9 fffe 	bl	800012c <__udivsi3>
 8006130:	4b22      	ldr	r3, [pc, #136]	; (80061bc <pwmout_period_us+0x144>)
 8006132:	60d8      	str	r0, [r3, #12]
        /*  Period decreases and prescaler increases over loops, so check for
         *  possible out of range cases */
        if ((TimHandle.Init.Period < 0xFFFF) && (TimHandle.Init.Prescaler > 0xFFFF)) {
 8006134:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <pwmout_period_us+0x15c>)
 8006136:	4298      	cmp	r0, r3
 8006138:	d8df      	bhi.n	80060fa <pwmout_period_us+0x82>
 800613a:	4b20      	ldr	r3, [pc, #128]	; (80061bc <pwmout_period_us+0x144>)
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	4b24      	ldr	r3, [pc, #144]	; (80061d0 <pwmout_period_us+0x158>)
 8006140:	429a      	cmp	r2, r3
 8006142:	d9da      	bls.n	80060fa <pwmout_period_us+0x82>
            error("Cannot initialize PWM\n");
 8006144:	4824      	ldr	r0, [pc, #144]	; (80061d8 <pwmout_period_us+0x160>)
 8006146:	f7fd fb85 	bl	8003854 <error>
            break;
        }
    }

    TimHandle.Init.ClockDivision = 0;
 800614a:	481c      	ldr	r0, [pc, #112]	; (80061bc <pwmout_period_us+0x144>)
 800614c:	2300      	movs	r3, #0
 800614e:	6103      	str	r3, [r0, #16]
    TimHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8006150:	6083      	str	r3, [r0, #8]

    if (HAL_TIM_PWM_Init(&TimHandle) != HAL_OK) {
 8006152:	f7ff f8e9 	bl	8005328 <HAL_TIM_PWM_Init>
 8006156:	2800      	cmp	r0, #0
 8006158:	d12b      	bne.n	80061b2 <pwmout_period_us+0x13a>
        error("Cannot initialize PWM\n");
    }

    // Save for future use
    obj->period = us;
 800615a:	4643      	mov	r3, r8
 800615c:	60fb      	str	r3, [r7, #12]

    // Set duty cycle again
    pwmout_write(obj, dc);
 800615e:	9901      	ldr	r1, [sp, #4]
 8006160:	0038      	movs	r0, r7
 8006162:	f7ff ff0f 	bl	8005f84 <pwmout_write>

    __HAL_TIM_ENABLE(&TimHandle);
 8006166:	4b15      	ldr	r3, [pc, #84]	; (80061bc <pwmout_period_us+0x144>)
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	6813      	ldr	r3, [r2, #0]
 800616c:	2101      	movs	r1, #1
 800616e:	430b      	orrs	r3, r1
 8006170:	6013      	str	r3, [r2, #0]
}
 8006172:	b008      	add	sp, #32
 8006174:	bc04      	pop	{r2}
 8006176:	4690      	mov	r8, r2
 8006178:	bdf0      	pop	{r4, r5, r6, r7, pc}
        error("Unknown PWM instance");
 800617a:	4818      	ldr	r0, [pc, #96]	; (80061dc <pwmout_period_us+0x164>)
 800617c:	f7fd fb6a 	bl	8003854 <error>
 8006180:	e7a5      	b.n	80060ce <pwmout_period_us+0x56>
        PclkFreq = HAL_RCC_GetPCLK1Freq();
 8006182:	f7fe ff69 	bl	8005058 <HAL_RCC_GetPCLK1Freq>
 8006186:	9003      	str	r0, [sp, #12]
        APBxCLKDivider = RCC_ClkInitStruct.APB1CLKDivider;
 8006188:	9e07      	ldr	r6, [sp, #28]
 800618a:	e7a7      	b.n	80060dc <pwmout_period_us+0x64>
        TimHandle.Init.Prescaler = (((PclkFreq * 2) / 1000000)) - 1; // 1 us tick
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	0058      	lsls	r0, r3, #1
 8006190:	490e      	ldr	r1, [pc, #56]	; (80061cc <pwmout_period_us+0x154>)
 8006192:	f7f9 ffcb 	bl	800012c <__udivsi3>
 8006196:	3801      	subs	r0, #1
 8006198:	4b08      	ldr	r3, [pc, #32]	; (80061bc <pwmout_period_us+0x144>)
 800619a:	6058      	str	r0, [r3, #4]
 800619c:	e7a9      	b.n	80060f2 <pwmout_period_us+0x7a>
            TimHandle.Init.Prescaler = (((PclkFreq * 2) / 1000000) * obj->prescaler) - 1;
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	0058      	lsls	r0, r3, #1
 80061a2:	490a      	ldr	r1, [pc, #40]	; (80061cc <pwmout_period_us+0x154>)
 80061a4:	f7f9 ffc2 	bl	800012c <__udivsi3>
 80061a8:	4360      	muls	r0, r4
 80061aa:	3801      	subs	r0, #1
 80061ac:	4b03      	ldr	r3, [pc, #12]	; (80061bc <pwmout_period_us+0x144>)
 80061ae:	6058      	str	r0, [r3, #4]
 80061b0:	e7ba      	b.n	8006128 <pwmout_period_us+0xb0>
        error("Cannot initialize PWM\n");
 80061b2:	4809      	ldr	r0, [pc, #36]	; (80061d8 <pwmout_period_us+0x160>)
 80061b4:	f7fd fb4e 	bl	8003854 <error>
 80061b8:	e7cf      	b.n	800615a <pwmout_period_us+0xe2>
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	20000acc 	.word	0x20000acc
 80061c0:	00001111 	.word	0x00001111
 80061c4:	00000444 	.word	0x00000444
 80061c8:	080088ac 	.word	0x080088ac
 80061cc:	000f4240 	.word	0x000f4240
 80061d0:	0000ffff 	.word	0x0000ffff
 80061d4:	0000fffe 	.word	0x0000fffe
 80061d8:	08008978 	.word	0x08008978
 80061dc:	08008960 	.word	0x08008960

080061e0 <pwmout_init>:
{
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	0004      	movs	r4, r0
 80061e6:	000d      	movs	r5, r1
    obj->pwm = (PWMName)pinmap_peripheral(pin, PinMap_PWM);
 80061e8:	4e3d      	ldr	r6, [pc, #244]	; (80062e0 <pwmout_init+0x100>)
 80061ea:	0031      	movs	r1, r6
 80061ec:	0028      	movs	r0, r5
 80061ee:	f7fc fda7 	bl	8002d40 <pinmap_peripheral>
 80061f2:	6020      	str	r0, [r4, #0]
    uint32_t function = pinmap_function(pin, PinMap_PWM);
 80061f4:	0031      	movs	r1, r6
 80061f6:	0028      	movs	r0, r5
 80061f8:	f7fc fdc8 	bl	8002d8c <pinmap_function>
    obj->channel = STM_PIN_CHANNEL(function);
 80061fc:	0b02      	lsrs	r2, r0, #12
 80061fe:	231f      	movs	r3, #31
 8006200:	4013      	ands	r3, r2
 8006202:	7523      	strb	r3, [r4, #20]
    obj->inverted = STM_PIN_INVERTED(function);
 8006204:	0c40      	lsrs	r0, r0, #17
 8006206:	2301      	movs	r3, #1
 8006208:	4018      	ands	r0, r3
 800620a:	7560      	strb	r0, [r4, #21]
    if (obj->pwm == PWM_1) {
 800620c:	4b35      	ldr	r3, [pc, #212]	; (80062e4 <pwmout_init+0x104>)
 800620e:	6822      	ldr	r2, [r4, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d023      	beq.n	800625c <pwmout_init+0x7c>
    if (obj->pwm == PWM_3) {
 8006214:	4b34      	ldr	r3, [pc, #208]	; (80062e8 <pwmout_init+0x108>)
 8006216:	6822      	ldr	r2, [r4, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d02a      	beq.n	8006272 <pwmout_init+0x92>
    if (obj->pwm == PWM_14) {
 800621c:	4b33      	ldr	r3, [pc, #204]	; (80062ec <pwmout_init+0x10c>)
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d030      	beq.n	8006286 <pwmout_init+0xa6>
    if (obj->pwm == PWM_15) {
 8006224:	4b32      	ldr	r3, [pc, #200]	; (80062f0 <pwmout_init+0x110>)
 8006226:	6822      	ldr	r2, [r4, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d037      	beq.n	800629c <pwmout_init+0xbc>
    if (obj->pwm == PWM_16) {
 800622c:	4b31      	ldr	r3, [pc, #196]	; (80062f4 <pwmout_init+0x114>)
 800622e:	6822      	ldr	r2, [r4, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d03e      	beq.n	80062b2 <pwmout_init+0xd2>
    if (obj->pwm == PWM_17) {
 8006234:	4b30      	ldr	r3, [pc, #192]	; (80062f8 <pwmout_init+0x118>)
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d045      	beq.n	80062c8 <pwmout_init+0xe8>
    pinmap_pinout(pin, PinMap_PWM);
 800623c:	4928      	ldr	r1, [pc, #160]	; (80062e0 <pwmout_init+0x100>)
 800623e:	0028      	movs	r0, r5
 8006240:	f7fc fd36 	bl	8002cb0 <pinmap_pinout>
    obj->pin = pin;
 8006244:	80a5      	strh	r5, [r4, #4]
    obj->period = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	60e3      	str	r3, [r4, #12]
    obj->pulse = 0;
 800624a:	6123      	str	r3, [r4, #16]
    obj->prescaler = 1;
 800624c:	3301      	adds	r3, #1
 800624e:	60a3      	str	r3, [r4, #8]
    pwmout_period_us(obj, 20000); // 20 ms per default
 8006250:	492a      	ldr	r1, [pc, #168]	; (80062fc <pwmout_init+0x11c>)
 8006252:	0020      	movs	r0, r4
 8006254:	f7ff ff10 	bl	8006078 <pwmout_period_us>
}
 8006258:	b006      	add	sp, #24
 800625a:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_RCC_TIM1_CLK_ENABLE();
 800625c:	4a28      	ldr	r2, [pc, #160]	; (8006300 <pwmout_init+0x120>)
 800625e:	6991      	ldr	r1, [r2, #24]
 8006260:	2080      	movs	r0, #128	; 0x80
 8006262:	0100      	lsls	r0, r0, #4
 8006264:	4301      	orrs	r1, r0
 8006266:	6191      	str	r1, [r2, #24]
 8006268:	6993      	ldr	r3, [r2, #24]
 800626a:	4003      	ands	r3, r0
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	9b00      	ldr	r3, [sp, #0]
 8006270:	e7d0      	b.n	8006214 <pwmout_init+0x34>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8006272:	4a23      	ldr	r2, [pc, #140]	; (8006300 <pwmout_init+0x120>)
 8006274:	69d1      	ldr	r1, [r2, #28]
 8006276:	2302      	movs	r3, #2
 8006278:	4319      	orrs	r1, r3
 800627a:	61d1      	str	r1, [r2, #28]
 800627c:	69d2      	ldr	r2, [r2, #28]
 800627e:	4013      	ands	r3, r2
 8006280:	9301      	str	r3, [sp, #4]
 8006282:	9b01      	ldr	r3, [sp, #4]
 8006284:	e7ca      	b.n	800621c <pwmout_init+0x3c>
        __HAL_RCC_TIM14_CLK_ENABLE();
 8006286:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <pwmout_init+0x120>)
 8006288:	69d1      	ldr	r1, [r2, #28]
 800628a:	2080      	movs	r0, #128	; 0x80
 800628c:	0040      	lsls	r0, r0, #1
 800628e:	4301      	orrs	r1, r0
 8006290:	61d1      	str	r1, [r2, #28]
 8006292:	69d3      	ldr	r3, [r2, #28]
 8006294:	4003      	ands	r3, r0
 8006296:	9302      	str	r3, [sp, #8]
 8006298:	9b02      	ldr	r3, [sp, #8]
 800629a:	e7c3      	b.n	8006224 <pwmout_init+0x44>
        __HAL_RCC_TIM15_CLK_ENABLE();
 800629c:	4a18      	ldr	r2, [pc, #96]	; (8006300 <pwmout_init+0x120>)
 800629e:	6991      	ldr	r1, [r2, #24]
 80062a0:	2080      	movs	r0, #128	; 0x80
 80062a2:	0240      	lsls	r0, r0, #9
 80062a4:	4301      	orrs	r1, r0
 80062a6:	6191      	str	r1, [r2, #24]
 80062a8:	6993      	ldr	r3, [r2, #24]
 80062aa:	4003      	ands	r3, r0
 80062ac:	9303      	str	r3, [sp, #12]
 80062ae:	9b03      	ldr	r3, [sp, #12]
 80062b0:	e7bc      	b.n	800622c <pwmout_init+0x4c>
        __HAL_RCC_TIM16_CLK_ENABLE();
 80062b2:	4a13      	ldr	r2, [pc, #76]	; (8006300 <pwmout_init+0x120>)
 80062b4:	6991      	ldr	r1, [r2, #24]
 80062b6:	2080      	movs	r0, #128	; 0x80
 80062b8:	0280      	lsls	r0, r0, #10
 80062ba:	4301      	orrs	r1, r0
 80062bc:	6191      	str	r1, [r2, #24]
 80062be:	6993      	ldr	r3, [r2, #24]
 80062c0:	4003      	ands	r3, r0
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	9b04      	ldr	r3, [sp, #16]
 80062c6:	e7b5      	b.n	8006234 <pwmout_init+0x54>
        __HAL_RCC_TIM17_CLK_ENABLE();
 80062c8:	4a0d      	ldr	r2, [pc, #52]	; (8006300 <pwmout_init+0x120>)
 80062ca:	6991      	ldr	r1, [r2, #24]
 80062cc:	2080      	movs	r0, #128	; 0x80
 80062ce:	02c0      	lsls	r0, r0, #11
 80062d0:	4301      	orrs	r1, r0
 80062d2:	6191      	str	r1, [r2, #24]
 80062d4:	6993      	ldr	r3, [r2, #24]
 80062d6:	4003      	ands	r3, r0
 80062d8:	9305      	str	r3, [sp, #20]
 80062da:	9b05      	ldr	r3, [sp, #20]
 80062dc:	e7ae      	b.n	800623c <pwmout_init+0x5c>
 80062de:	46c0      	nop			; (mov r8, r8)
 80062e0:	080085f0 	.word	0x080085f0
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40002000 	.word	0x40002000
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800
 80062fc:	00004e20 	.word	0x00004e20
 8006300:	40021000 	.word	0x40021000

08006304 <pwmout_period_ms>:
{
 8006304:	b510      	push	{r4, lr}
    pwmout_period_us(obj, ms * 1000);
 8006306:	23fa      	movs	r3, #250	; 0xfa
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4359      	muls	r1, r3
 800630c:	f7ff feb4 	bl	8006078 <pwmout_period_us>
}
 8006310:	bd10      	pop	{r4, pc}

08006312 <pwmout_pulsewidth_us>:
{
    pwmout_pulsewidth_us(obj, ms * 1000);
}

void pwmout_pulsewidth_us(pwmout_t *obj, int us)
{
 8006312:	b570      	push	{r4, r5, r6, lr}
 8006314:	0004      	movs	r4, r0
    float value = (float)us / (float)obj->period;
 8006316:	0008      	movs	r0, r1
 8006318:	f7fa ff22 	bl	8001160 <__aeabi_i2f>
 800631c:	1c05      	adds	r5, r0, #0
 800631e:	68e0      	ldr	r0, [r4, #12]
 8006320:	f7fa ff6e 	bl	8001200 <__aeabi_ui2f>
 8006324:	1c01      	adds	r1, r0, #0
 8006326:	1c28      	adds	r0, r5, #0
 8006328:	f7fa fa4e 	bl	80007c8 <__aeabi_fdiv>
 800632c:	1c01      	adds	r1, r0, #0
    pwmout_write(obj, value);
 800632e:	0020      	movs	r0, r4
 8006330:	f7ff fe28 	bl	8005f84 <pwmout_write>
}
 8006334:	bd70      	pop	{r4, r5, r6, pc}
	...

08006338 <serial_readable>:
 ******************************************************************************/

int serial_readable(serial_t *obj)
{
    struct serial_s *obj_s = SERIAL_S(obj);
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8006338:	6842      	ldr	r2, [r0, #4]
    /*  To avoid a target blocking case, let's check for
     *  possible OVERRUN error and discard it
     */
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 800633a:	00d3      	lsls	r3, r2, #3
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	0119      	lsls	r1, r3, #4
 8006340:	4b08      	ldr	r3, [pc, #32]	; (8006364 <serial_readable+0x2c>)
 8006342:	58cb      	ldr	r3, [r1, r3]
 8006344:	69d9      	ldr	r1, [r3, #28]
 8006346:	0709      	lsls	r1, r1, #28
 8006348:	d501      	bpl.n	800634e <serial_readable+0x16>
        __HAL_UART_CLEAR_OREFLAG(huart);
 800634a:	2108      	movs	r1, #8
 800634c:	6219      	str	r1, [r3, #32]
    }
    // Check if data is received
    return (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE) != RESET) ? 1 : 0;
 800634e:	00d3      	lsls	r3, r2, #3
 8006350:	1a9b      	subs	r3, r3, r2
 8006352:	011a      	lsls	r2, r3, #4
 8006354:	4b03      	ldr	r3, [pc, #12]	; (8006364 <serial_readable+0x2c>)
 8006356:	58d3      	ldr	r3, [r2, r3]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	2020      	movs	r0, #32
 800635c:	4018      	ands	r0, r3
 800635e:	1e43      	subs	r3, r0, #1
 8006360:	4198      	sbcs	r0, r3
}
 8006362:	4770      	bx	lr
 8006364:	20000b44 	.word	0x20000b44

08006368 <serial_writable>:

int serial_writable(serial_t *obj)
{
    struct serial_s *obj_s = SERIAL_S(obj);
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8006368:	6842      	ldr	r2, [r0, #4]

    // Check if data is transmitted
    return (__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE) != RESET) ? 1 : 0;
 800636a:	00d3      	lsls	r3, r2, #3
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	011a      	lsls	r2, r3, #4
 8006370:	4b03      	ldr	r3, [pc, #12]	; (8006380 <serial_writable+0x18>)
 8006372:	58d3      	ldr	r3, [r2, r3]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	2080      	movs	r0, #128	; 0x80
 8006378:	4018      	ands	r0, r3
 800637a:	1e43      	subs	r3, r0, #1
 800637c:	4198      	sbcs	r0, r3
}
 800637e:	4770      	bx	lr
 8006380:	20000b44 	.word	0x20000b44

08006384 <init_uart>:
/******************************************************************************
 * UTILITY FUNCTIONS
 ******************************************************************************/

HAL_StatusTypeDef init_uart(serial_t *obj)
{
 8006384:	b570      	push	{r4, r5, r6, lr}
 8006386:	0003      	movs	r3, r0
    struct serial_s *obj_s = SERIAL_S(obj);
    UART_HandleTypeDef *huart = &uart_handlers[obj_s->index];
 8006388:	6841      	ldr	r1, [r0, #4]
 800638a:	00ca      	lsls	r2, r1, #3
 800638c:	1a54      	subs	r4, r2, r1
 800638e:	0120      	lsls	r0, r4, #4
 8006390:	4c1b      	ldr	r4, [pc, #108]	; (8006400 <init_uart+0x7c>)
 8006392:	1900      	adds	r0, r0, r4
    huart->Instance = (USART_TypeDef *)(obj_s->uart);
 8006394:	1a52      	subs	r2, r2, r1
 8006396:	0115      	lsls	r5, r2, #4
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	512a      	str	r2, [r5, r4]

    huart->Init.BaudRate     = obj_s->baudrate;
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	6042      	str	r2, [r0, #4]
    huart->Init.WordLength   = obj_s->databits;
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	6082      	str	r2, [r0, #8]
    huart->Init.StopBits     = obj_s->stopbits;
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	60c2      	str	r2, [r0, #12]
    huart->Init.Parity       = obj_s->parity;
 80063a8:	695a      	ldr	r2, [r3, #20]
 80063aa:	6102      	str	r2, [r0, #16]
#if DEVICE_SERIAL_FC
    huart->Init.HwFlowCtl    = obj_s->hw_flow_ctl;
 80063ac:	6a1a      	ldr	r2, [r3, #32]
 80063ae:	6182      	str	r2, [r0, #24]
#else
    huart->Init.HwFlowCtl    = UART_HWCONTROL_NONE;
#endif
    huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80063b0:	2200      	movs	r2, #0
 80063b2:	61c2      	str	r2, [r0, #28]
    huart->TxXferCount       = 0;
 80063b4:	0004      	movs	r4, r0
 80063b6:	3452      	adds	r4, #82	; 0x52
 80063b8:	8022      	strh	r2, [r4, #0]
    huart->TxXferSize        = 0;
 80063ba:	3c02      	subs	r4, #2
 80063bc:	8022      	strh	r2, [r4, #0]
    huart->RxXferCount       = 0;
 80063be:	340a      	adds	r4, #10
 80063c0:	8022      	strh	r2, [r4, #0]
    huart->RxXferSize        = 0;
 80063c2:	3c02      	subs	r4, #2
 80063c4:	8022      	strh	r2, [r4, #0]

    if (obj_s->pin_rx == NC) {
 80063c6:	241a      	movs	r4, #26
 80063c8:	5f1a      	ldrsh	r2, [r3, r4]
 80063ca:	3201      	adds	r2, #1
 80063cc:	d00d      	beq.n	80063ea <init_uart+0x66>
        huart->Init.Mode = UART_MODE_TX;
    } else if (obj_s->pin_tx == NC) {
 80063ce:	2218      	movs	r2, #24
 80063d0:	5e9b      	ldrsh	r3, [r3, r2]
 80063d2:	3301      	adds	r3, #1
 80063d4:	d00c      	beq.n	80063f0 <init_uart+0x6c>
        huart->Init.Mode = UART_MODE_RX;
    } else {
        huart->Init.Mode = UART_MODE_TX_RX;
 80063d6:	00cb      	lsls	r3, r1, #3
 80063d8:	1a59      	subs	r1, r3, r1
 80063da:	010a      	lsls	r2, r1, #4
 80063dc:	4b08      	ldr	r3, [pc, #32]	; (8006400 <init_uart+0x7c>)
 80063de:	189b      	adds	r3, r3, r2
 80063e0:	220c      	movs	r2, #12
 80063e2:	615a      	str	r2, [r3, #20]
            HAL_UARTEx_DisableStopMode(huart);
        }
    }
#endif

    return HAL_UART_Init(huart);
 80063e4:	f7ff fa68 	bl	80058b8 <HAL_UART_Init>
}
 80063e8:	bd70      	pop	{r4, r5, r6, pc}
        huart->Init.Mode = UART_MODE_TX;
 80063ea:	2208      	movs	r2, #8
 80063ec:	6142      	str	r2, [r0, #20]
 80063ee:	e7f9      	b.n	80063e4 <init_uart+0x60>
        huart->Init.Mode = UART_MODE_RX;
 80063f0:	00cb      	lsls	r3, r1, #3
 80063f2:	1a59      	subs	r1, r3, r1
 80063f4:	010a      	lsls	r2, r1, #4
 80063f6:	4b02      	ldr	r3, [pc, #8]	; (8006400 <init_uart+0x7c>)
 80063f8:	189b      	adds	r3, r3, r2
 80063fa:	2204      	movs	r2, #4
 80063fc:	615a      	str	r2, [r3, #20]
 80063fe:	e7f1      	b.n	80063e4 <init_uart+0x60>
 8006400:	20000b44 	.word	0x20000b44

08006404 <serial_baud>:
{
 8006404:	b510      	push	{r4, lr}
    obj_s->baudrate = baudrate;
 8006406:	6081      	str	r1, [r0, #8]
    if (init_uart(obj) != HAL_OK) {
 8006408:	f7ff ffbc 	bl	8006384 <init_uart>
}
 800640c:	bd10      	pop	{r4, pc}
	...

08006410 <get_uart_index>:
int8_t get_uart_index(UARTName uart_name)
{
    uint8_t index = 0;

#if defined(USART1_BASE)
    if (uart_name == UART_1) {
 8006410:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <get_uart_index+0x30>)
 8006412:	4298      	cmp	r0, r3
 8006414:	d00a      	beq.n	800642c <get_uart_index+0x1c>
    }
    index++;
#endif

#if defined(USART2_BASE)
    if (uart_name == UART_2) {
 8006416:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <get_uart_index+0x34>)
 8006418:	4298      	cmp	r0, r3
 800641a:	d009      	beq.n	8006430 <get_uart_index+0x20>
    }
    index++;
#endif

#if defined(USART3_BASE)
    if (uart_name == UART_3) {
 800641c:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <get_uart_index+0x38>)
 800641e:	4298      	cmp	r0, r3
 8006420:	d008      	beq.n	8006434 <get_uart_index+0x24>
    }
    index++;
#endif

#if defined(USART4_BASE)
    if (uart_name == UART_4) {
 8006422:	4b0a      	ldr	r3, [pc, #40]	; (800644c <get_uart_index+0x3c>)
 8006424:	4298      	cmp	r0, r3
 8006426:	d107      	bne.n	8006438 <get_uart_index+0x28>
        return index;
 8006428:	2003      	movs	r0, #3
    }
    index++;
#endif

    return -1;
}
 800642a:	4770      	bx	lr
        return index;
 800642c:	2000      	movs	r0, #0
 800642e:	e7fc      	b.n	800642a <get_uart_index+0x1a>
        return index;
 8006430:	2001      	movs	r0, #1
 8006432:	e7fa      	b.n	800642a <get_uart_index+0x1a>
        return index;
 8006434:	2002      	movs	r0, #2
 8006436:	e7f8      	b.n	800642a <get_uart_index+0x1a>
    return -1;
 8006438:	2001      	movs	r0, #1
 800643a:	4240      	negs	r0, r0
 800643c:	e7f5      	b.n	800642a <get_uart_index+0x1a>
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	40013800 	.word	0x40013800
 8006444:	40004400 	.word	0x40004400
 8006448:	40004800 	.word	0x40004800
 800644c:	40004c00 	.word	0x40004c00

08006450 <serial_init>:
{
 8006450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006452:	b085      	sub	sp, #20
 8006454:	0004      	movs	r4, r0
 8006456:	000d      	movs	r5, r1
 8006458:	0016      	movs	r6, r2
    UARTName uart_tx = (UARTName)pinmap_peripheral(tx, PinMap_UART_TX);
 800645a:	4948      	ldr	r1, [pc, #288]	; (800657c <serial_init+0x12c>)
 800645c:	0028      	movs	r0, r5
 800645e:	f7fc fc6f 	bl	8002d40 <pinmap_peripheral>
 8006462:	0007      	movs	r7, r0
    UARTName uart_rx = (UARTName)pinmap_peripheral(rx, PinMap_UART_RX);
 8006464:	4946      	ldr	r1, [pc, #280]	; (8006580 <serial_init+0x130>)
 8006466:	0030      	movs	r0, r6
 8006468:	f7fc fc6a 	bl	8002d40 <pinmap_peripheral>
 800646c:	0001      	movs	r1, r0
    obj_s->uart = (UARTName)pinmap_merge(uart_tx, uart_rx);
 800646e:	0038      	movs	r0, r7
 8006470:	f7fc fc40 	bl	8002cf4 <pinmap_merge>
 8006474:	6020      	str	r0, [r4, #0]
    if ((tx == STDIO_UART_TX) || (rx == STDIO_UART_RX)) {
 8006476:	2d02      	cmp	r5, #2
 8006478:	d00e      	beq.n	8006498 <serial_init+0x48>
 800647a:	2e03      	cmp	r6, #3
 800647c:	d00e      	beq.n	800649c <serial_init+0x4c>
        if (uart_tx == pinmap_peripheral(STDIO_UART_TX, PinMap_UART_TX)) {
 800647e:	493f      	ldr	r1, [pc, #252]	; (800657c <serial_init+0x12c>)
 8006480:	2002      	movs	r0, #2
 8006482:	f7fc fc5d 	bl	8002d40 <pinmap_peripheral>
 8006486:	4287      	cmp	r7, r0
 8006488:	d001      	beq.n	800648e <serial_init+0x3e>
    uint8_t stdio_config = 0;
 800648a:	2700      	movs	r7, #0
 800648c:	e007      	b.n	800649e <serial_init+0x4e>
            error("Error: new serial object is using same UART as STDIO");
 800648e:	483d      	ldr	r0, [pc, #244]	; (8006584 <serial_init+0x134>)
 8006490:	f7fd f9e0 	bl	8003854 <error>
    uint8_t stdio_config = 0;
 8006494:	2700      	movs	r7, #0
 8006496:	e002      	b.n	800649e <serial_init+0x4e>
        stdio_config = 1;
 8006498:	2701      	movs	r7, #1
 800649a:	e000      	b.n	800649e <serial_init+0x4e>
 800649c:	2701      	movs	r7, #1
    if (obj_s->uart == UART_1) {
 800649e:	4b3a      	ldr	r3, [pc, #232]	; (8006588 <serial_init+0x138>)
 80064a0:	6822      	ldr	r2, [r4, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d034      	beq.n	8006510 <serial_init+0xc0>
    if (obj_s->uart == UART_2) {
 80064a6:	4b39      	ldr	r3, [pc, #228]	; (800658c <serial_init+0x13c>)
 80064a8:	6822      	ldr	r2, [r4, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d03b      	beq.n	8006526 <serial_init+0xd6>
    if (obj_s->uart == UART_3) {
 80064ae:	4b38      	ldr	r3, [pc, #224]	; (8006590 <serial_init+0x140>)
 80064b0:	6822      	ldr	r2, [r4, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d042      	beq.n	800653c <serial_init+0xec>
    if (obj_s->uart == UART_4) {
 80064b6:	4b37      	ldr	r3, [pc, #220]	; (8006594 <serial_init+0x144>)
 80064b8:	6822      	ldr	r2, [r4, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d049      	beq.n	8006552 <serial_init+0x102>
    obj_s->index = get_uart_index(obj_s->uart);
 80064be:	6820      	ldr	r0, [r4, #0]
 80064c0:	f7ff ffa6 	bl	8006410 <get_uart_index>
 80064c4:	6060      	str	r0, [r4, #4]
    pinmap_pinout(tx, PinMap_UART_TX);
 80064c6:	492d      	ldr	r1, [pc, #180]	; (800657c <serial_init+0x12c>)
 80064c8:	0028      	movs	r0, r5
 80064ca:	f7fc fbf1 	bl	8002cb0 <pinmap_pinout>
    pinmap_pinout(rx, PinMap_UART_RX);
 80064ce:	492c      	ldr	r1, [pc, #176]	; (8006580 <serial_init+0x130>)
 80064d0:	0030      	movs	r0, r6
 80064d2:	f7fc fbed 	bl	8002cb0 <pinmap_pinout>
    if (tx != NC) {
 80064d6:	1c6b      	adds	r3, r5, #1
 80064d8:	d003      	beq.n	80064e2 <serial_init+0x92>
        pin_mode(tx, PullUp);
 80064da:	2101      	movs	r1, #1
 80064dc:	0028      	movs	r0, r5
 80064de:	f7ff fd0b 	bl	8005ef8 <pin_mode>
    if (rx != NC) {
 80064e2:	1c73      	adds	r3, r6, #1
 80064e4:	d003      	beq.n	80064ee <serial_init+0x9e>
        pin_mode(rx, PullUp);
 80064e6:	2101      	movs	r1, #1
 80064e8:	0030      	movs	r0, r6
 80064ea:	f7ff fd05 	bl	8005ef8 <pin_mode>
    obj_s->baudrate = 9600; // baudrate default value
 80064ee:	2396      	movs	r3, #150	; 0x96
 80064f0:	019b      	lsls	r3, r3, #6
 80064f2:	60a3      	str	r3, [r4, #8]
    obj_s->databits = UART_WORDLENGTH_8B;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60e3      	str	r3, [r4, #12]
    obj_s->stopbits = UART_STOPBITS_1;
 80064f8:	6123      	str	r3, [r4, #16]
    obj_s->parity   = UART_PARITY_NONE;
 80064fa:	6163      	str	r3, [r4, #20]
    obj_s->hw_flow_ctl = UART_HWCONTROL_NONE;
 80064fc:	6223      	str	r3, [r4, #32]
    obj_s->pin_tx = tx;
 80064fe:	8325      	strh	r5, [r4, #24]
    obj_s->pin_rx = rx;
 8006500:	8366      	strh	r6, [r4, #26]
    init_uart(obj); /* init_uart will be called again in serial_baud function, so don't worry if init_uart returns HAL_ERROR */
 8006502:	0020      	movs	r0, r4
 8006504:	f7ff ff3e 	bl	8006384 <init_uart>
    if (stdio_config) {
 8006508:	2f00      	cmp	r7, #0
 800650a:	d12d      	bne.n	8006568 <serial_init+0x118>
}
 800650c:	b005      	add	sp, #20
 800650e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_USART1_CLK_ENABLE();
 8006510:	4a21      	ldr	r2, [pc, #132]	; (8006598 <serial_init+0x148>)
 8006512:	6991      	ldr	r1, [r2, #24]
 8006514:	2080      	movs	r0, #128	; 0x80
 8006516:	01c0      	lsls	r0, r0, #7
 8006518:	4301      	orrs	r1, r0
 800651a:	6191      	str	r1, [r2, #24]
 800651c:	6993      	ldr	r3, [r2, #24]
 800651e:	4003      	ands	r3, r0
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	9b00      	ldr	r3, [sp, #0]
 8006524:	e7bf      	b.n	80064a6 <serial_init+0x56>
        __HAL_RCC_USART2_CLK_ENABLE();
 8006526:	4a1c      	ldr	r2, [pc, #112]	; (8006598 <serial_init+0x148>)
 8006528:	69d1      	ldr	r1, [r2, #28]
 800652a:	2080      	movs	r0, #128	; 0x80
 800652c:	0280      	lsls	r0, r0, #10
 800652e:	4301      	orrs	r1, r0
 8006530:	61d1      	str	r1, [r2, #28]
 8006532:	69d3      	ldr	r3, [r2, #28]
 8006534:	4003      	ands	r3, r0
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	9b01      	ldr	r3, [sp, #4]
 800653a:	e7b8      	b.n	80064ae <serial_init+0x5e>
        __HAL_RCC_USART3_CLK_ENABLE();
 800653c:	4a16      	ldr	r2, [pc, #88]	; (8006598 <serial_init+0x148>)
 800653e:	69d1      	ldr	r1, [r2, #28]
 8006540:	2080      	movs	r0, #128	; 0x80
 8006542:	02c0      	lsls	r0, r0, #11
 8006544:	4301      	orrs	r1, r0
 8006546:	61d1      	str	r1, [r2, #28]
 8006548:	69d3      	ldr	r3, [r2, #28]
 800654a:	4003      	ands	r3, r0
 800654c:	9302      	str	r3, [sp, #8]
 800654e:	9b02      	ldr	r3, [sp, #8]
 8006550:	e7b1      	b.n	80064b6 <serial_init+0x66>
        __HAL_RCC_USART4_CLK_ENABLE();
 8006552:	4a11      	ldr	r2, [pc, #68]	; (8006598 <serial_init+0x148>)
 8006554:	69d1      	ldr	r1, [r2, #28]
 8006556:	2080      	movs	r0, #128	; 0x80
 8006558:	0300      	lsls	r0, r0, #12
 800655a:	4301      	orrs	r1, r0
 800655c:	61d1      	str	r1, [r2, #28]
 800655e:	69d3      	ldr	r3, [r2, #28]
 8006560:	4003      	ands	r3, r0
 8006562:	9303      	str	r3, [sp, #12]
 8006564:	9b03      	ldr	r3, [sp, #12]
 8006566:	e7aa      	b.n	80064be <serial_init+0x6e>
        stdio_uart_inited = 1;
 8006568:	2201      	movs	r2, #1
 800656a:	4b0c      	ldr	r3, [pc, #48]	; (800659c <serial_init+0x14c>)
 800656c:	601a      	str	r2, [r3, #0]
        memcpy(&stdio_uart, obj, sizeof(serial_t));
 800656e:	324b      	adds	r2, #75	; 0x4b
 8006570:	0021      	movs	r1, r4
 8006572:	480b      	ldr	r0, [pc, #44]	; (80065a0 <serial_init+0x150>)
 8006574:	f001 f9ca 	bl	800790c <memcpy>
}
 8006578:	e7c8      	b.n	800650c <serial_init+0xbc>
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	08008788 	.word	0x08008788
 8006580:	08008710 	.word	0x08008710
 8006584:	08008990 	.word	0x08008990
 8006588:	40013800 	.word	0x40013800
 800658c:	40004400 	.word	0x40004400
 8006590:	40004800 	.word	0x40004800
 8006594:	40004c00 	.word	0x40004c00
 8006598:	40021000 	.word	0x40021000
 800659c:	20000b0c 	.word	0x20000b0c
 80065a0:	20000d04 	.word	0x20000d04

080065a4 <timer_update_irq_handler>:
{
#else
void timer_irq_handler(void)
{
#endif
    TimMasterHandle.Instance = TIM_MST;
 80065a4:	4a01      	ldr	r2, [pc, #4]	; (80065ac <timer_update_irq_handler+0x8>)
 80065a6:	4b02      	ldr	r3, [pc, #8]	; (80065b0 <timer_update_irq_handler+0xc>)
 80065a8:	601a      	str	r2, [r3, #0]

#if defined(TARGET_STM32F0)
} // end timer_update_irq_handler function
 80065aa:	4770      	bx	lr
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	20000d54 	.word	0x20000d54

080065b4 <timer_oc_irq_handler>:

void timer_oc_irq_handler(void)
{
 80065b4:	b510      	push	{r4, lr}
    TimMasterHandle.Instance = TIM_MST;
 80065b6:	4b09      	ldr	r3, [pc, #36]	; (80065dc <timer_oc_irq_handler+0x28>)
 80065b8:	4a09      	ldr	r2, [pc, #36]	; (80065e0 <timer_oc_irq_handler+0x2c>)
 80065ba:	6013      	str	r3, [r2, #0]
#endif
    if (__HAL_TIM_GET_FLAG(&TimMasterHandle, TIM_FLAG_CC1) == SET) {
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	079b      	lsls	r3, r3, #30
 80065c0:	d503      	bpl.n	80065ca <timer_oc_irq_handler+0x16>
        if (__HAL_TIM_GET_IT_SOURCE(&TimMasterHandle, TIM_IT_CC1) == SET) {
 80065c2:	4b06      	ldr	r3, [pc, #24]	; (80065dc <timer_oc_irq_handler+0x28>)
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	079b      	lsls	r3, r3, #30
 80065c8:	d400      	bmi.n	80065cc <timer_oc_irq_handler+0x18>
            __HAL_TIM_CLEAR_IT(&TimMasterHandle, TIM_IT_CC1);
            us_ticker_irq_handler();
        }
    }
}
 80065ca:	bd10      	pop	{r4, pc}
            __HAL_TIM_CLEAR_IT(&TimMasterHandle, TIM_IT_CC1);
 80065cc:	2203      	movs	r2, #3
 80065ce:	4252      	negs	r2, r2
 80065d0:	4b02      	ldr	r3, [pc, #8]	; (80065dc <timer_oc_irq_handler+0x28>)
 80065d2:	611a      	str	r2, [r3, #16]
            us_ticker_irq_handler();
 80065d4:	f7fc fea2 	bl	800331c <us_ticker_irq_handler>
}
 80065d8:	e7f7      	b.n	80065ca <timer_oc_irq_handler+0x16>
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	40012c00 	.word	0x40012c00
 80065e0:	20000d54 	.word	0x20000d54

080065e4 <us_ticker_get_info>:
}
 80065e4:	4800      	ldr	r0, [pc, #0]	; (80065e8 <us_ticker_get_info+0x4>)
 80065e6:	4770      	bx	lr
 80065e8:	080089c8 	.word	0x080089c8

080065ec <init_16bit_timer>:

void init_16bit_timer(void)
{
 80065ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ee:	b083      	sub	sp, #12
    // Enable timer clock
    TIM_MST_RCC;
 80065f0:	4b2a      	ldr	r3, [pc, #168]	; (800669c <init_16bit_timer+0xb0>)
 80065f2:	6999      	ldr	r1, [r3, #24]
 80065f4:	2280      	movs	r2, #128	; 0x80
 80065f6:	0112      	lsls	r2, r2, #4
 80065f8:	4311      	orrs	r1, r2
 80065fa:	6199      	str	r1, [r3, #24]
 80065fc:	6999      	ldr	r1, [r3, #24]
 80065fe:	4011      	ands	r1, r2
 8006600:	9101      	str	r1, [sp, #4]
 8006602:	9901      	ldr	r1, [sp, #4]

    // Reset timer
    TIM_MST_RESET_ON;
 8006604:	68d9      	ldr	r1, [r3, #12]
 8006606:	430a      	orrs	r2, r1
 8006608:	60da      	str	r2, [r3, #12]
    TIM_MST_RESET_OFF;
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	4924      	ldr	r1, [pc, #144]	; (80066a0 <init_16bit_timer+0xb4>)
 800660e:	400a      	ands	r2, r1
 8006610:	60da      	str	r2, [r3, #12]

    // Update the SystemCoreClock variable
    SystemCoreClockUpdate();
 8006612:	f7ff f989 	bl	8005928 <SystemCoreClockUpdate>

    // Configure time base
    TimMasterHandle.Instance           = TIM_MST;
 8006616:	4c23      	ldr	r4, [pc, #140]	; (80066a4 <init_16bit_timer+0xb8>)
 8006618:	4b23      	ldr	r3, [pc, #140]	; (80066a8 <init_16bit_timer+0xbc>)
 800661a:	6023      	str	r3, [r4, #0]
    TimMasterHandle.Init.Period        = 0xFFFF;
 800661c:	4b23      	ldr	r3, [pc, #140]	; (80066ac <init_16bit_timer+0xc0>)
 800661e:	60e3      	str	r3, [r4, #12]
    TimMasterHandle.Init.Prescaler     = (uint32_t)(SystemCoreClock / 1000000) - 1; // 1 us tick
 8006620:	4b23      	ldr	r3, [pc, #140]	; (80066b0 <init_16bit_timer+0xc4>)
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	4923      	ldr	r1, [pc, #140]	; (80066b4 <init_16bit_timer+0xc8>)
 8006626:	f7f9 fd81 	bl	800012c <__udivsi3>
 800662a:	3801      	subs	r0, #1
 800662c:	6060      	str	r0, [r4, #4]
    TimMasterHandle.Init.ClockDivision = 0;
 800662e:	2500      	movs	r5, #0
 8006630:	6125      	str	r5, [r4, #16]
    TimMasterHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8006632:	60a5      	str	r5, [r4, #8]
#if !defined(TARGET_STM32L0) && !defined(TARGET_STM32L1)
    TimMasterHandle.Init.RepetitionCounter = 0;
 8006634:	6165      	str	r5, [r4, #20]
#endif
#ifdef TIM_AUTORELOAD_PRELOAD_DISABLE
    TimMasterHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006636:	61a5      	str	r5, [r4, #24]
#endif
    HAL_TIM_Base_Init(&TimMasterHandle);
 8006638:	0020      	movs	r0, r4
 800663a:	f7fe fe5b 	bl	80052f4 <HAL_TIM_Base_Init>

    // Configure output compare channel 1 for mbed timeout (enabled later when used)
    HAL_TIM_OC_Start(&TimMasterHandle, TIM_CHANNEL_1);
 800663e:	2100      	movs	r1, #0
 8006640:	0020      	movs	r0, r4
 8006642:	f7fe ff51 	bl	80054e8 <HAL_TIM_OC_Start>

    // Output compare channel 1 interrupt for mbed timeout
#if defined(TARGET_STM32F0)
    NVIC_SetVector(TIM_MST_UP_IRQ, (uint32_t)timer_update_irq_handler);
 8006646:	491c      	ldr	r1, [pc, #112]	; (80066b8 <init_16bit_timer+0xcc>)
 8006648:	200d      	movs	r0, #13
 800664a:	f7fd fd7b 	bl	8004144 <NVIC_SetVector>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800664e:	4e1b      	ldr	r6, [pc, #108]	; (80066bc <init_16bit_timer+0xd0>)
 8006650:	2380      	movs	r3, #128	; 0x80
 8006652:	019b      	lsls	r3, r3, #6
 8006654:	6033      	str	r3, [r6, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006656:	27c3      	movs	r7, #195	; 0xc3
 8006658:	00bf      	lsls	r7, r7, #2
 800665a:	59f3      	ldr	r3, [r6, r7]
 800665c:	4a18      	ldr	r2, [pc, #96]	; (80066c0 <init_16bit_timer+0xd4>)
 800665e:	4013      	ands	r3, r2
 8006660:	51f3      	str	r3, [r6, r7]
    NVIC_EnableIRQ(TIM_MST_UP_IRQ);
    NVIC_SetPriority(TIM_MST_UP_IRQ, 0);
    NVIC_SetVector(TIM_MST_OC_IRQ, (uint32_t)timer_oc_irq_handler);
 8006662:	4918      	ldr	r1, [pc, #96]	; (80066c4 <init_16bit_timer+0xd8>)
 8006664:	200e      	movs	r0, #14
 8006666:	f7fd fd6d 	bl	8004144 <NVIC_SetVector>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800666a:	2380      	movs	r3, #128	; 0x80
 800666c:	01db      	lsls	r3, r3, #7
 800666e:	6033      	str	r3, [r6, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006670:	59f3      	ldr	r3, [r6, r7]
 8006672:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <init_16bit_timer+0xdc>)
 8006674:	401a      	ands	r2, r3
 8006676:	2380      	movs	r3, #128	; 0x80
 8006678:	03db      	lsls	r3, r3, #15
 800667a:	4313      	orrs	r3, r2
 800667c:	51f3      	str	r3, [r6, r7]
    NVIC_SetVector(TIM_MST_IRQ, (uint32_t)timer_irq_handler);
    NVIC_EnableIRQ(TIM_MST_IRQ);
#endif

    // Enable timer
    HAL_TIM_Base_Start(&TimMasterHandle);
 800667e:	0020      	movs	r0, r4
 8006680:	f7fe fde1 	bl	8005246 <HAL_TIM_Base_Start>
    // Define the FREEZE_TIMER_ON_DEBUG macro in mbed_app.json for example
#if !defined(NDEBUG) && defined(FREEZE_TIMER_ON_DEBUG) && defined(TIM_MST_DBGMCU_FREEZE)
    TIM_MST_DBGMCU_FREEZE;
#endif

    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 8006684:	6822      	ldr	r2, [r4, #0]
 8006686:	68d3      	ldr	r3, [r2, #12]
 8006688:	2102      	movs	r1, #2
 800668a:	438b      	bics	r3, r1
 800668c:	60d3      	str	r3, [r2, #12]

    // Used by HAL_GetTick()
    prev_time = 0;
 800668e:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <init_16bit_timer+0xe0>)
 8006690:	601d      	str	r5, [r3, #0]
    elapsed_time = 0;
 8006692:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <init_16bit_timer+0xe4>)
 8006694:	601d      	str	r5, [r3, #0]
}
 8006696:	b003      	add	sp, #12
 8006698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	40021000 	.word	0x40021000
 80066a0:	fffff7ff 	.word	0xfffff7ff
 80066a4:	20000d54 	.word	0x20000d54
 80066a8:	40012c00 	.word	0x40012c00
 80066ac:	0000ffff 	.word	0x0000ffff
 80066b0:	200001d0 	.word	0x200001d0
 80066b4:	000f4240 	.word	0x000f4240
 80066b8:	080065a5 	.word	0x080065a5
 80066bc:	e000e100 	.word	0xe000e100
 80066c0:	ffff00ff 	.word	0xffff00ff
 80066c4:	080065b5 	.word	0x080065b5
 80066c8:	ff00ffff 	.word	0xff00ffff
 80066cc:	20000ac4 	.word	0x20000ac4
 80066d0:	20000ac0 	.word	0x20000ac0

080066d4 <us_ticker_init>:
#endif // 16-bit/32-bit timer

void us_ticker_init(void)
{
    // Timer is already initialized in HAL_InitTick()
    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 80066d4:	4b03      	ldr	r3, [pc, #12]	; (80066e4 <us_ticker_init+0x10>)
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68d3      	ldr	r3, [r2, #12]
 80066da:	2102      	movs	r1, #2
 80066dc:	438b      	bics	r3, r1
 80066de:	60d3      	str	r3, [r2, #12]
}
 80066e0:	4770      	bx	lr
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	20000d54 	.word	0x20000d54

080066e8 <us_ticker_read>:

uint32_t us_ticker_read()
{
    return TIM_MST->CNT;
 80066e8:	4b01      	ldr	r3, [pc, #4]	; (80066f0 <us_ticker_read+0x8>)
 80066ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 80066ec:	4770      	bx	lr
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	40012c00 	.word	0x40012c00

080066f4 <us_ticker_set_interrupt>:
void us_ticker_set_interrupt(timestamp_t timestamp)
{
    // NOTE: This function must be called with interrupts disabled to keep our
    //       timer interrupt setup atomic
    // Set new output compare value
    __HAL_TIM_SET_COMPARE(&TimMasterHandle, TIM_CHANNEL_1, (uint32_t)timestamp);
 80066f4:	4b05      	ldr	r3, [pc, #20]	; (800670c <us_ticker_set_interrupt+0x18>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6358      	str	r0, [r3, #52]	; 0x34
    // Ensure the compare event starts clear
    __HAL_TIM_CLEAR_FLAG(&TimMasterHandle, TIM_FLAG_CC1);
 80066fa:	2203      	movs	r2, #3
 80066fc:	4252      	negs	r2, r2
 80066fe:	611a      	str	r2, [r3, #16]
    // Enable IT
    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	2102      	movs	r1, #2
 8006704:	430a      	orrs	r2, r1
 8006706:	60da      	str	r2, [r3, #12]
}
 8006708:	4770      	bx	lr
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	20000d54 	.word	0x20000d54

08006710 <us_ticker_fire_interrupt>:

void us_ticker_fire_interrupt(void)
{
    __HAL_TIM_CLEAR_FLAG(&TimMasterHandle, TIM_FLAG_CC1);
 8006710:	4b06      	ldr	r3, [pc, #24]	; (800672c <us_ticker_fire_interrupt+0x1c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2203      	movs	r2, #3
 8006716:	4252      	negs	r2, r2
 8006718:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_CC1G);
 800671a:	6959      	ldr	r1, [r3, #20]
 800671c:	2002      	movs	r0, #2
 800671e:	4301      	orrs	r1, r0
 8006720:	6159      	str	r1, [r3, #20]
    LL_TIM_GenerateEvent_CC1(TimMasterHandle.Instance);
    __HAL_TIM_ENABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	4302      	orrs	r2, r0
 8006726:	60da      	str	r2, [r3, #12]
}
 8006728:	4770      	bx	lr
 800672a:	46c0      	nop			; (mov r8, r8)
 800672c:	20000d54 	.word	0x20000d54

08006730 <us_ticker_disable_interrupt>:

void us_ticker_disable_interrupt(void)
{
    __HAL_TIM_DISABLE_IT(&TimMasterHandle, TIM_IT_CC1);
 8006730:	4b03      	ldr	r3, [pc, #12]	; (8006740 <us_ticker_disable_interrupt+0x10>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68d3      	ldr	r3, [r2, #12]
 8006736:	2102      	movs	r1, #2
 8006738:	438b      	bics	r3, r1
 800673a:	60d3      	str	r3, [r2, #12]
}
 800673c:	4770      	bx	lr
 800673e:	46c0      	nop			; (mov r8, r8)
 8006740:	20000d54 	.word	0x20000d54

08006744 <us_ticker_clear_interrupt>:

/* NOTE: must be called with interrupts disabled! */
void us_ticker_clear_interrupt(void)
{
    __HAL_TIM_CLEAR_FLAG(&TimMasterHandle, TIM_FLAG_CC1);
 8006744:	4b02      	ldr	r3, [pc, #8]	; (8006750 <us_ticker_clear_interrupt+0xc>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2203      	movs	r2, #3
 800674a:	4252      	negs	r2, r2
 800674c:	611a      	str	r2, [r3, #16]
}
 800674e:	4770      	bx	lr
 8006750:	20000d54 	.word	0x20000d54

08006754 <__errno>:
 8006754:	4b01      	ldr	r3, [pc, #4]	; (800675c <__errno+0x8>)
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	4770      	bx	lr
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	200001d4 	.word	0x200001d4

08006760 <exit>:
 8006760:	b510      	push	{r4, lr}
 8006762:	2100      	movs	r1, #0
 8006764:	0004      	movs	r4, r0
 8006766:	f001 fc63 	bl	8008030 <__call_exitprocs>
 800676a:	4b04      	ldr	r3, [pc, #16]	; (800677c <exit+0x1c>)
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006770:	2b00      	cmp	r3, #0
 8006772:	d000      	beq.n	8006776 <exit+0x16>
 8006774:	4798      	blx	r3
 8006776:	0020      	movs	r0, r4
 8006778:	f7fd fc2c 	bl	8003fd4 <_exit>
 800677c:	08008a30 	.word	0x08008a30

08006780 <_fclose_r>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	0005      	movs	r5, r0
 8006784:	1e0c      	subs	r4, r1, #0
 8006786:	d102      	bne.n	800678e <_fclose_r+0xe>
 8006788:	2600      	movs	r6, #0
 800678a:	0030      	movs	r0, r6
 800678c:	bd70      	pop	{r4, r5, r6, pc}
 800678e:	2800      	cmp	r0, #0
 8006790:	d004      	beq.n	800679c <_fclose_r+0x1c>
 8006792:	6983      	ldr	r3, [r0, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <_fclose_r+0x1c>
 8006798:	f000 fa08 	bl	8006bac <__sinit>
 800679c:	4b2e      	ldr	r3, [pc, #184]	; (8006858 <_fclose_r+0xd8>)
 800679e:	429c      	cmp	r4, r3
 80067a0:	d115      	bne.n	80067ce <_fclose_r+0x4e>
 80067a2:	686c      	ldr	r4, [r5, #4]
 80067a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067a6:	07db      	lsls	r3, r3, #31
 80067a8:	d405      	bmi.n	80067b6 <_fclose_r+0x36>
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	059b      	lsls	r3, r3, #22
 80067ae:	d402      	bmi.n	80067b6 <_fclose_r+0x36>
 80067b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067b2:	f000 fe1d 	bl	80073f0 <__retarget_lock_acquire_recursive>
 80067b6:	220c      	movs	r2, #12
 80067b8:	5ea3      	ldrsh	r3, [r4, r2]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d111      	bne.n	80067e2 <_fclose_r+0x62>
 80067be:	2601      	movs	r6, #1
 80067c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067c2:	401e      	ands	r6, r3
 80067c4:	d1e0      	bne.n	8006788 <_fclose_r+0x8>
 80067c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067c8:	f000 fe13 	bl	80073f2 <__retarget_lock_release_recursive>
 80067cc:	e7dd      	b.n	800678a <_fclose_r+0xa>
 80067ce:	4b23      	ldr	r3, [pc, #140]	; (800685c <_fclose_r+0xdc>)
 80067d0:	429c      	cmp	r4, r3
 80067d2:	d101      	bne.n	80067d8 <_fclose_r+0x58>
 80067d4:	68ac      	ldr	r4, [r5, #8]
 80067d6:	e7e5      	b.n	80067a4 <_fclose_r+0x24>
 80067d8:	4b21      	ldr	r3, [pc, #132]	; (8006860 <_fclose_r+0xe0>)
 80067da:	429c      	cmp	r4, r3
 80067dc:	d1e2      	bne.n	80067a4 <_fclose_r+0x24>
 80067de:	68ec      	ldr	r4, [r5, #12]
 80067e0:	e7e0      	b.n	80067a4 <_fclose_r+0x24>
 80067e2:	0021      	movs	r1, r4
 80067e4:	0028      	movs	r0, r5
 80067e6:	f000 f847 	bl	8006878 <__sflush_r>
 80067ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067ec:	0006      	movs	r6, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d006      	beq.n	8006800 <_fclose_r+0x80>
 80067f2:	6a21      	ldr	r1, [r4, #32]
 80067f4:	0028      	movs	r0, r5
 80067f6:	4798      	blx	r3
 80067f8:	2800      	cmp	r0, #0
 80067fa:	da01      	bge.n	8006800 <_fclose_r+0x80>
 80067fc:	2601      	movs	r6, #1
 80067fe:	4276      	negs	r6, r6
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	061b      	lsls	r3, r3, #24
 8006804:	d503      	bpl.n	800680e <_fclose_r+0x8e>
 8006806:	6921      	ldr	r1, [r4, #16]
 8006808:	0028      	movs	r0, r5
 800680a:	f000 fb45 	bl	8006e98 <_free_r>
 800680e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006810:	2900      	cmp	r1, #0
 8006812:	d008      	beq.n	8006826 <_fclose_r+0xa6>
 8006814:	0023      	movs	r3, r4
 8006816:	3344      	adds	r3, #68	; 0x44
 8006818:	4299      	cmp	r1, r3
 800681a:	d002      	beq.n	8006822 <_fclose_r+0xa2>
 800681c:	0028      	movs	r0, r5
 800681e:	f000 fb3b 	bl	8006e98 <_free_r>
 8006822:	2300      	movs	r3, #0
 8006824:	6363      	str	r3, [r4, #52]	; 0x34
 8006826:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006828:	2900      	cmp	r1, #0
 800682a:	d004      	beq.n	8006836 <_fclose_r+0xb6>
 800682c:	0028      	movs	r0, r5
 800682e:	f000 fb33 	bl	8006e98 <_free_r>
 8006832:	2300      	movs	r3, #0
 8006834:	64a3      	str	r3, [r4, #72]	; 0x48
 8006836:	f000 f999 	bl	8006b6c <__sfp_lock_acquire>
 800683a:	2300      	movs	r3, #0
 800683c:	81a3      	strh	r3, [r4, #12]
 800683e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006840:	07db      	lsls	r3, r3, #31
 8006842:	d402      	bmi.n	800684a <_fclose_r+0xca>
 8006844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006846:	f000 fdd4 	bl	80073f2 <__retarget_lock_release_recursive>
 800684a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800684c:	f000 fdcf 	bl	80073ee <__retarget_lock_close_recursive>
 8006850:	f000 f994 	bl	8006b7c <__sfp_lock_release>
 8006854:	e799      	b.n	800678a <_fclose_r+0xa>
 8006856:	46c0      	nop			; (mov r8, r8)
 8006858:	080089f0 	.word	0x080089f0
 800685c:	08008a10 	.word	0x08008a10
 8006860:	080089d0 	.word	0x080089d0

08006864 <fclose>:
 8006864:	b510      	push	{r4, lr}
 8006866:	4b03      	ldr	r3, [pc, #12]	; (8006874 <fclose+0x10>)
 8006868:	0001      	movs	r1, r0
 800686a:	6818      	ldr	r0, [r3, #0]
 800686c:	f7ff ff88 	bl	8006780 <_fclose_r>
 8006870:	bd10      	pop	{r4, pc}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	200001d4 	.word	0x200001d4

08006878 <__sflush_r>:
 8006878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800687a:	220c      	movs	r2, #12
 800687c:	5e8b      	ldrsh	r3, [r1, r2]
 800687e:	000c      	movs	r4, r1
 8006880:	b299      	uxth	r1, r3
 8006882:	0005      	movs	r5, r0
 8006884:	070a      	lsls	r2, r1, #28
 8006886:	d500      	bpl.n	800688a <__sflush_r+0x12>
 8006888:	e068      	b.n	800695c <__sflush_r+0xe4>
 800688a:	2280      	movs	r2, #128	; 0x80
 800688c:	0112      	lsls	r2, r2, #4
 800688e:	431a      	orrs	r2, r3
 8006890:	6863      	ldr	r3, [r4, #4]
 8006892:	81a2      	strh	r2, [r4, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	dc04      	bgt.n	80068a2 <__sflush_r+0x2a>
 8006898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	dc01      	bgt.n	80068a2 <__sflush_r+0x2a>
 800689e:	2000      	movs	r0, #0
 80068a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068a2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80068a4:	2f00      	cmp	r7, #0
 80068a6:	d0fa      	beq.n	800689e <__sflush_r+0x26>
 80068a8:	2300      	movs	r3, #0
 80068aa:	682e      	ldr	r6, [r5, #0]
 80068ac:	602b      	str	r3, [r5, #0]
 80068ae:	2380      	movs	r3, #128	; 0x80
 80068b0:	015b      	lsls	r3, r3, #5
 80068b2:	401a      	ands	r2, r3
 80068b4:	d038      	beq.n	8006928 <__sflush_r+0xb0>
 80068b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	075b      	lsls	r3, r3, #29
 80068bc:	d506      	bpl.n	80068cc <__sflush_r+0x54>
 80068be:	6863      	ldr	r3, [r4, #4]
 80068c0:	1ac0      	subs	r0, r0, r3
 80068c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <__sflush_r+0x54>
 80068c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068ca:	1ac0      	subs	r0, r0, r3
 80068cc:	0002      	movs	r2, r0
 80068ce:	6a21      	ldr	r1, [r4, #32]
 80068d0:	2300      	movs	r3, #0
 80068d2:	0028      	movs	r0, r5
 80068d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80068d6:	47b8      	blx	r7
 80068d8:	89a1      	ldrh	r1, [r4, #12]
 80068da:	1c43      	adds	r3, r0, #1
 80068dc:	d106      	bne.n	80068ec <__sflush_r+0x74>
 80068de:	682b      	ldr	r3, [r5, #0]
 80068e0:	2b1d      	cmp	r3, #29
 80068e2:	d835      	bhi.n	8006950 <__sflush_r+0xd8>
 80068e4:	4a2e      	ldr	r2, [pc, #184]	; (80069a0 <__sflush_r+0x128>)
 80068e6:	40da      	lsrs	r2, r3
 80068e8:	07d3      	lsls	r3, r2, #31
 80068ea:	d531      	bpl.n	8006950 <__sflush_r+0xd8>
 80068ec:	2200      	movs	r2, #0
 80068ee:	4b2d      	ldr	r3, [pc, #180]	; (80069a4 <__sflush_r+0x12c>)
 80068f0:	6062      	str	r2, [r4, #4]
 80068f2:	400b      	ands	r3, r1
 80068f4:	6922      	ldr	r2, [r4, #16]
 80068f6:	b21b      	sxth	r3, r3
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	6022      	str	r2, [r4, #0]
 80068fc:	04db      	lsls	r3, r3, #19
 80068fe:	d505      	bpl.n	800690c <__sflush_r+0x94>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d102      	bne.n	800690a <__sflush_r+0x92>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d100      	bne.n	800690c <__sflush_r+0x94>
 800690a:	6560      	str	r0, [r4, #84]	; 0x54
 800690c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800690e:	602e      	str	r6, [r5, #0]
 8006910:	2900      	cmp	r1, #0
 8006912:	d0c4      	beq.n	800689e <__sflush_r+0x26>
 8006914:	0023      	movs	r3, r4
 8006916:	3344      	adds	r3, #68	; 0x44
 8006918:	4299      	cmp	r1, r3
 800691a:	d002      	beq.n	8006922 <__sflush_r+0xaa>
 800691c:	0028      	movs	r0, r5
 800691e:	f000 fabb 	bl	8006e98 <_free_r>
 8006922:	2000      	movs	r0, #0
 8006924:	6360      	str	r0, [r4, #52]	; 0x34
 8006926:	e7bb      	b.n	80068a0 <__sflush_r+0x28>
 8006928:	2301      	movs	r3, #1
 800692a:	6a21      	ldr	r1, [r4, #32]
 800692c:	0028      	movs	r0, r5
 800692e:	47b8      	blx	r7
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d1c1      	bne.n	80068b8 <__sflush_r+0x40>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0be      	beq.n	80068b8 <__sflush_r+0x40>
 800693a:	2b1d      	cmp	r3, #29
 800693c:	d001      	beq.n	8006942 <__sflush_r+0xca>
 800693e:	2b16      	cmp	r3, #22
 8006940:	d101      	bne.n	8006946 <__sflush_r+0xce>
 8006942:	602e      	str	r6, [r5, #0]
 8006944:	e7ab      	b.n	800689e <__sflush_r+0x26>
 8006946:	2340      	movs	r3, #64	; 0x40
 8006948:	89a2      	ldrh	r2, [r4, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	81a3      	strh	r3, [r4, #12]
 800694e:	e7a7      	b.n	80068a0 <__sflush_r+0x28>
 8006950:	2340      	movs	r3, #64	; 0x40
 8006952:	430b      	orrs	r3, r1
 8006954:	2001      	movs	r0, #1
 8006956:	81a3      	strh	r3, [r4, #12]
 8006958:	4240      	negs	r0, r0
 800695a:	e7a1      	b.n	80068a0 <__sflush_r+0x28>
 800695c:	6927      	ldr	r7, [r4, #16]
 800695e:	2f00      	cmp	r7, #0
 8006960:	d09d      	beq.n	800689e <__sflush_r+0x26>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	6027      	str	r7, [r4, #0]
 8006966:	1bdb      	subs	r3, r3, r7
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	2300      	movs	r3, #0
 800696c:	078a      	lsls	r2, r1, #30
 800696e:	d100      	bne.n	8006972 <__sflush_r+0xfa>
 8006970:	6963      	ldr	r3, [r4, #20]
 8006972:	60a3      	str	r3, [r4, #8]
 8006974:	9b01      	ldr	r3, [sp, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	dc00      	bgt.n	800697c <__sflush_r+0x104>
 800697a:	e790      	b.n	800689e <__sflush_r+0x26>
 800697c:	9b01      	ldr	r3, [sp, #4]
 800697e:	003a      	movs	r2, r7
 8006980:	6a21      	ldr	r1, [r4, #32]
 8006982:	0028      	movs	r0, r5
 8006984:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006986:	47b0      	blx	r6
 8006988:	2800      	cmp	r0, #0
 800698a:	dc03      	bgt.n	8006994 <__sflush_r+0x11c>
 800698c:	2340      	movs	r3, #64	; 0x40
 800698e:	89a2      	ldrh	r2, [r4, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	e7df      	b.n	8006954 <__sflush_r+0xdc>
 8006994:	9b01      	ldr	r3, [sp, #4]
 8006996:	183f      	adds	r7, r7, r0
 8006998:	1a1b      	subs	r3, r3, r0
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	e7ea      	b.n	8006974 <__sflush_r+0xfc>
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	20400001 	.word	0x20400001
 80069a4:	fffff7ff 	.word	0xfffff7ff

080069a8 <_fflush_r>:
 80069a8:	690b      	ldr	r3, [r1, #16]
 80069aa:	b570      	push	{r4, r5, r6, lr}
 80069ac:	0005      	movs	r5, r0
 80069ae:	000c      	movs	r4, r1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <_fflush_r+0x12>
 80069b4:	2500      	movs	r5, #0
 80069b6:	0028      	movs	r0, r5
 80069b8:	bd70      	pop	{r4, r5, r6, pc}
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d004      	beq.n	80069c8 <_fflush_r+0x20>
 80069be:	6983      	ldr	r3, [r0, #24]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <_fflush_r+0x20>
 80069c4:	f000 f8f2 	bl	8006bac <__sinit>
 80069c8:	4b14      	ldr	r3, [pc, #80]	; (8006a1c <_fflush_r+0x74>)
 80069ca:	429c      	cmp	r4, r3
 80069cc:	d11b      	bne.n	8006a06 <_fflush_r+0x5e>
 80069ce:	686c      	ldr	r4, [r5, #4]
 80069d0:	220c      	movs	r2, #12
 80069d2:	5ea3      	ldrsh	r3, [r4, r2]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0ed      	beq.n	80069b4 <_fflush_r+0xc>
 80069d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069da:	07d2      	lsls	r2, r2, #31
 80069dc:	d404      	bmi.n	80069e8 <_fflush_r+0x40>
 80069de:	059b      	lsls	r3, r3, #22
 80069e0:	d402      	bmi.n	80069e8 <_fflush_r+0x40>
 80069e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069e4:	f000 fd04 	bl	80073f0 <__retarget_lock_acquire_recursive>
 80069e8:	0028      	movs	r0, r5
 80069ea:	0021      	movs	r1, r4
 80069ec:	f7ff ff44 	bl	8006878 <__sflush_r>
 80069f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069f2:	0005      	movs	r5, r0
 80069f4:	07db      	lsls	r3, r3, #31
 80069f6:	d4de      	bmi.n	80069b6 <_fflush_r+0xe>
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	059b      	lsls	r3, r3, #22
 80069fc:	d4db      	bmi.n	80069b6 <_fflush_r+0xe>
 80069fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a00:	f000 fcf7 	bl	80073f2 <__retarget_lock_release_recursive>
 8006a04:	e7d7      	b.n	80069b6 <_fflush_r+0xe>
 8006a06:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <_fflush_r+0x78>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	d101      	bne.n	8006a10 <_fflush_r+0x68>
 8006a0c:	68ac      	ldr	r4, [r5, #8]
 8006a0e:	e7df      	b.n	80069d0 <_fflush_r+0x28>
 8006a10:	4b04      	ldr	r3, [pc, #16]	; (8006a24 <_fflush_r+0x7c>)
 8006a12:	429c      	cmp	r4, r3
 8006a14:	d1dc      	bne.n	80069d0 <_fflush_r+0x28>
 8006a16:	68ec      	ldr	r4, [r5, #12]
 8006a18:	e7da      	b.n	80069d0 <_fflush_r+0x28>
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	080089f0 	.word	0x080089f0
 8006a20:	08008a10 	.word	0x08008a10
 8006a24:	080089d0 	.word	0x080089d0

08006a28 <fflush>:
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	1e01      	subs	r1, r0, #0
 8006a2c:	d105      	bne.n	8006a3a <fflush+0x12>
 8006a2e:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <fflush+0x1c>)
 8006a30:	4905      	ldr	r1, [pc, #20]	; (8006a48 <fflush+0x20>)
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	f000 fc94 	bl	8007360 <_fwalk_reent>
 8006a38:	bd10      	pop	{r4, pc}
 8006a3a:	4b04      	ldr	r3, [pc, #16]	; (8006a4c <fflush+0x24>)
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	f7ff ffb3 	bl	80069a8 <_fflush_r>
 8006a42:	e7f9      	b.n	8006a38 <fflush+0x10>
 8006a44:	08008a30 	.word	0x08008a30
 8006a48:	080069a9 	.word	0x080069a9
 8006a4c:	200001d4 	.word	0x200001d4

08006a50 <_fgetc_r>:
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	0005      	movs	r5, r0
 8006a54:	000c      	movs	r4, r1
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d004      	beq.n	8006a64 <_fgetc_r+0x14>
 8006a5a:	6983      	ldr	r3, [r0, #24]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <_fgetc_r+0x14>
 8006a60:	f000 f8a4 	bl	8006bac <__sinit>
 8006a64:	4b18      	ldr	r3, [pc, #96]	; (8006ac8 <_fgetc_r+0x78>)
 8006a66:	429c      	cmp	r4, r3
 8006a68:	d11e      	bne.n	8006aa8 <_fgetc_r+0x58>
 8006a6a:	686c      	ldr	r4, [r5, #4]
 8006a6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a6e:	07db      	lsls	r3, r3, #31
 8006a70:	d405      	bmi.n	8006a7e <_fgetc_r+0x2e>
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	059b      	lsls	r3, r3, #22
 8006a76:	d402      	bmi.n	8006a7e <_fgetc_r+0x2e>
 8006a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a7a:	f000 fcb9 	bl	80073f0 <__retarget_lock_acquire_recursive>
 8006a7e:	6863      	ldr	r3, [r4, #4]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	6063      	str	r3, [r4, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	da19      	bge.n	8006abc <_fgetc_r+0x6c>
 8006a88:	0028      	movs	r0, r5
 8006a8a:	0021      	movs	r1, r4
 8006a8c:	f001 f858 	bl	8007b40 <__srget_r>
 8006a90:	0005      	movs	r5, r0
 8006a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a94:	07db      	lsls	r3, r3, #31
 8006a96:	d405      	bmi.n	8006aa4 <_fgetc_r+0x54>
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	059b      	lsls	r3, r3, #22
 8006a9c:	d402      	bmi.n	8006aa4 <_fgetc_r+0x54>
 8006a9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aa0:	f000 fca7 	bl	80073f2 <__retarget_lock_release_recursive>
 8006aa4:	0028      	movs	r0, r5
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	4b08      	ldr	r3, [pc, #32]	; (8006acc <_fgetc_r+0x7c>)
 8006aaa:	429c      	cmp	r4, r3
 8006aac:	d101      	bne.n	8006ab2 <_fgetc_r+0x62>
 8006aae:	68ac      	ldr	r4, [r5, #8]
 8006ab0:	e7dc      	b.n	8006a6c <_fgetc_r+0x1c>
 8006ab2:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <_fgetc_r+0x80>)
 8006ab4:	429c      	cmp	r4, r3
 8006ab6:	d1d9      	bne.n	8006a6c <_fgetc_r+0x1c>
 8006ab8:	68ec      	ldr	r4, [r5, #12]
 8006aba:	e7d7      	b.n	8006a6c <_fgetc_r+0x1c>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	6022      	str	r2, [r4, #0]
 8006ac2:	781d      	ldrb	r5, [r3, #0]
 8006ac4:	e7e5      	b.n	8006a92 <_fgetc_r+0x42>
 8006ac6:	46c0      	nop			; (mov r8, r8)
 8006ac8:	080089f0 	.word	0x080089f0
 8006acc:	08008a10 	.word	0x08008a10
 8006ad0:	080089d0 	.word	0x080089d0

08006ad4 <fgetc>:
 8006ad4:	b510      	push	{r4, lr}
 8006ad6:	4b03      	ldr	r3, [pc, #12]	; (8006ae4 <fgetc+0x10>)
 8006ad8:	0001      	movs	r1, r0
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	f7ff ffb8 	bl	8006a50 <_fgetc_r>
 8006ae0:	bd10      	pop	{r4, pc}
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	200001d4 	.word	0x200001d4

08006ae8 <_cleanup_r>:
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	4902      	ldr	r1, [pc, #8]	; (8006af4 <_cleanup_r+0xc>)
 8006aec:	f000 fc38 	bl	8007360 <_fwalk_reent>
 8006af0:	bd10      	pop	{r4, pc}
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	08006781 	.word	0x08006781

08006af8 <std.isra.0>:
 8006af8:	2300      	movs	r3, #0
 8006afa:	b510      	push	{r4, lr}
 8006afc:	0004      	movs	r4, r0
 8006afe:	6003      	str	r3, [r0, #0]
 8006b00:	6043      	str	r3, [r0, #4]
 8006b02:	6083      	str	r3, [r0, #8]
 8006b04:	8181      	strh	r1, [r0, #12]
 8006b06:	6643      	str	r3, [r0, #100]	; 0x64
 8006b08:	81c2      	strh	r2, [r0, #14]
 8006b0a:	6103      	str	r3, [r0, #16]
 8006b0c:	6143      	str	r3, [r0, #20]
 8006b0e:	6183      	str	r3, [r0, #24]
 8006b10:	0019      	movs	r1, r3
 8006b12:	2208      	movs	r2, #8
 8006b14:	305c      	adds	r0, #92	; 0x5c
 8006b16:	f000 ff02 	bl	800791e <memset>
 8006b1a:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <std.isra.0+0x38>)
 8006b1c:	6224      	str	r4, [r4, #32]
 8006b1e:	6263      	str	r3, [r4, #36]	; 0x24
 8006b20:	4b04      	ldr	r3, [pc, #16]	; (8006b34 <std.isra.0+0x3c>)
 8006b22:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b24:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <std.isra.0+0x40>)
 8006b26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b28:	4b04      	ldr	r3, [pc, #16]	; (8006b3c <std.isra.0+0x44>)
 8006b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006b2c:	bd10      	pop	{r4, pc}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	08007d75 	.word	0x08007d75
 8006b34:	08007d9d 	.word	0x08007d9d
 8006b38:	08007dd5 	.word	0x08007dd5
 8006b3c:	08007e01 	.word	0x08007e01

08006b40 <__sfmoreglue>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	2568      	movs	r5, #104	; 0x68
 8006b44:	1e4a      	subs	r2, r1, #1
 8006b46:	4355      	muls	r5, r2
 8006b48:	000e      	movs	r6, r1
 8006b4a:	0029      	movs	r1, r5
 8006b4c:	3174      	adds	r1, #116	; 0x74
 8006b4e:	f000 fcd9 	bl	8007504 <_malloc_r>
 8006b52:	1e04      	subs	r4, r0, #0
 8006b54:	d008      	beq.n	8006b68 <__sfmoreglue+0x28>
 8006b56:	2100      	movs	r1, #0
 8006b58:	002a      	movs	r2, r5
 8006b5a:	6001      	str	r1, [r0, #0]
 8006b5c:	6046      	str	r6, [r0, #4]
 8006b5e:	300c      	adds	r0, #12
 8006b60:	60a0      	str	r0, [r4, #8]
 8006b62:	3268      	adds	r2, #104	; 0x68
 8006b64:	f000 fedb 	bl	800791e <memset>
 8006b68:	0020      	movs	r0, r4
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}

08006b6c <__sfp_lock_acquire>:
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	4802      	ldr	r0, [pc, #8]	; (8006b78 <__sfp_lock_acquire+0xc>)
 8006b70:	f000 fc3e 	bl	80073f0 <__retarget_lock_acquire_recursive>
 8006b74:	bd10      	pop	{r4, pc}
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	20000da4 	.word	0x20000da4

08006b7c <__sfp_lock_release>:
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	4802      	ldr	r0, [pc, #8]	; (8006b88 <__sfp_lock_release+0xc>)
 8006b80:	f000 fc37 	bl	80073f2 <__retarget_lock_release_recursive>
 8006b84:	bd10      	pop	{r4, pc}
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	20000da4 	.word	0x20000da4

08006b8c <__sinit_lock_acquire>:
 8006b8c:	b510      	push	{r4, lr}
 8006b8e:	4802      	ldr	r0, [pc, #8]	; (8006b98 <__sinit_lock_acquire+0xc>)
 8006b90:	f000 fc2e 	bl	80073f0 <__retarget_lock_acquire_recursive>
 8006b94:	bd10      	pop	{r4, pc}
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	20000d9f 	.word	0x20000d9f

08006b9c <__sinit_lock_release>:
 8006b9c:	b510      	push	{r4, lr}
 8006b9e:	4802      	ldr	r0, [pc, #8]	; (8006ba8 <__sinit_lock_release+0xc>)
 8006ba0:	f000 fc27 	bl	80073f2 <__retarget_lock_release_recursive>
 8006ba4:	bd10      	pop	{r4, pc}
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	20000d9f 	.word	0x20000d9f

08006bac <__sinit>:
 8006bac:	b513      	push	{r0, r1, r4, lr}
 8006bae:	0004      	movs	r4, r0
 8006bb0:	f7ff ffec 	bl	8006b8c <__sinit_lock_acquire>
 8006bb4:	69a3      	ldr	r3, [r4, #24]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <__sinit+0x14>
 8006bba:	f7ff ffef 	bl	8006b9c <__sinit_lock_release>
 8006bbe:	bd13      	pop	{r0, r1, r4, pc}
 8006bc0:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <__sinit+0x6c>)
 8006bc2:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bc4:	0022      	movs	r2, r4
 8006bc6:	32d8      	adds	r2, #216	; 0xd8
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	6053      	str	r3, [r2, #4]
 8006bcc:	6093      	str	r3, [r2, #8]
 8006bce:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <__sinit+0x70>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	429c      	cmp	r4, r3
 8006bd6:	d101      	bne.n	8006bdc <__sinit+0x30>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	61a3      	str	r3, [r4, #24]
 8006bdc:	0020      	movs	r0, r4
 8006bde:	f000 f81f 	bl	8006c20 <__sfp>
 8006be2:	6060      	str	r0, [r4, #4]
 8006be4:	0020      	movs	r0, r4
 8006be6:	f000 f81b 	bl	8006c20 <__sfp>
 8006bea:	60a0      	str	r0, [r4, #8]
 8006bec:	0020      	movs	r0, r4
 8006bee:	f000 f817 	bl	8006c20 <__sfp>
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	60e0      	str	r0, [r4, #12]
 8006bf6:	2104      	movs	r1, #4
 8006bf8:	6860      	ldr	r0, [r4, #4]
 8006bfa:	f7ff ff7d 	bl	8006af8 <std.isra.0>
 8006bfe:	2201      	movs	r2, #1
 8006c00:	2109      	movs	r1, #9
 8006c02:	68a0      	ldr	r0, [r4, #8]
 8006c04:	f7ff ff78 	bl	8006af8 <std.isra.0>
 8006c08:	2202      	movs	r2, #2
 8006c0a:	2112      	movs	r1, #18
 8006c0c:	68e0      	ldr	r0, [r4, #12]
 8006c0e:	f7ff ff73 	bl	8006af8 <std.isra.0>
 8006c12:	2301      	movs	r3, #1
 8006c14:	61a3      	str	r3, [r4, #24]
 8006c16:	e7d0      	b.n	8006bba <__sinit+0xe>
 8006c18:	08006ae9 	.word	0x08006ae9
 8006c1c:	08008a30 	.word	0x08008a30

08006c20 <__sfp>:
 8006c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c22:	0007      	movs	r7, r0
 8006c24:	f7ff ffa2 	bl	8006b6c <__sfp_lock_acquire>
 8006c28:	4b20      	ldr	r3, [pc, #128]	; (8006cac <__sfp+0x8c>)
 8006c2a:	681e      	ldr	r6, [r3, #0]
 8006c2c:	69b3      	ldr	r3, [r6, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d102      	bne.n	8006c38 <__sfp+0x18>
 8006c32:	0030      	movs	r0, r6
 8006c34:	f7ff ffba 	bl	8006bac <__sinit>
 8006c38:	36d8      	adds	r6, #216	; 0xd8
 8006c3a:	68b4      	ldr	r4, [r6, #8]
 8006c3c:	6873      	ldr	r3, [r6, #4]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	d504      	bpl.n	8006c4c <__sfp+0x2c>
 8006c42:	6833      	ldr	r3, [r6, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d007      	beq.n	8006c58 <__sfp+0x38>
 8006c48:	6836      	ldr	r6, [r6, #0]
 8006c4a:	e7f6      	b.n	8006c3a <__sfp+0x1a>
 8006c4c:	220c      	movs	r2, #12
 8006c4e:	5ea5      	ldrsh	r5, [r4, r2]
 8006c50:	2d00      	cmp	r5, #0
 8006c52:	d00e      	beq.n	8006c72 <__sfp+0x52>
 8006c54:	3468      	adds	r4, #104	; 0x68
 8006c56:	e7f2      	b.n	8006c3e <__sfp+0x1e>
 8006c58:	2104      	movs	r1, #4
 8006c5a:	0038      	movs	r0, r7
 8006c5c:	f7ff ff70 	bl	8006b40 <__sfmoreglue>
 8006c60:	1e04      	subs	r4, r0, #0
 8006c62:	6030      	str	r0, [r6, #0]
 8006c64:	d1f0      	bne.n	8006c48 <__sfp+0x28>
 8006c66:	f7ff ff89 	bl	8006b7c <__sfp_lock_release>
 8006c6a:	230c      	movs	r3, #12
 8006c6c:	603b      	str	r3, [r7, #0]
 8006c6e:	0020      	movs	r0, r4
 8006c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c72:	2301      	movs	r3, #1
 8006c74:	0020      	movs	r0, r4
 8006c76:	425b      	negs	r3, r3
 8006c78:	81e3      	strh	r3, [r4, #14]
 8006c7a:	3302      	adds	r3, #2
 8006c7c:	81a3      	strh	r3, [r4, #12]
 8006c7e:	3058      	adds	r0, #88	; 0x58
 8006c80:	6665      	str	r5, [r4, #100]	; 0x64
 8006c82:	f000 fbb3 	bl	80073ec <__retarget_lock_init_recursive>
 8006c86:	f7ff ff79 	bl	8006b7c <__sfp_lock_release>
 8006c8a:	0020      	movs	r0, r4
 8006c8c:	6025      	str	r5, [r4, #0]
 8006c8e:	60a5      	str	r5, [r4, #8]
 8006c90:	6065      	str	r5, [r4, #4]
 8006c92:	6125      	str	r5, [r4, #16]
 8006c94:	6165      	str	r5, [r4, #20]
 8006c96:	61a5      	str	r5, [r4, #24]
 8006c98:	2208      	movs	r2, #8
 8006c9a:	0029      	movs	r1, r5
 8006c9c:	305c      	adds	r0, #92	; 0x5c
 8006c9e:	f000 fe3e 	bl	800791e <memset>
 8006ca2:	6365      	str	r5, [r4, #52]	; 0x34
 8006ca4:	63a5      	str	r5, [r4, #56]	; 0x38
 8006ca6:	64a5      	str	r5, [r4, #72]	; 0x48
 8006ca8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006caa:	e7e0      	b.n	8006c6e <__sfp+0x4e>
 8006cac:	08008a30 	.word	0x08008a30

08006cb0 <_fopen_r>:
 8006cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cb2:	000f      	movs	r7, r1
 8006cb4:	0011      	movs	r1, r2
 8006cb6:	aa01      	add	r2, sp, #4
 8006cb8:	0005      	movs	r5, r0
 8006cba:	f001 fa4d 	bl	8008158 <__sflags>
 8006cbe:	1e06      	subs	r6, r0, #0
 8006cc0:	d102      	bne.n	8006cc8 <_fopen_r+0x18>
 8006cc2:	2400      	movs	r4, #0
 8006cc4:	0020      	movs	r0, r4
 8006cc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cc8:	0028      	movs	r0, r5
 8006cca:	f7ff ffa9 	bl	8006c20 <__sfp>
 8006cce:	1e04      	subs	r4, r0, #0
 8006cd0:	d0f7      	beq.n	8006cc2 <_fopen_r+0x12>
 8006cd2:	23db      	movs	r3, #219	; 0xdb
 8006cd4:	0039      	movs	r1, r7
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	9a01      	ldr	r2, [sp, #4]
 8006cda:	0028      	movs	r0, r5
 8006cdc:	f000 fe28 	bl	8007930 <_open_r>
 8006ce0:	1e07      	subs	r7, r0, #0
 8006ce2:	da09      	bge.n	8006cf8 <_fopen_r+0x48>
 8006ce4:	2500      	movs	r5, #0
 8006ce6:	f7ff ff41 	bl	8006b6c <__sfp_lock_acquire>
 8006cea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cec:	81a5      	strh	r5, [r4, #12]
 8006cee:	f000 fb7e 	bl	80073ee <__retarget_lock_close_recursive>
 8006cf2:	f7ff ff43 	bl	8006b7c <__sfp_lock_release>
 8006cf6:	e7e4      	b.n	8006cc2 <_fopen_r+0x12>
 8006cf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cfa:	07db      	lsls	r3, r3, #31
 8006cfc:	d405      	bmi.n	8006d0a <_fopen_r+0x5a>
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	059b      	lsls	r3, r3, #22
 8006d02:	d402      	bmi.n	8006d0a <_fopen_r+0x5a>
 8006d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d06:	f000 fb73 	bl	80073f0 <__retarget_lock_acquire_recursive>
 8006d0a:	4b0e      	ldr	r3, [pc, #56]	; (8006d44 <_fopen_r+0x94>)
 8006d0c:	81e7      	strh	r7, [r4, #14]
 8006d0e:	6263      	str	r3, [r4, #36]	; 0x24
 8006d10:	4b0d      	ldr	r3, [pc, #52]	; (8006d48 <_fopen_r+0x98>)
 8006d12:	81a6      	strh	r6, [r4, #12]
 8006d14:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d16:	4b0d      	ldr	r3, [pc, #52]	; (8006d4c <_fopen_r+0x9c>)
 8006d18:	6224      	str	r4, [r4, #32]
 8006d1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d1c:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <_fopen_r+0xa0>)
 8006d1e:	6323      	str	r3, [r4, #48]	; 0x30
 8006d20:	05f3      	lsls	r3, r6, #23
 8006d22:	d505      	bpl.n	8006d30 <_fopen_r+0x80>
 8006d24:	2302      	movs	r3, #2
 8006d26:	2200      	movs	r2, #0
 8006d28:	0021      	movs	r1, r4
 8006d2a:	0028      	movs	r0, r5
 8006d2c:	f000 f968 	bl	8007000 <_fseek_r>
 8006d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d32:	07db      	lsls	r3, r3, #31
 8006d34:	d4c6      	bmi.n	8006cc4 <_fopen_r+0x14>
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	059b      	lsls	r3, r3, #22
 8006d3a:	d4c3      	bmi.n	8006cc4 <_fopen_r+0x14>
 8006d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d3e:	f000 fb58 	bl	80073f2 <__retarget_lock_release_recursive>
 8006d42:	e7bf      	b.n	8006cc4 <_fopen_r+0x14>
 8006d44:	08007d75 	.word	0x08007d75
 8006d48:	08007d9d 	.word	0x08007d9d
 8006d4c:	08007dd5 	.word	0x08007dd5
 8006d50:	08007e01 	.word	0x08007e01

08006d54 <fopen>:
 8006d54:	b510      	push	{r4, lr}
 8006d56:	4b03      	ldr	r3, [pc, #12]	; (8006d64 <fopen+0x10>)
 8006d58:	000a      	movs	r2, r1
 8006d5a:	0001      	movs	r1, r0
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	f7ff ffa7 	bl	8006cb0 <_fopen_r>
 8006d62:	bd10      	pop	{r4, pc}
 8006d64:	200001d4 	.word	0x200001d4

08006d68 <_fputc_r>:
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	0005      	movs	r5, r0
 8006d6c:	000e      	movs	r6, r1
 8006d6e:	0014      	movs	r4, r2
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d004      	beq.n	8006d7e <_fputc_r+0x16>
 8006d74:	6983      	ldr	r3, [r0, #24]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <_fputc_r+0x16>
 8006d7a:	f7ff ff17 	bl	8006bac <__sinit>
 8006d7e:	4b14      	ldr	r3, [pc, #80]	; (8006dd0 <_fputc_r+0x68>)
 8006d80:	429c      	cmp	r4, r3
 8006d82:	d11a      	bne.n	8006dba <_fputc_r+0x52>
 8006d84:	686c      	ldr	r4, [r5, #4]
 8006d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d88:	07db      	lsls	r3, r3, #31
 8006d8a:	d405      	bmi.n	8006d98 <_fputc_r+0x30>
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	059b      	lsls	r3, r3, #22
 8006d90:	d402      	bmi.n	8006d98 <_fputc_r+0x30>
 8006d92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d94:	f000 fb2c 	bl	80073f0 <__retarget_lock_acquire_recursive>
 8006d98:	0028      	movs	r0, r5
 8006d9a:	0022      	movs	r2, r4
 8006d9c:	0031      	movs	r1, r6
 8006d9e:	f000 fddb 	bl	8007958 <_putc_r>
 8006da2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006da4:	0005      	movs	r5, r0
 8006da6:	07db      	lsls	r3, r3, #31
 8006da8:	d405      	bmi.n	8006db6 <_fputc_r+0x4e>
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	059b      	lsls	r3, r3, #22
 8006dae:	d402      	bmi.n	8006db6 <_fputc_r+0x4e>
 8006db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006db2:	f000 fb1e 	bl	80073f2 <__retarget_lock_release_recursive>
 8006db6:	0028      	movs	r0, r5
 8006db8:	bd70      	pop	{r4, r5, r6, pc}
 8006dba:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <_fputc_r+0x6c>)
 8006dbc:	429c      	cmp	r4, r3
 8006dbe:	d101      	bne.n	8006dc4 <_fputc_r+0x5c>
 8006dc0:	68ac      	ldr	r4, [r5, #8]
 8006dc2:	e7e0      	b.n	8006d86 <_fputc_r+0x1e>
 8006dc4:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <_fputc_r+0x70>)
 8006dc6:	429c      	cmp	r4, r3
 8006dc8:	d1dd      	bne.n	8006d86 <_fputc_r+0x1e>
 8006dca:	68ec      	ldr	r4, [r5, #12]
 8006dcc:	e7db      	b.n	8006d86 <_fputc_r+0x1e>
 8006dce:	46c0      	nop			; (mov r8, r8)
 8006dd0:	080089f0 	.word	0x080089f0
 8006dd4:	08008a10 	.word	0x08008a10
 8006dd8:	080089d0 	.word	0x080089d0

08006ddc <fputc>:
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	4b03      	ldr	r3, [pc, #12]	; (8006dec <fputc+0x10>)
 8006de0:	000a      	movs	r2, r1
 8006de2:	0001      	movs	r1, r0
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	f7ff ffbf 	bl	8006d68 <_fputc_r>
 8006dea:	bd10      	pop	{r4, pc}
 8006dec:	200001d4 	.word	0x200001d4

08006df0 <_malloc_trim_r>:
 8006df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006df2:	4f25      	ldr	r7, [pc, #148]	; (8006e88 <_malloc_trim_r+0x98>)
 8006df4:	000c      	movs	r4, r1
 8006df6:	0005      	movs	r5, r0
 8006df8:	f7fd f948 	bl	800408c <__malloc_lock>
 8006dfc:	0038      	movs	r0, r7
 8006dfe:	2203      	movs	r2, #3
 8006e00:	4e22      	ldr	r6, [pc, #136]	; (8006e8c <_malloc_trim_r+0x9c>)
 8006e02:	3811      	subs	r0, #17
 8006e04:	68b3      	ldr	r3, [r6, #8]
 8006e06:	1b00      	subs	r0, r0, r4
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	0039      	movs	r1, r7
 8006e0c:	4393      	bics	r3, r2
 8006e0e:	18c0      	adds	r0, r0, r3
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	f7f9 f98b 	bl	800012c <__udivsi3>
 8006e16:	1e44      	subs	r4, r0, #1
 8006e18:	437c      	muls	r4, r7
 8006e1a:	42bc      	cmp	r4, r7
 8006e1c:	da04      	bge.n	8006e28 <_malloc_trim_r+0x38>
 8006e1e:	0028      	movs	r0, r5
 8006e20:	f7fd f938 	bl	8004094 <__malloc_unlock>
 8006e24:	2000      	movs	r0, #0
 8006e26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e28:	2100      	movs	r1, #0
 8006e2a:	0028      	movs	r0, r5
 8006e2c:	f000 feb8 	bl	8007ba0 <_sbrk_r>
 8006e30:	68b3      	ldr	r3, [r6, #8]
 8006e32:	9a01      	ldr	r2, [sp, #4]
 8006e34:	189b      	adds	r3, r3, r2
 8006e36:	4298      	cmp	r0, r3
 8006e38:	d1f1      	bne.n	8006e1e <_malloc_trim_r+0x2e>
 8006e3a:	4261      	negs	r1, r4
 8006e3c:	0028      	movs	r0, r5
 8006e3e:	f000 feaf 	bl	8007ba0 <_sbrk_r>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	d110      	bne.n	8006e68 <_malloc_trim_r+0x78>
 8006e46:	2100      	movs	r1, #0
 8006e48:	0028      	movs	r0, r5
 8006e4a:	f000 fea9 	bl	8007ba0 <_sbrk_r>
 8006e4e:	68b2      	ldr	r2, [r6, #8]
 8006e50:	1a81      	subs	r1, r0, r2
 8006e52:	290f      	cmp	r1, #15
 8006e54:	dde3      	ble.n	8006e1e <_malloc_trim_r+0x2e>
 8006e56:	4b0e      	ldr	r3, [pc, #56]	; (8006e90 <_malloc_trim_r+0xa0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	1ac0      	subs	r0, r0, r3
 8006e5c:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <_malloc_trim_r+0xa4>)
 8006e5e:	6018      	str	r0, [r3, #0]
 8006e60:	2301      	movs	r3, #1
 8006e62:	430b      	orrs	r3, r1
 8006e64:	6053      	str	r3, [r2, #4]
 8006e66:	e7da      	b.n	8006e1e <_malloc_trim_r+0x2e>
 8006e68:	68b2      	ldr	r2, [r6, #8]
 8006e6a:	2601      	movs	r6, #1
 8006e6c:	9b01      	ldr	r3, [sp, #4]
 8006e6e:	0028      	movs	r0, r5
 8006e70:	1b1b      	subs	r3, r3, r4
 8006e72:	4333      	orrs	r3, r6
 8006e74:	6053      	str	r3, [r2, #4]
 8006e76:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <_malloc_trim_r+0xa4>)
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	1b14      	subs	r4, r2, r4
 8006e7c:	601c      	str	r4, [r3, #0]
 8006e7e:	f7fd f909 	bl	8004094 <__malloc_unlock>
 8006e82:	0030      	movs	r0, r6
 8006e84:	e7cf      	b.n	8006e26 <_malloc_trim_r+0x36>
 8006e86:	46c0      	nop			; (mov r8, r8)
 8006e88:	00001000 	.word	0x00001000
 8006e8c:	200002c8 	.word	0x200002c8
 8006e90:	200006d0 	.word	0x200006d0
 8006e94:	20000b10 	.word	0x20000b10

08006e98 <_free_r>:
 8006e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e9a:	1e0d      	subs	r5, r1, #0
 8006e9c:	9001      	str	r0, [sp, #4]
 8006e9e:	d02d      	beq.n	8006efc <_free_r+0x64>
 8006ea0:	f7fd f8f4 	bl	800408c <__malloc_lock>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	0029      	movs	r1, r5
 8006ea8:	469c      	mov	ip, r3
 8006eaa:	3908      	subs	r1, #8
 8006eac:	684f      	ldr	r7, [r1, #4]
 8006eae:	4662      	mov	r2, ip
 8006eb0:	003b      	movs	r3, r7
 8006eb2:	4666      	mov	r6, ip
 8006eb4:	4393      	bics	r3, r2
 8006eb6:	18c8      	adds	r0, r1, r3
 8006eb8:	6845      	ldr	r5, [r0, #4]
 8006eba:	3202      	adds	r2, #2
 8006ebc:	4395      	bics	r5, r2
 8006ebe:	4a4a      	ldr	r2, [pc, #296]	; (8006fe8 <_free_r+0x150>)
 8006ec0:	4037      	ands	r7, r6
 8006ec2:	6896      	ldr	r6, [r2, #8]
 8006ec4:	42b0      	cmp	r0, r6
 8006ec6:	d11a      	bne.n	8006efe <_free_r+0x66>
 8006ec8:	195b      	adds	r3, r3, r5
 8006eca:	2f00      	cmp	r7, #0
 8006ecc:	d106      	bne.n	8006edc <_free_r+0x44>
 8006ece:	6808      	ldr	r0, [r1, #0]
 8006ed0:	1a09      	subs	r1, r1, r0
 8006ed2:	688d      	ldr	r5, [r1, #8]
 8006ed4:	181b      	adds	r3, r3, r0
 8006ed6:	68c8      	ldr	r0, [r1, #12]
 8006ed8:	60e8      	str	r0, [r5, #12]
 8006eda:	6085      	str	r5, [r0, #8]
 8006edc:	2001      	movs	r0, #1
 8006ede:	4318      	orrs	r0, r3
 8006ee0:	6048      	str	r0, [r1, #4]
 8006ee2:	6091      	str	r1, [r2, #8]
 8006ee4:	4a41      	ldr	r2, [pc, #260]	; (8006fec <_free_r+0x154>)
 8006ee6:	6812      	ldr	r2, [r2, #0]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d304      	bcc.n	8006ef6 <_free_r+0x5e>
 8006eec:	4b40      	ldr	r3, [pc, #256]	; (8006ff0 <_free_r+0x158>)
 8006eee:	9801      	ldr	r0, [sp, #4]
 8006ef0:	6819      	ldr	r1, [r3, #0]
 8006ef2:	f7ff ff7d 	bl	8006df0 <_malloc_trim_r>
 8006ef6:	9801      	ldr	r0, [sp, #4]
 8006ef8:	f7fd f8cc 	bl	8004094 <__malloc_unlock>
 8006efc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006efe:	2600      	movs	r6, #0
 8006f00:	6045      	str	r5, [r0, #4]
 8006f02:	42b7      	cmp	r7, r6
 8006f04:	d109      	bne.n	8006f1a <_free_r+0x82>
 8006f06:	680f      	ldr	r7, [r1, #0]
 8006f08:	4c3a      	ldr	r4, [pc, #232]	; (8006ff4 <_free_r+0x15c>)
 8006f0a:	1bc9      	subs	r1, r1, r7
 8006f0c:	19db      	adds	r3, r3, r7
 8006f0e:	688f      	ldr	r7, [r1, #8]
 8006f10:	42a7      	cmp	r7, r4
 8006f12:	d02b      	beq.n	8006f6c <_free_r+0xd4>
 8006f14:	68cc      	ldr	r4, [r1, #12]
 8006f16:	60fc      	str	r4, [r7, #12]
 8006f18:	60a7      	str	r7, [r4, #8]
 8006f1a:	1947      	adds	r7, r0, r5
 8006f1c:	687c      	ldr	r4, [r7, #4]
 8006f1e:	2701      	movs	r7, #1
 8006f20:	423c      	tst	r4, r7
 8006f22:	d10b      	bne.n	8006f3c <_free_r+0xa4>
 8006f24:	195b      	adds	r3, r3, r5
 8006f26:	6885      	ldr	r5, [r0, #8]
 8006f28:	2e00      	cmp	r6, #0
 8006f2a:	d121      	bne.n	8006f70 <_free_r+0xd8>
 8006f2c:	4c31      	ldr	r4, [pc, #196]	; (8006ff4 <_free_r+0x15c>)
 8006f2e:	42a5      	cmp	r5, r4
 8006f30:	d11e      	bne.n	8006f70 <_free_r+0xd8>
 8006f32:	003e      	movs	r6, r7
 8006f34:	6151      	str	r1, [r2, #20]
 8006f36:	6111      	str	r1, [r2, #16]
 8006f38:	60cd      	str	r5, [r1, #12]
 8006f3a:	608d      	str	r5, [r1, #8]
 8006f3c:	2001      	movs	r0, #1
 8006f3e:	0005      	movs	r5, r0
 8006f40:	431d      	orrs	r5, r3
 8006f42:	604d      	str	r5, [r1, #4]
 8006f44:	50cb      	str	r3, [r1, r3]
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	d1d5      	bne.n	8006ef6 <_free_r+0x5e>
 8006f4a:	4d2b      	ldr	r5, [pc, #172]	; (8006ff8 <_free_r+0x160>)
 8006f4c:	42ab      	cmp	r3, r5
 8006f4e:	d813      	bhi.n	8006f78 <_free_r+0xe0>
 8006f50:	08db      	lsrs	r3, r3, #3
 8006f52:	109d      	asrs	r5, r3, #2
 8006f54:	40a8      	lsls	r0, r5
 8006f56:	6854      	ldr	r4, [r2, #4]
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	4320      	orrs	r0, r4
 8006f5c:	6050      	str	r0, [r2, #4]
 8006f5e:	189a      	adds	r2, r3, r2
 8006f60:	6893      	ldr	r3, [r2, #8]
 8006f62:	60ca      	str	r2, [r1, #12]
 8006f64:	608b      	str	r3, [r1, #8]
 8006f66:	6091      	str	r1, [r2, #8]
 8006f68:	60d9      	str	r1, [r3, #12]
 8006f6a:	e7c4      	b.n	8006ef6 <_free_r+0x5e>
 8006f6c:	4666      	mov	r6, ip
 8006f6e:	e7d4      	b.n	8006f1a <_free_r+0x82>
 8006f70:	68c0      	ldr	r0, [r0, #12]
 8006f72:	60e8      	str	r0, [r5, #12]
 8006f74:	6085      	str	r5, [r0, #8]
 8006f76:	e7e1      	b.n	8006f3c <_free_r+0xa4>
 8006f78:	0a5d      	lsrs	r5, r3, #9
 8006f7a:	2d04      	cmp	r5, #4
 8006f7c:	d812      	bhi.n	8006fa4 <_free_r+0x10c>
 8006f7e:	0998      	lsrs	r0, r3, #6
 8006f80:	3038      	adds	r0, #56	; 0x38
 8006f82:	00c6      	lsls	r6, r0, #3
 8006f84:	18b6      	adds	r6, r6, r2
 8006f86:	68b5      	ldr	r5, [r6, #8]
 8006f88:	2703      	movs	r7, #3
 8006f8a:	42ae      	cmp	r6, r5
 8006f8c:	d125      	bne.n	8006fda <_free_r+0x142>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	1080      	asrs	r0, r0, #2
 8006f92:	4083      	lsls	r3, r0
 8006f94:	6850      	ldr	r0, [r2, #4]
 8006f96:	4303      	orrs	r3, r0
 8006f98:	6053      	str	r3, [r2, #4]
 8006f9a:	60ce      	str	r6, [r1, #12]
 8006f9c:	608d      	str	r5, [r1, #8]
 8006f9e:	60b1      	str	r1, [r6, #8]
 8006fa0:	60e9      	str	r1, [r5, #12]
 8006fa2:	e7a8      	b.n	8006ef6 <_free_r+0x5e>
 8006fa4:	2d14      	cmp	r5, #20
 8006fa6:	d802      	bhi.n	8006fae <_free_r+0x116>
 8006fa8:	0028      	movs	r0, r5
 8006faa:	305b      	adds	r0, #91	; 0x5b
 8006fac:	e7e9      	b.n	8006f82 <_free_r+0xea>
 8006fae:	2d54      	cmp	r5, #84	; 0x54
 8006fb0:	d802      	bhi.n	8006fb8 <_free_r+0x120>
 8006fb2:	0b18      	lsrs	r0, r3, #12
 8006fb4:	306e      	adds	r0, #110	; 0x6e
 8006fb6:	e7e4      	b.n	8006f82 <_free_r+0xea>
 8006fb8:	20aa      	movs	r0, #170	; 0xaa
 8006fba:	0040      	lsls	r0, r0, #1
 8006fbc:	4285      	cmp	r5, r0
 8006fbe:	d802      	bhi.n	8006fc6 <_free_r+0x12e>
 8006fc0:	0bd8      	lsrs	r0, r3, #15
 8006fc2:	3077      	adds	r0, #119	; 0x77
 8006fc4:	e7dd      	b.n	8006f82 <_free_r+0xea>
 8006fc6:	4e0d      	ldr	r6, [pc, #52]	; (8006ffc <_free_r+0x164>)
 8006fc8:	207e      	movs	r0, #126	; 0x7e
 8006fca:	42b5      	cmp	r5, r6
 8006fcc:	d8d9      	bhi.n	8006f82 <_free_r+0xea>
 8006fce:	0c98      	lsrs	r0, r3, #18
 8006fd0:	307c      	adds	r0, #124	; 0x7c
 8006fd2:	e7d6      	b.n	8006f82 <_free_r+0xea>
 8006fd4:	68ad      	ldr	r5, [r5, #8]
 8006fd6:	42ae      	cmp	r6, r5
 8006fd8:	d003      	beq.n	8006fe2 <_free_r+0x14a>
 8006fda:	686a      	ldr	r2, [r5, #4]
 8006fdc:	43ba      	bics	r2, r7
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d3f8      	bcc.n	8006fd4 <_free_r+0x13c>
 8006fe2:	68ee      	ldr	r6, [r5, #12]
 8006fe4:	e7d9      	b.n	8006f9a <_free_r+0x102>
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	200002c8 	.word	0x200002c8
 8006fec:	200006d4 	.word	0x200006d4
 8006ff0:	20000b40 	.word	0x20000b40
 8006ff4:	200002d0 	.word	0x200002d0
 8006ff8:	000001ff 	.word	0x000001ff
 8006ffc:	00000554 	.word	0x00000554

08007000 <_fseek_r>:
 8007000:	b510      	push	{r4, lr}
 8007002:	f000 f801 	bl	8007008 <_fseeko_r>
 8007006:	bd10      	pop	{r4, pc}

08007008 <_fseeko_r>:
 8007008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800700a:	b095      	sub	sp, #84	; 0x54
 800700c:	0006      	movs	r6, r0
 800700e:	000c      	movs	r4, r1
 8007010:	9202      	str	r2, [sp, #8]
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	2800      	cmp	r0, #0
 8007016:	d004      	beq.n	8007022 <_fseeko_r+0x1a>
 8007018:	6983      	ldr	r3, [r0, #24]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <_fseeko_r+0x1a>
 800701e:	f7ff fdc5 	bl	8006bac <__sinit>
 8007022:	4bb2      	ldr	r3, [pc, #712]	; (80072ec <_fseeko_r+0x2e4>)
 8007024:	429c      	cmp	r4, r3
 8007026:	d120      	bne.n	800706a <_fseeko_r+0x62>
 8007028:	6874      	ldr	r4, [r6, #4]
 800702a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800702c:	07db      	lsls	r3, r3, #31
 800702e:	d405      	bmi.n	800703c <_fseeko_r+0x34>
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	059b      	lsls	r3, r3, #22
 8007034:	d402      	bmi.n	800703c <_fseeko_r+0x34>
 8007036:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007038:	f000 f9da 	bl	80073f0 <__retarget_lock_acquire_recursive>
 800703c:	2284      	movs	r2, #132	; 0x84
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	0052      	lsls	r2, r2, #1
 8007042:	4013      	ands	r3, r2
 8007044:	4293      	cmp	r3, r2
 8007046:	d103      	bne.n	8007050 <_fseeko_r+0x48>
 8007048:	0021      	movs	r1, r4
 800704a:	0030      	movs	r0, r6
 800704c:	f7ff fcac 	bl	80069a8 <_fflush_r>
 8007050:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007052:	9301      	str	r3, [sp, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d112      	bne.n	800707e <_fseeko_r+0x76>
 8007058:	331d      	adds	r3, #29
 800705a:	6033      	str	r3, [r6, #0]
 800705c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800705e:	07db      	lsls	r3, r3, #31
 8007060:	d400      	bmi.n	8007064 <_fseeko_r+0x5c>
 8007062:	e137      	b.n	80072d4 <_fseeko_r+0x2cc>
 8007064:	2501      	movs	r5, #1
 8007066:	426d      	negs	r5, r5
 8007068:	e0ee      	b.n	8007248 <_fseeko_r+0x240>
 800706a:	4ba1      	ldr	r3, [pc, #644]	; (80072f0 <_fseeko_r+0x2e8>)
 800706c:	429c      	cmp	r4, r3
 800706e:	d101      	bne.n	8007074 <_fseeko_r+0x6c>
 8007070:	68b4      	ldr	r4, [r6, #8]
 8007072:	e7da      	b.n	800702a <_fseeko_r+0x22>
 8007074:	4b9f      	ldr	r3, [pc, #636]	; (80072f4 <_fseeko_r+0x2ec>)
 8007076:	429c      	cmp	r4, r3
 8007078:	d1d7      	bne.n	800702a <_fseeko_r+0x22>
 800707a:	68f4      	ldr	r4, [r6, #12]
 800707c:	e7d5      	b.n	800702a <_fseeko_r+0x22>
 800707e:	9b00      	ldr	r3, [sp, #0]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d007      	beq.n	8007094 <_fseeko_r+0x8c>
 8007084:	2b02      	cmp	r3, #2
 8007086:	d001      	beq.n	800708c <_fseeko_r+0x84>
 8007088:	2b00      	cmp	r3, #0
 800708a:	d178      	bne.n	800717e <_fseeko_r+0x176>
 800708c:	2300      	movs	r3, #0
 800708e:	9303      	str	r3, [sp, #12]
 8007090:	001d      	movs	r5, r3
 8007092:	e01a      	b.n	80070ca <_fseeko_r+0xc2>
 8007094:	0021      	movs	r1, r4
 8007096:	0030      	movs	r0, r6
 8007098:	f7ff fc86 	bl	80069a8 <_fflush_r>
 800709c:	2380      	movs	r3, #128	; 0x80
 800709e:	89a2      	ldrh	r2, [r4, #12]
 80070a0:	015b      	lsls	r3, r3, #5
 80070a2:	401a      	ands	r2, r3
 80070a4:	d04d      	beq.n	8007142 <_fseeko_r+0x13a>
 80070a6:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	075a      	lsls	r2, r3, #29
 80070ac:	d55e      	bpl.n	800716c <_fseeko_r+0x164>
 80070ae:	6863      	ldr	r3, [r4, #4]
 80070b0:	1aed      	subs	r5, r5, r3
 80070b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <_fseeko_r+0xb4>
 80070b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070ba:	1aed      	subs	r5, r5, r3
 80070bc:	9b02      	ldr	r3, [sp, #8]
 80070be:	195b      	adds	r3, r3, r5
 80070c0:	9302      	str	r3, [sp, #8]
 80070c2:	9b00      	ldr	r3, [sp, #0]
 80070c4:	9303      	str	r3, [sp, #12]
 80070c6:	2300      	movs	r3, #0
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	6923      	ldr	r3, [r4, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d103      	bne.n	80070d8 <_fseeko_r+0xd0>
 80070d0:	0021      	movs	r1, r4
 80070d2:	0030      	movs	r0, r6
 80070d4:	f000 f9be 	bl	8007454 <__smakebuf_r>
 80070d8:	89a3      	ldrh	r3, [r4, #12]
 80070da:	4a87      	ldr	r2, [pc, #540]	; (80072f8 <_fseeko_r+0x2f0>)
 80070dc:	4213      	tst	r3, r2
 80070de:	d10c      	bne.n	80070fa <_fseeko_r+0xf2>
 80070e0:	2780      	movs	r7, #128	; 0x80
 80070e2:	00ff      	lsls	r7, r7, #3
 80070e4:	423b      	tst	r3, r7
 80070e6:	d162      	bne.n	80071ae <_fseeko_r+0x1a6>
 80070e8:	4b84      	ldr	r3, [pc, #528]	; (80072fc <_fseeko_r+0x2f4>)
 80070ea:	9a01      	ldr	r2, [sp, #4]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d048      	beq.n	8007182 <_fseeko_r+0x17a>
 80070f0:	2380      	movs	r3, #128	; 0x80
 80070f2:	89a2      	ldrh	r2, [r4, #12]
 80070f4:	011b      	lsls	r3, r3, #4
 80070f6:	4313      	orrs	r3, r2
 80070f8:	81a3      	strh	r3, [r4, #12]
 80070fa:	0021      	movs	r1, r4
 80070fc:	0030      	movs	r0, r6
 80070fe:	f7ff fc53 	bl	80069a8 <_fflush_r>
 8007102:	2800      	cmp	r0, #0
 8007104:	d1aa      	bne.n	800705c <_fseeko_r+0x54>
 8007106:	9b00      	ldr	r3, [sp, #0]
 8007108:	9a02      	ldr	r2, [sp, #8]
 800710a:	6a21      	ldr	r1, [r4, #32]
 800710c:	0030      	movs	r0, r6
 800710e:	9d01      	ldr	r5, [sp, #4]
 8007110:	47a8      	blx	r5
 8007112:	1c43      	adds	r3, r0, #1
 8007114:	d0a2      	beq.n	800705c <_fseeko_r+0x54>
 8007116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007118:	2900      	cmp	r1, #0
 800711a:	d008      	beq.n	800712e <_fseeko_r+0x126>
 800711c:	0023      	movs	r3, r4
 800711e:	3344      	adds	r3, #68	; 0x44
 8007120:	4299      	cmp	r1, r3
 8007122:	d002      	beq.n	800712a <_fseeko_r+0x122>
 8007124:	0030      	movs	r0, r6
 8007126:	f7ff feb7 	bl	8006e98 <_free_r>
 800712a:	2300      	movs	r3, #0
 800712c:	6363      	str	r3, [r4, #52]	; 0x34
 800712e:	2100      	movs	r1, #0
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	4a73      	ldr	r2, [pc, #460]	; (8007300 <_fseeko_r+0x2f8>)
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	6061      	str	r1, [r4, #4]
 800713a:	4013      	ands	r3, r2
 800713c:	81a3      	strh	r3, [r4, #12]
 800713e:	2208      	movs	r2, #8
 8007140:	e079      	b.n	8007236 <_fseeko_r+0x22e>
 8007142:	9d01      	ldr	r5, [sp, #4]
 8007144:	9b00      	ldr	r3, [sp, #0]
 8007146:	6a21      	ldr	r1, [r4, #32]
 8007148:	0030      	movs	r0, r6
 800714a:	47a8      	blx	r5
 800714c:	0005      	movs	r5, r0
 800714e:	1c43      	adds	r3, r0, #1
 8007150:	d1aa      	bne.n	80070a8 <_fseeko_r+0xa0>
 8007152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007154:	9a00      	ldr	r2, [sp, #0]
 8007156:	4213      	tst	r3, r2
 8007158:	d000      	beq.n	800715c <_fseeko_r+0x154>
 800715a:	e783      	b.n	8007064 <_fseeko_r+0x5c>
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	059b      	lsls	r3, r3, #22
 8007160:	d500      	bpl.n	8007164 <_fseeko_r+0x15c>
 8007162:	e77f      	b.n	8007064 <_fseeko_r+0x5c>
 8007164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007166:	f000 f944 	bl	80073f2 <__retarget_lock_release_recursive>
 800716a:	e06d      	b.n	8007248 <_fseeko_r+0x240>
 800716c:	071b      	lsls	r3, r3, #28
 800716e:	d5a5      	bpl.n	80070bc <_fseeko_r+0xb4>
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d0a2      	beq.n	80070bc <_fseeko_r+0xb4>
 8007176:	6922      	ldr	r2, [r4, #16]
 8007178:	1a9b      	subs	r3, r3, r2
 800717a:	18ed      	adds	r5, r5, r3
 800717c:	e79e      	b.n	80070bc <_fseeko_r+0xb4>
 800717e:	2316      	movs	r3, #22
 8007180:	e76b      	b.n	800705a <_fseeko_r+0x52>
 8007182:	230e      	movs	r3, #14
 8007184:	5ee1      	ldrsh	r1, [r4, r3]
 8007186:	2900      	cmp	r1, #0
 8007188:	dbb2      	blt.n	80070f0 <_fseeko_r+0xe8>
 800718a:	aa05      	add	r2, sp, #20
 800718c:	0030      	movs	r0, r6
 800718e:	f000 f8b9 	bl	8007304 <_fstat_r>
 8007192:	2800      	cmp	r0, #0
 8007194:	d1ac      	bne.n	80070f0 <_fseeko_r+0xe8>
 8007196:	22f0      	movs	r2, #240	; 0xf0
 8007198:	9b06      	ldr	r3, [sp, #24]
 800719a:	0212      	lsls	r2, r2, #8
 800719c:	4013      	ands	r3, r2
 800719e:	2280      	movs	r2, #128	; 0x80
 80071a0:	0212      	lsls	r2, r2, #8
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d1a4      	bne.n	80070f0 <_fseeko_r+0xe8>
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	6527      	str	r7, [r4, #80]	; 0x50
 80071aa:	431f      	orrs	r7, r3
 80071ac:	81a7      	strh	r7, [r4, #12]
 80071ae:	9b00      	ldr	r3, [sp, #0]
 80071b0:	9f02      	ldr	r7, [sp, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <_fseeko_r+0x1c4>
 80071b6:	230e      	movs	r3, #14
 80071b8:	5ee1      	ldrsh	r1, [r4, r3]
 80071ba:	aa05      	add	r2, sp, #20
 80071bc:	0030      	movs	r0, r6
 80071be:	f000 f8a1 	bl	8007304 <_fstat_r>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d199      	bne.n	80070fa <_fseeko_r+0xf2>
 80071c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80071c8:	9b02      	ldr	r3, [sp, #8]
 80071ca:	19df      	adds	r7, r3, r7
 80071cc:	9b03      	ldr	r3, [sp, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <_fseeko_r+0x1e0>
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	04db      	lsls	r3, r3, #19
 80071d6:	d53a      	bpl.n	800724e <_fseeko_r+0x246>
 80071d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071da:	6863      	ldr	r3, [r4, #4]
 80071dc:	1ac5      	subs	r5, r0, r3
 80071de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <_fseeko_r+0x1e0>
 80071e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071e6:	1aed      	subs	r5, r5, r3
 80071e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	2900      	cmp	r1, #0
 80071ee:	d037      	beq.n	8007260 <_fseeko_r+0x258>
 80071f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	6862      	ldr	r2, [r4, #4]
 80071f6:	18ad      	adds	r5, r5, r2
 80071f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80071fa:	1aed      	subs	r5, r5, r3
 80071fc:	189b      	adds	r3, r3, r2
 80071fe:	42af      	cmp	r7, r5
 8007200:	db33      	blt.n	800726a <_fseeko_r+0x262>
 8007202:	18ea      	adds	r2, r5, r3
 8007204:	42ba      	cmp	r2, r7
 8007206:	d930      	bls.n	800726a <_fseeko_r+0x262>
 8007208:	6922      	ldr	r2, [r4, #16]
 800720a:	1b7f      	subs	r7, r7, r5
 800720c:	19d2      	adds	r2, r2, r7
 800720e:	1bdf      	subs	r7, r3, r7
 8007210:	6022      	str	r2, [r4, #0]
 8007212:	6067      	str	r7, [r4, #4]
 8007214:	2900      	cmp	r1, #0
 8007216:	d008      	beq.n	800722a <_fseeko_r+0x222>
 8007218:	0023      	movs	r3, r4
 800721a:	3344      	adds	r3, #68	; 0x44
 800721c:	4299      	cmp	r1, r3
 800721e:	d002      	beq.n	8007226 <_fseeko_r+0x21e>
 8007220:	0030      	movs	r0, r6
 8007222:	f7ff fe39 	bl	8006e98 <_free_r>
 8007226:	2300      	movs	r3, #0
 8007228:	6363      	str	r3, [r4, #52]	; 0x34
 800722a:	2220      	movs	r2, #32
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	4393      	bics	r3, r2
 8007230:	81a3      	strh	r3, [r4, #12]
 8007232:	3a18      	subs	r2, #24
 8007234:	2100      	movs	r1, #0
 8007236:	0020      	movs	r0, r4
 8007238:	2501      	movs	r5, #1
 800723a:	305c      	adds	r0, #92	; 0x5c
 800723c:	f000 fb6f 	bl	800791e <memset>
 8007240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007242:	401d      	ands	r5, r3
 8007244:	d04e      	beq.n	80072e4 <_fseeko_r+0x2dc>
 8007246:	2500      	movs	r5, #0
 8007248:	0028      	movs	r0, r5
 800724a:	b015      	add	sp, #84	; 0x54
 800724c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800724e:	2301      	movs	r3, #1
 8007250:	9a03      	ldr	r2, [sp, #12]
 8007252:	6a21      	ldr	r1, [r4, #32]
 8007254:	0030      	movs	r0, r6
 8007256:	9d01      	ldr	r5, [sp, #4]
 8007258:	47a8      	blx	r5
 800725a:	1c43      	adds	r3, r0, #1
 800725c:	d1bd      	bne.n	80071da <_fseeko_r+0x1d2>
 800725e:	e74c      	b.n	80070fa <_fseeko_r+0xf2>
 8007260:	6822      	ldr	r2, [r4, #0]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	1aed      	subs	r5, r5, r3
 8007266:	6862      	ldr	r2, [r4, #4]
 8007268:	e7c8      	b.n	80071fc <_fseeko_r+0x1f4>
 800726a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800726c:	6a21      	ldr	r1, [r4, #32]
 800726e:	425d      	negs	r5, r3
 8007270:	403d      	ands	r5, r7
 8007272:	9503      	str	r5, [sp, #12]
 8007274:	2300      	movs	r3, #0
 8007276:	002a      	movs	r2, r5
 8007278:	0030      	movs	r0, r6
 800727a:	9d01      	ldr	r5, [sp, #4]
 800727c:	47a8      	blx	r5
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	d100      	bne.n	8007284 <_fseeko_r+0x27c>
 8007282:	e73a      	b.n	80070fa <_fseeko_r+0xf2>
 8007284:	2500      	movs	r5, #0
 8007286:	6923      	ldr	r3, [r4, #16]
 8007288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800728a:	6065      	str	r5, [r4, #4]
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	42a9      	cmp	r1, r5
 8007290:	d007      	beq.n	80072a2 <_fseeko_r+0x29a>
 8007292:	0023      	movs	r3, r4
 8007294:	3344      	adds	r3, #68	; 0x44
 8007296:	4299      	cmp	r1, r3
 8007298:	d002      	beq.n	80072a0 <_fseeko_r+0x298>
 800729a:	0030      	movs	r0, r6
 800729c:	f7ff fdfc 	bl	8006e98 <_free_r>
 80072a0:	6365      	str	r5, [r4, #52]	; 0x34
 80072a2:	2220      	movs	r2, #32
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	4393      	bics	r3, r2
 80072a8:	81a3      	strh	r3, [r4, #12]
 80072aa:	9b03      	ldr	r3, [sp, #12]
 80072ac:	1aff      	subs	r7, r7, r3
 80072ae:	d00f      	beq.n	80072d0 <_fseeko_r+0x2c8>
 80072b0:	0021      	movs	r1, r4
 80072b2:	0030      	movs	r0, r6
 80072b4:	f000 fba6 	bl	8007a04 <__srefill_r>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d000      	beq.n	80072be <_fseeko_r+0x2b6>
 80072bc:	e71d      	b.n	80070fa <_fseeko_r+0xf2>
 80072be:	6865      	ldr	r5, [r4, #4]
 80072c0:	42af      	cmp	r7, r5
 80072c2:	d900      	bls.n	80072c6 <_fseeko_r+0x2be>
 80072c4:	e719      	b.n	80070fa <_fseeko_r+0xf2>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	19db      	adds	r3, r3, r7
 80072ca:	1bef      	subs	r7, r5, r7
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	6067      	str	r7, [r4, #4]
 80072d0:	2208      	movs	r2, #8
 80072d2:	e7af      	b.n	8007234 <_fseeko_r+0x22c>
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	059b      	lsls	r3, r3, #22
 80072d8:	d500      	bpl.n	80072dc <_fseeko_r+0x2d4>
 80072da:	e6c3      	b.n	8007064 <_fseeko_r+0x5c>
 80072dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072de:	f000 f888 	bl	80073f2 <__retarget_lock_release_recursive>
 80072e2:	e6bf      	b.n	8007064 <_fseeko_r+0x5c>
 80072e4:	89a3      	ldrh	r3, [r4, #12]
 80072e6:	059b      	lsls	r3, r3, #22
 80072e8:	d4ad      	bmi.n	8007246 <_fseeko_r+0x23e>
 80072ea:	e73b      	b.n	8007164 <_fseeko_r+0x15c>
 80072ec:	080089f0 	.word	0x080089f0
 80072f0:	08008a10 	.word	0x08008a10
 80072f4:	080089d0 	.word	0x080089d0
 80072f8:	0000081a 	.word	0x0000081a
 80072fc:	08007dd5 	.word	0x08007dd5
 8007300:	fffff7df 	.word	0xfffff7df

08007304 <_fstat_r>:
 8007304:	2300      	movs	r3, #0
 8007306:	b570      	push	{r4, r5, r6, lr}
 8007308:	4c06      	ldr	r4, [pc, #24]	; (8007324 <_fstat_r+0x20>)
 800730a:	0005      	movs	r5, r0
 800730c:	0008      	movs	r0, r1
 800730e:	0011      	movs	r1, r2
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	f7fc fe2e 	bl	8003f72 <_fstat>
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	d103      	bne.n	8007322 <_fstat_r+0x1e>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d000      	beq.n	8007322 <_fstat_r+0x1e>
 8007320:	602b      	str	r3, [r5, #0]
 8007322:	bd70      	pop	{r4, r5, r6, pc}
 8007324:	20000da8 	.word	0x20000da8

08007328 <_fwalk>:
 8007328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800732a:	30d8      	adds	r0, #216	; 0xd8
 800732c:	0004      	movs	r4, r0
 800732e:	2600      	movs	r6, #0
 8007330:	9101      	str	r1, [sp, #4]
 8007332:	2c00      	cmp	r4, #0
 8007334:	d101      	bne.n	800733a <_fwalk+0x12>
 8007336:	0030      	movs	r0, r6
 8007338:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800733a:	68a5      	ldr	r5, [r4, #8]
 800733c:	6867      	ldr	r7, [r4, #4]
 800733e:	3f01      	subs	r7, #1
 8007340:	d501      	bpl.n	8007346 <_fwalk+0x1e>
 8007342:	6824      	ldr	r4, [r4, #0]
 8007344:	e7f5      	b.n	8007332 <_fwalk+0xa>
 8007346:	89ab      	ldrh	r3, [r5, #12]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d907      	bls.n	800735c <_fwalk+0x34>
 800734c:	220e      	movs	r2, #14
 800734e:	5eab      	ldrsh	r3, [r5, r2]
 8007350:	3301      	adds	r3, #1
 8007352:	d003      	beq.n	800735c <_fwalk+0x34>
 8007354:	0028      	movs	r0, r5
 8007356:	9b01      	ldr	r3, [sp, #4]
 8007358:	4798      	blx	r3
 800735a:	4306      	orrs	r6, r0
 800735c:	3568      	adds	r5, #104	; 0x68
 800735e:	e7ee      	b.n	800733e <_fwalk+0x16>

08007360 <_fwalk_reent>:
 8007360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007362:	0004      	movs	r4, r0
 8007364:	0007      	movs	r7, r0
 8007366:	2600      	movs	r6, #0
 8007368:	9101      	str	r1, [sp, #4]
 800736a:	34d8      	adds	r4, #216	; 0xd8
 800736c:	2c00      	cmp	r4, #0
 800736e:	d101      	bne.n	8007374 <_fwalk_reent+0x14>
 8007370:	0030      	movs	r0, r6
 8007372:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007374:	6863      	ldr	r3, [r4, #4]
 8007376:	68a5      	ldr	r5, [r4, #8]
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	9b00      	ldr	r3, [sp, #0]
 800737c:	3b01      	subs	r3, #1
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	d501      	bpl.n	8007386 <_fwalk_reent+0x26>
 8007382:	6824      	ldr	r4, [r4, #0]
 8007384:	e7f2      	b.n	800736c <_fwalk_reent+0xc>
 8007386:	89ab      	ldrh	r3, [r5, #12]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d908      	bls.n	800739e <_fwalk_reent+0x3e>
 800738c:	220e      	movs	r2, #14
 800738e:	5eab      	ldrsh	r3, [r5, r2]
 8007390:	3301      	adds	r3, #1
 8007392:	d004      	beq.n	800739e <_fwalk_reent+0x3e>
 8007394:	0029      	movs	r1, r5
 8007396:	0038      	movs	r0, r7
 8007398:	9b01      	ldr	r3, [sp, #4]
 800739a:	4798      	blx	r3
 800739c:	4306      	orrs	r6, r0
 800739e:	3568      	adds	r5, #104	; 0x68
 80073a0:	e7eb      	b.n	800737a <_fwalk_reent+0x1a>
	...

080073a4 <__libc_init_array>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	2600      	movs	r6, #0
 80073a8:	4d0c      	ldr	r5, [pc, #48]	; (80073dc <__libc_init_array+0x38>)
 80073aa:	4c0d      	ldr	r4, [pc, #52]	; (80073e0 <__libc_init_array+0x3c>)
 80073ac:	1b64      	subs	r4, r4, r5
 80073ae:	10a4      	asrs	r4, r4, #2
 80073b0:	42a6      	cmp	r6, r4
 80073b2:	d109      	bne.n	80073c8 <__libc_init_array+0x24>
 80073b4:	2600      	movs	r6, #0
 80073b6:	f000 ff45 	bl	8008244 <_init>
 80073ba:	4d0a      	ldr	r5, [pc, #40]	; (80073e4 <__libc_init_array+0x40>)
 80073bc:	4c0a      	ldr	r4, [pc, #40]	; (80073e8 <__libc_init_array+0x44>)
 80073be:	1b64      	subs	r4, r4, r5
 80073c0:	10a4      	asrs	r4, r4, #2
 80073c2:	42a6      	cmp	r6, r4
 80073c4:	d105      	bne.n	80073d2 <__libc_init_array+0x2e>
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	00b3      	lsls	r3, r6, #2
 80073ca:	58eb      	ldr	r3, [r5, r3]
 80073cc:	4798      	blx	r3
 80073ce:	3601      	adds	r6, #1
 80073d0:	e7ee      	b.n	80073b0 <__libc_init_array+0xc>
 80073d2:	00b3      	lsls	r3, r6, #2
 80073d4:	58eb      	ldr	r3, [r5, r3]
 80073d6:	4798      	blx	r3
 80073d8:	3601      	adds	r6, #1
 80073da:	e7f2      	b.n	80073c2 <__libc_init_array+0x1e>
 80073dc:	200006dc 	.word	0x200006dc
 80073e0:	200006dc 	.word	0x200006dc
 80073e4:	200006dc 	.word	0x200006dc
 80073e8:	200006e8 	.word	0x200006e8

080073ec <__retarget_lock_init_recursive>:
 80073ec:	4770      	bx	lr

080073ee <__retarget_lock_close_recursive>:
 80073ee:	4770      	bx	lr

080073f0 <__retarget_lock_acquire_recursive>:
 80073f0:	4770      	bx	lr

080073f2 <__retarget_lock_release_recursive>:
 80073f2:	4770      	bx	lr

080073f4 <__swhatbuf_r>:
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	000e      	movs	r6, r1
 80073f8:	001d      	movs	r5, r3
 80073fa:	230e      	movs	r3, #14
 80073fc:	5ec9      	ldrsh	r1, [r1, r3]
 80073fe:	b090      	sub	sp, #64	; 0x40
 8007400:	0014      	movs	r4, r2
 8007402:	2900      	cmp	r1, #0
 8007404:	da0a      	bge.n	800741c <__swhatbuf_r+0x28>
 8007406:	2300      	movs	r3, #0
 8007408:	2280      	movs	r2, #128	; 0x80
 800740a:	602b      	str	r3, [r5, #0]
 800740c:	89b0      	ldrh	r0, [r6, #12]
 800740e:	4010      	ands	r0, r2
 8007410:	4298      	cmp	r0, r3
 8007412:	d117      	bne.n	8007444 <__swhatbuf_r+0x50>
 8007414:	2380      	movs	r3, #128	; 0x80
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	e016      	b.n	800744a <__swhatbuf_r+0x56>
 800741c:	aa01      	add	r2, sp, #4
 800741e:	f7ff ff71 	bl	8007304 <_fstat_r>
 8007422:	2800      	cmp	r0, #0
 8007424:	dbef      	blt.n	8007406 <__swhatbuf_r+0x12>
 8007426:	22f0      	movs	r2, #240	; 0xf0
 8007428:	9b02      	ldr	r3, [sp, #8]
 800742a:	0212      	lsls	r2, r2, #8
 800742c:	4013      	ands	r3, r2
 800742e:	4a08      	ldr	r2, [pc, #32]	; (8007450 <__swhatbuf_r+0x5c>)
 8007430:	2080      	movs	r0, #128	; 0x80
 8007432:	189b      	adds	r3, r3, r2
 8007434:	425a      	negs	r2, r3
 8007436:	4153      	adcs	r3, r2
 8007438:	602b      	str	r3, [r5, #0]
 800743a:	2380      	movs	r3, #128	; 0x80
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	6023      	str	r3, [r4, #0]
 8007440:	0100      	lsls	r0, r0, #4
 8007442:	e002      	b.n	800744a <__swhatbuf_r+0x56>
 8007444:	2240      	movs	r2, #64	; 0x40
 8007446:	0018      	movs	r0, r3
 8007448:	6022      	str	r2, [r4, #0]
 800744a:	b010      	add	sp, #64	; 0x40
 800744c:	bd70      	pop	{r4, r5, r6, pc}
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	ffffe000 	.word	0xffffe000

08007454 <__smakebuf_r>:
 8007454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007456:	2602      	movs	r6, #2
 8007458:	898b      	ldrh	r3, [r1, #12]
 800745a:	0005      	movs	r5, r0
 800745c:	000c      	movs	r4, r1
 800745e:	4233      	tst	r3, r6
 8007460:	d006      	beq.n	8007470 <__smakebuf_r+0x1c>
 8007462:	0023      	movs	r3, r4
 8007464:	3347      	adds	r3, #71	; 0x47
 8007466:	6023      	str	r3, [r4, #0]
 8007468:	6123      	str	r3, [r4, #16]
 800746a:	2301      	movs	r3, #1
 800746c:	6163      	str	r3, [r4, #20]
 800746e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007470:	ab01      	add	r3, sp, #4
 8007472:	466a      	mov	r2, sp
 8007474:	f7ff ffbe 	bl	80073f4 <__swhatbuf_r>
 8007478:	9900      	ldr	r1, [sp, #0]
 800747a:	0007      	movs	r7, r0
 800747c:	0028      	movs	r0, r5
 800747e:	f000 f841 	bl	8007504 <_malloc_r>
 8007482:	2800      	cmp	r0, #0
 8007484:	d108      	bne.n	8007498 <__smakebuf_r+0x44>
 8007486:	220c      	movs	r2, #12
 8007488:	5ea3      	ldrsh	r3, [r4, r2]
 800748a:	059a      	lsls	r2, r3, #22
 800748c:	d4ef      	bmi.n	800746e <__smakebuf_r+0x1a>
 800748e:	2203      	movs	r2, #3
 8007490:	4393      	bics	r3, r2
 8007492:	431e      	orrs	r6, r3
 8007494:	81a6      	strh	r6, [r4, #12]
 8007496:	e7e4      	b.n	8007462 <__smakebuf_r+0xe>
 8007498:	4b0f      	ldr	r3, [pc, #60]	; (80074d8 <__smakebuf_r+0x84>)
 800749a:	62ab      	str	r3, [r5, #40]	; 0x28
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	89a2      	ldrh	r2, [r4, #12]
 80074a0:	6020      	str	r0, [r4, #0]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	81a3      	strh	r3, [r4, #12]
 80074a6:	9b00      	ldr	r3, [sp, #0]
 80074a8:	6120      	str	r0, [r4, #16]
 80074aa:	6163      	str	r3, [r4, #20]
 80074ac:	9b01      	ldr	r3, [sp, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00d      	beq.n	80074ce <__smakebuf_r+0x7a>
 80074b2:	230e      	movs	r3, #14
 80074b4:	5ee1      	ldrsh	r1, [r4, r3]
 80074b6:	0028      	movs	r0, r5
 80074b8:	f000 fe88 	bl	80081cc <_isatty_r>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d006      	beq.n	80074ce <__smakebuf_r+0x7a>
 80074c0:	2203      	movs	r2, #3
 80074c2:	89a3      	ldrh	r3, [r4, #12]
 80074c4:	4393      	bics	r3, r2
 80074c6:	001a      	movs	r2, r3
 80074c8:	2301      	movs	r3, #1
 80074ca:	4313      	orrs	r3, r2
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	89a0      	ldrh	r0, [r4, #12]
 80074d0:	4338      	orrs	r0, r7
 80074d2:	81a0      	strh	r0, [r4, #12]
 80074d4:	e7cb      	b.n	800746e <__smakebuf_r+0x1a>
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	08006ae9 	.word	0x08006ae9

080074dc <malloc>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	4b03      	ldr	r3, [pc, #12]	; (80074ec <malloc+0x10>)
 80074e0:	0001      	movs	r1, r0
 80074e2:	6818      	ldr	r0, [r3, #0]
 80074e4:	f000 f80e 	bl	8007504 <_malloc_r>
 80074e8:	bd10      	pop	{r4, pc}
 80074ea:	46c0      	nop			; (mov r8, r8)
 80074ec:	200001d4 	.word	0x200001d4

080074f0 <free>:
 80074f0:	b510      	push	{r4, lr}
 80074f2:	4b03      	ldr	r3, [pc, #12]	; (8007500 <free+0x10>)
 80074f4:	0001      	movs	r1, r0
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	f7ff fcce 	bl	8006e98 <_free_r>
 80074fc:	bd10      	pop	{r4, pc}
 80074fe:	46c0      	nop			; (mov r8, r8)
 8007500:	200001d4 	.word	0x200001d4

08007504 <_malloc_r>:
 8007504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007506:	000d      	movs	r5, r1
 8007508:	b085      	sub	sp, #20
 800750a:	350b      	adds	r5, #11
 800750c:	9001      	str	r0, [sp, #4]
 800750e:	2d16      	cmp	r5, #22
 8007510:	d908      	bls.n	8007524 <_malloc_r+0x20>
 8007512:	2307      	movs	r3, #7
 8007514:	439d      	bics	r5, r3
 8007516:	d506      	bpl.n	8007526 <_malloc_r+0x22>
 8007518:	230c      	movs	r3, #12
 800751a:	9a01      	ldr	r2, [sp, #4]
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	2000      	movs	r0, #0
 8007520:	b005      	add	sp, #20
 8007522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007524:	2510      	movs	r5, #16
 8007526:	428d      	cmp	r5, r1
 8007528:	d3f6      	bcc.n	8007518 <_malloc_r+0x14>
 800752a:	9801      	ldr	r0, [sp, #4]
 800752c:	f7fc fdae 	bl	800408c <__malloc_lock>
 8007530:	23f8      	movs	r3, #248	; 0xf8
 8007532:	33ff      	adds	r3, #255	; 0xff
 8007534:	48ba      	ldr	r0, [pc, #744]	; (8007820 <_malloc_r+0x31c>)
 8007536:	429d      	cmp	r5, r3
 8007538:	d81f      	bhi.n	800757a <_malloc_r+0x76>
 800753a:	002a      	movs	r2, r5
 800753c:	3208      	adds	r2, #8
 800753e:	1882      	adds	r2, r0, r2
 8007540:	0011      	movs	r1, r2
 8007542:	6854      	ldr	r4, [r2, #4]
 8007544:	3908      	subs	r1, #8
 8007546:	08eb      	lsrs	r3, r5, #3
 8007548:	428c      	cmp	r4, r1
 800754a:	d103      	bne.n	8007554 <_malloc_r+0x50>
 800754c:	68d4      	ldr	r4, [r2, #12]
 800754e:	3302      	adds	r3, #2
 8007550:	42a2      	cmp	r2, r4
 8007552:	d029      	beq.n	80075a8 <_malloc_r+0xa4>
 8007554:	2303      	movs	r3, #3
 8007556:	6862      	ldr	r2, [r4, #4]
 8007558:	68a1      	ldr	r1, [r4, #8]
 800755a:	439a      	bics	r2, r3
 800755c:	0013      	movs	r3, r2
 800755e:	68e2      	ldr	r2, [r4, #12]
 8007560:	18e3      	adds	r3, r4, r3
 8007562:	60ca      	str	r2, [r1, #12]
 8007564:	6091      	str	r1, [r2, #8]
 8007566:	2201      	movs	r2, #1
 8007568:	6859      	ldr	r1, [r3, #4]
 800756a:	430a      	orrs	r2, r1
 800756c:	605a      	str	r2, [r3, #4]
 800756e:	9801      	ldr	r0, [sp, #4]
 8007570:	f7fc fd90 	bl	8004094 <__malloc_unlock>
 8007574:	0020      	movs	r0, r4
 8007576:	3008      	adds	r0, #8
 8007578:	e7d2      	b.n	8007520 <_malloc_r+0x1c>
 800757a:	0a6a      	lsrs	r2, r5, #9
 800757c:	233f      	movs	r3, #63	; 0x3f
 800757e:	2a00      	cmp	r2, #0
 8007580:	d003      	beq.n	800758a <_malloc_r+0x86>
 8007582:	2a04      	cmp	r2, #4
 8007584:	d828      	bhi.n	80075d8 <_malloc_r+0xd4>
 8007586:	09ab      	lsrs	r3, r5, #6
 8007588:	3338      	adds	r3, #56	; 0x38
 800758a:	2203      	movs	r2, #3
 800758c:	4694      	mov	ip, r2
 800758e:	00d9      	lsls	r1, r3, #3
 8007590:	1809      	adds	r1, r1, r0
 8007592:	68cc      	ldr	r4, [r1, #12]
 8007594:	428c      	cmp	r4, r1
 8007596:	d006      	beq.n	80075a6 <_malloc_r+0xa2>
 8007598:	4666      	mov	r6, ip
 800759a:	6862      	ldr	r2, [r4, #4]
 800759c:	43b2      	bics	r2, r6
 800759e:	1b57      	subs	r7, r2, r5
 80075a0:	2f0f      	cmp	r7, #15
 80075a2:	dd31      	ble.n	8007608 <_malloc_r+0x104>
 80075a4:	3b01      	subs	r3, #1
 80075a6:	3301      	adds	r3, #1
 80075a8:	0001      	movs	r1, r0
 80075aa:	6904      	ldr	r4, [r0, #16]
 80075ac:	3108      	adds	r1, #8
 80075ae:	428c      	cmp	r4, r1
 80075b0:	d04e      	beq.n	8007650 <_malloc_r+0x14c>
 80075b2:	2203      	movs	r2, #3
 80075b4:	6866      	ldr	r6, [r4, #4]
 80075b6:	4396      	bics	r6, r2
 80075b8:	0032      	movs	r2, r6
 80075ba:	1b76      	subs	r6, r6, r5
 80075bc:	2e0f      	cmp	r6, #15
 80075be:	dd31      	ble.n	8007624 <_malloc_r+0x120>
 80075c0:	2701      	movs	r7, #1
 80075c2:	1963      	adds	r3, r4, r5
 80075c4:	433d      	orrs	r5, r7
 80075c6:	4337      	orrs	r7, r6
 80075c8:	6065      	str	r5, [r4, #4]
 80075ca:	6143      	str	r3, [r0, #20]
 80075cc:	6103      	str	r3, [r0, #16]
 80075ce:	60d9      	str	r1, [r3, #12]
 80075d0:	6099      	str	r1, [r3, #8]
 80075d2:	605f      	str	r7, [r3, #4]
 80075d4:	50a6      	str	r6, [r4, r2]
 80075d6:	e7ca      	b.n	800756e <_malloc_r+0x6a>
 80075d8:	2a14      	cmp	r2, #20
 80075da:	d802      	bhi.n	80075e2 <_malloc_r+0xde>
 80075dc:	0013      	movs	r3, r2
 80075de:	335b      	adds	r3, #91	; 0x5b
 80075e0:	e7d3      	b.n	800758a <_malloc_r+0x86>
 80075e2:	2a54      	cmp	r2, #84	; 0x54
 80075e4:	d802      	bhi.n	80075ec <_malloc_r+0xe8>
 80075e6:	0b2b      	lsrs	r3, r5, #12
 80075e8:	336e      	adds	r3, #110	; 0x6e
 80075ea:	e7ce      	b.n	800758a <_malloc_r+0x86>
 80075ec:	23aa      	movs	r3, #170	; 0xaa
 80075ee:	005b      	lsls	r3, r3, #1
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d802      	bhi.n	80075fa <_malloc_r+0xf6>
 80075f4:	0beb      	lsrs	r3, r5, #15
 80075f6:	3377      	adds	r3, #119	; 0x77
 80075f8:	e7c7      	b.n	800758a <_malloc_r+0x86>
 80075fa:	498a      	ldr	r1, [pc, #552]	; (8007824 <_malloc_r+0x320>)
 80075fc:	237e      	movs	r3, #126	; 0x7e
 80075fe:	428a      	cmp	r2, r1
 8007600:	d8c3      	bhi.n	800758a <_malloc_r+0x86>
 8007602:	0cab      	lsrs	r3, r5, #18
 8007604:	337c      	adds	r3, #124	; 0x7c
 8007606:	e7c0      	b.n	800758a <_malloc_r+0x86>
 8007608:	68e6      	ldr	r6, [r4, #12]
 800760a:	2f00      	cmp	r7, #0
 800760c:	db08      	blt.n	8007620 <_malloc_r+0x11c>
 800760e:	68a3      	ldr	r3, [r4, #8]
 8007610:	60de      	str	r6, [r3, #12]
 8007612:	60b3      	str	r3, [r6, #8]
 8007614:	2301      	movs	r3, #1
 8007616:	18a2      	adds	r2, r4, r2
 8007618:	6851      	ldr	r1, [r2, #4]
 800761a:	430b      	orrs	r3, r1
 800761c:	6053      	str	r3, [r2, #4]
 800761e:	e7a6      	b.n	800756e <_malloc_r+0x6a>
 8007620:	0034      	movs	r4, r6
 8007622:	e7b7      	b.n	8007594 <_malloc_r+0x90>
 8007624:	6141      	str	r1, [r0, #20]
 8007626:	6101      	str	r1, [r0, #16]
 8007628:	2e00      	cmp	r6, #0
 800762a:	daf3      	bge.n	8007614 <_malloc_r+0x110>
 800762c:	497e      	ldr	r1, [pc, #504]	; (8007828 <_malloc_r+0x324>)
 800762e:	428a      	cmp	r2, r1
 8007630:	d842      	bhi.n	80076b8 <_malloc_r+0x1b4>
 8007632:	08d2      	lsrs	r2, r2, #3
 8007634:	39ff      	subs	r1, #255	; 0xff
 8007636:	1096      	asrs	r6, r2, #2
 8007638:	39ff      	subs	r1, #255	; 0xff
 800763a:	40b1      	lsls	r1, r6
 800763c:	6846      	ldr	r6, [r0, #4]
 800763e:	00d2      	lsls	r2, r2, #3
 8007640:	4331      	orrs	r1, r6
 8007642:	6041      	str	r1, [r0, #4]
 8007644:	1810      	adds	r0, r2, r0
 8007646:	6882      	ldr	r2, [r0, #8]
 8007648:	60e0      	str	r0, [r4, #12]
 800764a:	60a2      	str	r2, [r4, #8]
 800764c:	6084      	str	r4, [r0, #8]
 800764e:	60d4      	str	r4, [r2, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	1099      	asrs	r1, r3, #2
 8007654:	408a      	lsls	r2, r1
 8007656:	4972      	ldr	r1, [pc, #456]	; (8007820 <_malloc_r+0x31c>)
 8007658:	6848      	ldr	r0, [r1, #4]
 800765a:	4282      	cmp	r2, r0
 800765c:	d900      	bls.n	8007660 <_malloc_r+0x15c>
 800765e:	e097      	b.n	8007790 <_malloc_r+0x28c>
 8007660:	4210      	tst	r0, r2
 8007662:	d105      	bne.n	8007670 <_malloc_r+0x16c>
 8007664:	2403      	movs	r4, #3
 8007666:	43a3      	bics	r3, r4
 8007668:	0052      	lsls	r2, r2, #1
 800766a:	3304      	adds	r3, #4
 800766c:	4210      	tst	r0, r2
 800766e:	d0fb      	beq.n	8007668 <_malloc_r+0x164>
 8007670:	469c      	mov	ip, r3
 8007672:	00d8      	lsls	r0, r3, #3
 8007674:	1808      	adds	r0, r1, r0
 8007676:	9002      	str	r0, [sp, #8]
 8007678:	9c02      	ldr	r4, [sp, #8]
 800767a:	68e4      	ldr	r4, [r4, #12]
 800767c:	9e02      	ldr	r6, [sp, #8]
 800767e:	42b4      	cmp	r4, r6
 8007680:	d158      	bne.n	8007734 <_malloc_r+0x230>
 8007682:	0034      	movs	r4, r6
 8007684:	3408      	adds	r4, #8
 8007686:	9402      	str	r4, [sp, #8]
 8007688:	2401      	movs	r4, #1
 800768a:	44a4      	add	ip, r4
 800768c:	4664      	mov	r4, ip
 800768e:	2603      	movs	r6, #3
 8007690:	4234      	tst	r4, r6
 8007692:	d1f1      	bne.n	8007678 <_malloc_r+0x174>
 8007694:	2403      	movs	r4, #3
 8007696:	4223      	tst	r3, r4
 8007698:	d174      	bne.n	8007784 <_malloc_r+0x280>
 800769a:	684b      	ldr	r3, [r1, #4]
 800769c:	4393      	bics	r3, r2
 800769e:	604b      	str	r3, [r1, #4]
 80076a0:	6848      	ldr	r0, [r1, #4]
 80076a2:	0052      	lsls	r2, r2, #1
 80076a4:	4282      	cmp	r2, r0
 80076a6:	d873      	bhi.n	8007790 <_malloc_r+0x28c>
 80076a8:	2a00      	cmp	r2, #0
 80076aa:	d071      	beq.n	8007790 <_malloc_r+0x28c>
 80076ac:	4663      	mov	r3, ip
 80076ae:	4210      	tst	r0, r2
 80076b0:	d1de      	bne.n	8007670 <_malloc_r+0x16c>
 80076b2:	3304      	adds	r3, #4
 80076b4:	0052      	lsls	r2, r2, #1
 80076b6:	e7fa      	b.n	80076ae <_malloc_r+0x1aa>
 80076b8:	0a56      	lsrs	r6, r2, #9
 80076ba:	2e04      	cmp	r6, #4
 80076bc:	d816      	bhi.n	80076ec <_malloc_r+0x1e8>
 80076be:	0991      	lsrs	r1, r2, #6
 80076c0:	3138      	adds	r1, #56	; 0x38
 80076c2:	00cf      	lsls	r7, r1, #3
 80076c4:	183e      	adds	r6, r7, r0
 80076c6:	2703      	movs	r7, #3
 80076c8:	9602      	str	r6, [sp, #8]
 80076ca:	46bc      	mov	ip, r7
 80076cc:	68b6      	ldr	r6, [r6, #8]
 80076ce:	9f02      	ldr	r7, [sp, #8]
 80076d0:	42b7      	cmp	r7, r6
 80076d2:	d127      	bne.n	8007724 <_malloc_r+0x220>
 80076d4:	2201      	movs	r2, #1
 80076d6:	1089      	asrs	r1, r1, #2
 80076d8:	408a      	lsls	r2, r1
 80076da:	6841      	ldr	r1, [r0, #4]
 80076dc:	430a      	orrs	r2, r1
 80076de:	6042      	str	r2, [r0, #4]
 80076e0:	9a02      	ldr	r2, [sp, #8]
 80076e2:	60a6      	str	r6, [r4, #8]
 80076e4:	60e2      	str	r2, [r4, #12]
 80076e6:	6094      	str	r4, [r2, #8]
 80076e8:	60f4      	str	r4, [r6, #12]
 80076ea:	e7b1      	b.n	8007650 <_malloc_r+0x14c>
 80076ec:	2e14      	cmp	r6, #20
 80076ee:	d802      	bhi.n	80076f6 <_malloc_r+0x1f2>
 80076f0:	0031      	movs	r1, r6
 80076f2:	315b      	adds	r1, #91	; 0x5b
 80076f4:	e7e5      	b.n	80076c2 <_malloc_r+0x1be>
 80076f6:	2e54      	cmp	r6, #84	; 0x54
 80076f8:	d802      	bhi.n	8007700 <_malloc_r+0x1fc>
 80076fa:	0b11      	lsrs	r1, r2, #12
 80076fc:	316e      	adds	r1, #110	; 0x6e
 80076fe:	e7e0      	b.n	80076c2 <_malloc_r+0x1be>
 8007700:	21aa      	movs	r1, #170	; 0xaa
 8007702:	0049      	lsls	r1, r1, #1
 8007704:	428e      	cmp	r6, r1
 8007706:	d802      	bhi.n	800770e <_malloc_r+0x20a>
 8007708:	0bd1      	lsrs	r1, r2, #15
 800770a:	3177      	adds	r1, #119	; 0x77
 800770c:	e7d9      	b.n	80076c2 <_malloc_r+0x1be>
 800770e:	4f45      	ldr	r7, [pc, #276]	; (8007824 <_malloc_r+0x320>)
 8007710:	217e      	movs	r1, #126	; 0x7e
 8007712:	42be      	cmp	r6, r7
 8007714:	d8d5      	bhi.n	80076c2 <_malloc_r+0x1be>
 8007716:	0c91      	lsrs	r1, r2, #18
 8007718:	317c      	adds	r1, #124	; 0x7c
 800771a:	e7d2      	b.n	80076c2 <_malloc_r+0x1be>
 800771c:	68b6      	ldr	r6, [r6, #8]
 800771e:	9902      	ldr	r1, [sp, #8]
 8007720:	42b1      	cmp	r1, r6
 8007722:	d004      	beq.n	800772e <_malloc_r+0x22a>
 8007724:	4660      	mov	r0, ip
 8007726:	6871      	ldr	r1, [r6, #4]
 8007728:	4381      	bics	r1, r0
 800772a:	428a      	cmp	r2, r1
 800772c:	d3f6      	bcc.n	800771c <_malloc_r+0x218>
 800772e:	68f2      	ldr	r2, [r6, #12]
 8007730:	9202      	str	r2, [sp, #8]
 8007732:	e7d5      	b.n	80076e0 <_malloc_r+0x1dc>
 8007734:	2603      	movs	r6, #3
 8007736:	6867      	ldr	r7, [r4, #4]
 8007738:	43b7      	bics	r7, r6
 800773a:	9703      	str	r7, [sp, #12]
 800773c:	1b7e      	subs	r6, r7, r5
 800773e:	2e0f      	cmp	r6, #15
 8007740:	dd11      	ble.n	8007766 <_malloc_r+0x262>
 8007742:	2201      	movs	r2, #1
 8007744:	1963      	adds	r3, r4, r5
 8007746:	4315      	orrs	r5, r2
 8007748:	6065      	str	r5, [r4, #4]
 800774a:	68e0      	ldr	r0, [r4, #12]
 800774c:	68a5      	ldr	r5, [r4, #8]
 800774e:	3108      	adds	r1, #8
 8007750:	60e8      	str	r0, [r5, #12]
 8007752:	4332      	orrs	r2, r6
 8007754:	6085      	str	r5, [r0, #8]
 8007756:	60cb      	str	r3, [r1, #12]
 8007758:	608b      	str	r3, [r1, #8]
 800775a:	60d9      	str	r1, [r3, #12]
 800775c:	6099      	str	r1, [r3, #8]
 800775e:	605a      	str	r2, [r3, #4]
 8007760:	003b      	movs	r3, r7
 8007762:	50e6      	str	r6, [r4, r3]
 8007764:	e703      	b.n	800756e <_malloc_r+0x6a>
 8007766:	68e7      	ldr	r7, [r4, #12]
 8007768:	2e00      	cmp	r6, #0
 800776a:	db09      	blt.n	8007780 <_malloc_r+0x27c>
 800776c:	2201      	movs	r2, #1
 800776e:	9b03      	ldr	r3, [sp, #12]
 8007770:	18e3      	adds	r3, r4, r3
 8007772:	6859      	ldr	r1, [r3, #4]
 8007774:	430a      	orrs	r2, r1
 8007776:	605a      	str	r2, [r3, #4]
 8007778:	68a3      	ldr	r3, [r4, #8]
 800777a:	60df      	str	r7, [r3, #12]
 800777c:	60bb      	str	r3, [r7, #8]
 800777e:	e6f6      	b.n	800756e <_malloc_r+0x6a>
 8007780:	003c      	movs	r4, r7
 8007782:	e77b      	b.n	800767c <_malloc_r+0x178>
 8007784:	3808      	subs	r0, #8
 8007786:	6884      	ldr	r4, [r0, #8]
 8007788:	3b01      	subs	r3, #1
 800778a:	42a0      	cmp	r0, r4
 800778c:	d082      	beq.n	8007694 <_malloc_r+0x190>
 800778e:	e787      	b.n	80076a0 <_malloc_r+0x19c>
 8007790:	2303      	movs	r3, #3
 8007792:	688f      	ldr	r7, [r1, #8]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	439a      	bics	r2, r3
 8007798:	9202      	str	r2, [sp, #8]
 800779a:	4295      	cmp	r5, r2
 800779c:	d803      	bhi.n	80077a6 <_malloc_r+0x2a2>
 800779e:	1b52      	subs	r2, r2, r5
 80077a0:	2a0f      	cmp	r2, #15
 80077a2:	dd00      	ble.n	80077a6 <_malloc_r+0x2a2>
 80077a4:	e09f      	b.n	80078e6 <_malloc_r+0x3e2>
 80077a6:	9b02      	ldr	r3, [sp, #8]
 80077a8:	18fb      	adds	r3, r7, r3
 80077aa:	9303      	str	r3, [sp, #12]
 80077ac:	4b1f      	ldr	r3, [pc, #124]	; (800782c <_malloc_r+0x328>)
 80077ae:	681e      	ldr	r6, [r3, #0]
 80077b0:	4b1f      	ldr	r3, [pc, #124]	; (8007830 <_malloc_r+0x32c>)
 80077b2:	3610      	adds	r6, #16
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	1976      	adds	r6, r6, r5
 80077b8:	3301      	adds	r3, #1
 80077ba:	d005      	beq.n	80077c8 <_malloc_r+0x2c4>
 80077bc:	4b1d      	ldr	r3, [pc, #116]	; (8007834 <_malloc_r+0x330>)
 80077be:	3b01      	subs	r3, #1
 80077c0:	199e      	adds	r6, r3, r6
 80077c2:	4b1c      	ldr	r3, [pc, #112]	; (8007834 <_malloc_r+0x330>)
 80077c4:	425b      	negs	r3, r3
 80077c6:	401e      	ands	r6, r3
 80077c8:	0031      	movs	r1, r6
 80077ca:	9801      	ldr	r0, [sp, #4]
 80077cc:	f000 f9e8 	bl	8007ba0 <_sbrk_r>
 80077d0:	0004      	movs	r4, r0
 80077d2:	1c43      	adds	r3, r0, #1
 80077d4:	d05f      	beq.n	8007896 <_malloc_r+0x392>
 80077d6:	9b03      	ldr	r3, [sp, #12]
 80077d8:	4283      	cmp	r3, r0
 80077da:	d902      	bls.n	80077e2 <_malloc_r+0x2de>
 80077dc:	4b10      	ldr	r3, [pc, #64]	; (8007820 <_malloc_r+0x31c>)
 80077de:	429f      	cmp	r7, r3
 80077e0:	d159      	bne.n	8007896 <_malloc_r+0x392>
 80077e2:	4b15      	ldr	r3, [pc, #84]	; (8007838 <_malloc_r+0x334>)
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	18b1      	adds	r1, r6, r2
 80077e8:	6019      	str	r1, [r3, #0]
 80077ea:	4b12      	ldr	r3, [pc, #72]	; (8007834 <_malloc_r+0x330>)
 80077ec:	1e5a      	subs	r2, r3, #1
 80077ee:	9b03      	ldr	r3, [sp, #12]
 80077f0:	42a3      	cmp	r3, r4
 80077f2:	d127      	bne.n	8007844 <_malloc_r+0x340>
 80077f4:	4213      	tst	r3, r2
 80077f6:	d125      	bne.n	8007844 <_malloc_r+0x340>
 80077f8:	9a02      	ldr	r2, [sp, #8]
 80077fa:	4b09      	ldr	r3, [pc, #36]	; (8007820 <_malloc_r+0x31c>)
 80077fc:	1992      	adds	r2, r2, r6
 80077fe:	2601      	movs	r6, #1
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	4316      	orrs	r6, r2
 8007804:	605e      	str	r6, [r3, #4]
 8007806:	4b0c      	ldr	r3, [pc, #48]	; (8007838 <_malloc_r+0x334>)
 8007808:	4a0c      	ldr	r2, [pc, #48]	; (800783c <_malloc_r+0x338>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6811      	ldr	r1, [r2, #0]
 800780e:	428b      	cmp	r3, r1
 8007810:	d900      	bls.n	8007814 <_malloc_r+0x310>
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	4a0a      	ldr	r2, [pc, #40]	; (8007840 <_malloc_r+0x33c>)
 8007816:	6811      	ldr	r1, [r2, #0]
 8007818:	428b      	cmp	r3, r1
 800781a:	d93c      	bls.n	8007896 <_malloc_r+0x392>
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	e03a      	b.n	8007896 <_malloc_r+0x392>
 8007820:	200002c8 	.word	0x200002c8
 8007824:	00000554 	.word	0x00000554
 8007828:	000001ff 	.word	0x000001ff
 800782c:	20000b40 	.word	0x20000b40
 8007830:	200006d0 	.word	0x200006d0
 8007834:	00001000 	.word	0x00001000
 8007838:	20000b10 	.word	0x20000b10
 800783c:	20000b38 	.word	0x20000b38
 8007840:	20000b3c 	.word	0x20000b3c
 8007844:	4b2d      	ldr	r3, [pc, #180]	; (80078fc <_malloc_r+0x3f8>)
 8007846:	6818      	ldr	r0, [r3, #0]
 8007848:	3001      	adds	r0, #1
 800784a:	d132      	bne.n	80078b2 <_malloc_r+0x3ae>
 800784c:	601c      	str	r4, [r3, #0]
 800784e:	2007      	movs	r0, #7
 8007850:	4020      	ands	r0, r4
 8007852:	d002      	beq.n	800785a <_malloc_r+0x356>
 8007854:	2308      	movs	r3, #8
 8007856:	1a18      	subs	r0, r3, r0
 8007858:	1824      	adds	r4, r4, r0
 800785a:	4b29      	ldr	r3, [pc, #164]	; (8007900 <_malloc_r+0x3fc>)
 800785c:	19a6      	adds	r6, r4, r6
 800785e:	1818      	adds	r0, r3, r0
 8007860:	4016      	ands	r6, r2
 8007862:	1b86      	subs	r6, r0, r6
 8007864:	0031      	movs	r1, r6
 8007866:	9801      	ldr	r0, [sp, #4]
 8007868:	f000 f99a 	bl	8007ba0 <_sbrk_r>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d101      	bne.n	8007874 <_malloc_r+0x370>
 8007870:	0020      	movs	r0, r4
 8007872:	2600      	movs	r6, #0
 8007874:	4a23      	ldr	r2, [pc, #140]	; (8007904 <_malloc_r+0x400>)
 8007876:	1b00      	subs	r0, r0, r4
 8007878:	6813      	ldr	r3, [r2, #0]
 800787a:	199b      	adds	r3, r3, r6
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	2301      	movs	r3, #1
 8007880:	4a21      	ldr	r2, [pc, #132]	; (8007908 <_malloc_r+0x404>)
 8007882:	1986      	adds	r6, r0, r6
 8007884:	431e      	orrs	r6, r3
 8007886:	6094      	str	r4, [r2, #8]
 8007888:	6066      	str	r6, [r4, #4]
 800788a:	4297      	cmp	r7, r2
 800788c:	d0bb      	beq.n	8007806 <_malloc_r+0x302>
 800788e:	9a02      	ldr	r2, [sp, #8]
 8007890:	2a0f      	cmp	r2, #15
 8007892:	d814      	bhi.n	80078be <_malloc_r+0x3ba>
 8007894:	6063      	str	r3, [r4, #4]
 8007896:	2203      	movs	r2, #3
 8007898:	4b1b      	ldr	r3, [pc, #108]	; (8007908 <_malloc_r+0x404>)
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	4393      	bics	r3, r2
 80078a0:	1b5a      	subs	r2, r3, r5
 80078a2:	429d      	cmp	r5, r3
 80078a4:	d801      	bhi.n	80078aa <_malloc_r+0x3a6>
 80078a6:	2a0f      	cmp	r2, #15
 80078a8:	dc1d      	bgt.n	80078e6 <_malloc_r+0x3e2>
 80078aa:	9801      	ldr	r0, [sp, #4]
 80078ac:	f7fc fbf2 	bl	8004094 <__malloc_unlock>
 80078b0:	e635      	b.n	800751e <_malloc_r+0x1a>
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	1ae3      	subs	r3, r4, r3
 80078b6:	185b      	adds	r3, r3, r1
 80078b8:	4912      	ldr	r1, [pc, #72]	; (8007904 <_malloc_r+0x400>)
 80078ba:	600b      	str	r3, [r1, #0]
 80078bc:	e7c7      	b.n	800784e <_malloc_r+0x34a>
 80078be:	2207      	movs	r2, #7
 80078c0:	9e02      	ldr	r6, [sp, #8]
 80078c2:	3e0c      	subs	r6, #12
 80078c4:	4396      	bics	r6, r2
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	4013      	ands	r3, r2
 80078ca:	2205      	movs	r2, #5
 80078cc:	4333      	orrs	r3, r6
 80078ce:	607b      	str	r3, [r7, #4]
 80078d0:	19bb      	adds	r3, r7, r6
 80078d2:	605a      	str	r2, [r3, #4]
 80078d4:	609a      	str	r2, [r3, #8]
 80078d6:	2e0f      	cmp	r6, #15
 80078d8:	d995      	bls.n	8007806 <_malloc_r+0x302>
 80078da:	0039      	movs	r1, r7
 80078dc:	9801      	ldr	r0, [sp, #4]
 80078de:	3108      	adds	r1, #8
 80078e0:	f7ff fada 	bl	8006e98 <_free_r>
 80078e4:	e78f      	b.n	8007806 <_malloc_r+0x302>
 80078e6:	2301      	movs	r3, #1
 80078e8:	0018      	movs	r0, r3
 80078ea:	4907      	ldr	r1, [pc, #28]	; (8007908 <_malloc_r+0x404>)
 80078ec:	4328      	orrs	r0, r5
 80078ee:	688c      	ldr	r4, [r1, #8]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	1965      	adds	r5, r4, r5
 80078f4:	6060      	str	r0, [r4, #4]
 80078f6:	608d      	str	r5, [r1, #8]
 80078f8:	606b      	str	r3, [r5, #4]
 80078fa:	e638      	b.n	800756e <_malloc_r+0x6a>
 80078fc:	200006d0 	.word	0x200006d0
 8007900:	00001000 	.word	0x00001000
 8007904:	20000b10 	.word	0x20000b10
 8007908:	200002c8 	.word	0x200002c8

0800790c <memcpy>:
 800790c:	2300      	movs	r3, #0
 800790e:	b510      	push	{r4, lr}
 8007910:	429a      	cmp	r2, r3
 8007912:	d100      	bne.n	8007916 <memcpy+0xa>
 8007914:	bd10      	pop	{r4, pc}
 8007916:	5ccc      	ldrb	r4, [r1, r3]
 8007918:	54c4      	strb	r4, [r0, r3]
 800791a:	3301      	adds	r3, #1
 800791c:	e7f8      	b.n	8007910 <memcpy+0x4>

0800791e <memset>:
 800791e:	0003      	movs	r3, r0
 8007920:	1882      	adds	r2, r0, r2
 8007922:	4293      	cmp	r3, r2
 8007924:	d100      	bne.n	8007928 <memset+0xa>
 8007926:	4770      	bx	lr
 8007928:	7019      	strb	r1, [r3, #0]
 800792a:	3301      	adds	r3, #1
 800792c:	e7f9      	b.n	8007922 <memset+0x4>
	...

08007930 <_open_r>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	0005      	movs	r5, r0
 8007934:	0008      	movs	r0, r1
 8007936:	0011      	movs	r1, r2
 8007938:	2200      	movs	r2, #0
 800793a:	4c06      	ldr	r4, [pc, #24]	; (8007954 <_open_r+0x24>)
 800793c:	6022      	str	r2, [r4, #0]
 800793e:	001a      	movs	r2, r3
 8007940:	f7fc f95c 	bl	8003bfc <_open>
 8007944:	1c43      	adds	r3, r0, #1
 8007946:	d103      	bne.n	8007950 <_open_r+0x20>
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d000      	beq.n	8007950 <_open_r+0x20>
 800794e:	602b      	str	r3, [r5, #0]
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	46c0      	nop			; (mov r8, r8)
 8007954:	20000da8 	.word	0x20000da8

08007958 <_putc_r>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	0006      	movs	r6, r0
 800795c:	000d      	movs	r5, r1
 800795e:	0014      	movs	r4, r2
 8007960:	2800      	cmp	r0, #0
 8007962:	d004      	beq.n	800796e <_putc_r+0x16>
 8007964:	6983      	ldr	r3, [r0, #24]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <_putc_r+0x16>
 800796a:	f7ff f91f 	bl	8006bac <__sinit>
 800796e:	4b1c      	ldr	r3, [pc, #112]	; (80079e0 <_putc_r+0x88>)
 8007970:	429c      	cmp	r4, r3
 8007972:	d124      	bne.n	80079be <_putc_r+0x66>
 8007974:	6874      	ldr	r4, [r6, #4]
 8007976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007978:	07db      	lsls	r3, r3, #31
 800797a:	d405      	bmi.n	8007988 <_putc_r+0x30>
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	059b      	lsls	r3, r3, #22
 8007980:	d402      	bmi.n	8007988 <_putc_r+0x30>
 8007982:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007984:	f7ff fd34 	bl	80073f0 <__retarget_lock_acquire_recursive>
 8007988:	68a3      	ldr	r3, [r4, #8]
 800798a:	3b01      	subs	r3, #1
 800798c:	60a3      	str	r3, [r4, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	da05      	bge.n	800799e <_putc_r+0x46>
 8007992:	69a2      	ldr	r2, [r4, #24]
 8007994:	4293      	cmp	r3, r2
 8007996:	db1c      	blt.n	80079d2 <_putc_r+0x7a>
 8007998:	b2eb      	uxtb	r3, r5
 800799a:	2b0a      	cmp	r3, #10
 800799c:	d019      	beq.n	80079d2 <_putc_r+0x7a>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	6022      	str	r2, [r4, #0]
 80079a4:	701d      	strb	r5, [r3, #0]
 80079a6:	b2ed      	uxtb	r5, r5
 80079a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079aa:	07db      	lsls	r3, r3, #31
 80079ac:	d405      	bmi.n	80079ba <_putc_r+0x62>
 80079ae:	89a3      	ldrh	r3, [r4, #12]
 80079b0:	059b      	lsls	r3, r3, #22
 80079b2:	d402      	bmi.n	80079ba <_putc_r+0x62>
 80079b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079b6:	f7ff fd1c 	bl	80073f2 <__retarget_lock_release_recursive>
 80079ba:	0028      	movs	r0, r5
 80079bc:	bd70      	pop	{r4, r5, r6, pc}
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <_putc_r+0x8c>)
 80079c0:	429c      	cmp	r4, r3
 80079c2:	d101      	bne.n	80079c8 <_putc_r+0x70>
 80079c4:	68b4      	ldr	r4, [r6, #8]
 80079c6:	e7d6      	b.n	8007976 <_putc_r+0x1e>
 80079c8:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <_putc_r+0x90>)
 80079ca:	429c      	cmp	r4, r3
 80079cc:	d1d3      	bne.n	8007976 <_putc_r+0x1e>
 80079ce:	68f4      	ldr	r4, [r6, #12]
 80079d0:	e7d1      	b.n	8007976 <_putc_r+0x1e>
 80079d2:	0029      	movs	r1, r5
 80079d4:	0022      	movs	r2, r4
 80079d6:	0030      	movs	r0, r6
 80079d8:	f000 fa3a 	bl	8007e50 <__swbuf_r>
 80079dc:	0005      	movs	r5, r0
 80079de:	e7e3      	b.n	80079a8 <_putc_r+0x50>
 80079e0:	080089f0 	.word	0x080089f0
 80079e4:	08008a10 	.word	0x08008a10
 80079e8:	080089d0 	.word	0x080089d0

080079ec <lflush>:
 80079ec:	2209      	movs	r2, #9
 80079ee:	b510      	push	{r4, lr}
 80079f0:	8983      	ldrh	r3, [r0, #12]
 80079f2:	4013      	ands	r3, r2
 80079f4:	2200      	movs	r2, #0
 80079f6:	2b09      	cmp	r3, #9
 80079f8:	d102      	bne.n	8007a00 <lflush+0x14>
 80079fa:	f7ff f815 	bl	8006a28 <fflush>
 80079fe:	0002      	movs	r2, r0
 8007a00:	0010      	movs	r0, r2
 8007a02:	bd10      	pop	{r4, pc}

08007a04 <__srefill_r>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	0005      	movs	r5, r0
 8007a08:	000c      	movs	r4, r1
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d004      	beq.n	8007a18 <__srefill_r+0x14>
 8007a0e:	6983      	ldr	r3, [r0, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <__srefill_r+0x14>
 8007a14:	f7ff f8ca 	bl	8006bac <__sinit>
 8007a18:	4b43      	ldr	r3, [pc, #268]	; (8007b28 <__srefill_r+0x124>)
 8007a1a:	429c      	cmp	r4, r3
 8007a1c:	d116      	bne.n	8007a4c <__srefill_r+0x48>
 8007a1e:	686c      	ldr	r4, [r5, #4]
 8007a20:	230c      	movs	r3, #12
 8007a22:	5ee2      	ldrsh	r2, [r4, r3]
 8007a24:	2380      	movs	r3, #128	; 0x80
 8007a26:	019b      	lsls	r3, r3, #6
 8007a28:	421a      	tst	r2, r3
 8007a2a:	d105      	bne.n	8007a38 <__srefill_r+0x34>
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	81a3      	strh	r3, [r4, #12]
 8007a30:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a32:	4b3e      	ldr	r3, [pc, #248]	; (8007b2c <__srefill_r+0x128>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	6663      	str	r3, [r4, #100]	; 0x64
 8007a38:	2300      	movs	r3, #0
 8007a3a:	6063      	str	r3, [r4, #4]
 8007a3c:	230c      	movs	r3, #12
 8007a3e:	5ee2      	ldrsh	r2, [r4, r3]
 8007a40:	b293      	uxth	r3, r2
 8007a42:	0699      	lsls	r1, r3, #26
 8007a44:	d50c      	bpl.n	8007a60 <__srefill_r+0x5c>
 8007a46:	2001      	movs	r0, #1
 8007a48:	4240      	negs	r0, r0
 8007a4a:	e068      	b.n	8007b1e <__srefill_r+0x11a>
 8007a4c:	4b38      	ldr	r3, [pc, #224]	; (8007b30 <__srefill_r+0x12c>)
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	d101      	bne.n	8007a56 <__srefill_r+0x52>
 8007a52:	68ac      	ldr	r4, [r5, #8]
 8007a54:	e7e4      	b.n	8007a20 <__srefill_r+0x1c>
 8007a56:	4b37      	ldr	r3, [pc, #220]	; (8007b34 <__srefill_r+0x130>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	d1e1      	bne.n	8007a20 <__srefill_r+0x1c>
 8007a5c:	68ec      	ldr	r4, [r5, #12]
 8007a5e:	e7df      	b.n	8007a20 <__srefill_r+0x1c>
 8007a60:	0759      	lsls	r1, r3, #29
 8007a62:	d44a      	bmi.n	8007afa <__srefill_r+0xf6>
 8007a64:	06d9      	lsls	r1, r3, #27
 8007a66:	d405      	bmi.n	8007a74 <__srefill_r+0x70>
 8007a68:	2309      	movs	r3, #9
 8007a6a:	602b      	str	r3, [r5, #0]
 8007a6c:	3337      	adds	r3, #55	; 0x37
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	81a3      	strh	r3, [r4, #12]
 8007a72:	e7e8      	b.n	8007a46 <__srefill_r+0x42>
 8007a74:	2608      	movs	r6, #8
 8007a76:	4233      	tst	r3, r6
 8007a78:	d00a      	beq.n	8007a90 <__srefill_r+0x8c>
 8007a7a:	0021      	movs	r1, r4
 8007a7c:	0028      	movs	r0, r5
 8007a7e:	f7fe ff93 	bl	80069a8 <_fflush_r>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d1df      	bne.n	8007a46 <__srefill_r+0x42>
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	60a0      	str	r0, [r4, #8]
 8007a8a:	43b3      	bics	r3, r6
 8007a8c:	81a3      	strh	r3, [r4, #12]
 8007a8e:	61a0      	str	r0, [r4, #24]
 8007a90:	2304      	movs	r3, #4
 8007a92:	89a2      	ldrh	r2, [r4, #12]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	81a3      	strh	r3, [r4, #12]
 8007a98:	6923      	ldr	r3, [r4, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d103      	bne.n	8007aa6 <__srefill_r+0xa2>
 8007a9e:	0021      	movs	r1, r4
 8007aa0:	0028      	movs	r0, r5
 8007aa2:	f7ff fcd7 	bl	8007454 <__smakebuf_r>
 8007aa6:	230c      	movs	r3, #12
 8007aa8:	5ee7      	ldrsh	r7, [r4, r3]
 8007aaa:	b2be      	uxth	r6, r7
 8007aac:	07b3      	lsls	r3, r6, #30
 8007aae:	d00f      	beq.n	8007ad0 <__srefill_r+0xcc>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	81a3      	strh	r3, [r4, #12]
 8007ab4:	4b20      	ldr	r3, [pc, #128]	; (8007b38 <__srefill_r+0x134>)
 8007ab6:	4921      	ldr	r1, [pc, #132]	; (8007b3c <__srefill_r+0x138>)
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	f7ff fc35 	bl	8007328 <_fwalk>
 8007abe:	2309      	movs	r3, #9
 8007ac0:	81a7      	strh	r7, [r4, #12]
 8007ac2:	401e      	ands	r6, r3
 8007ac4:	429e      	cmp	r6, r3
 8007ac6:	d103      	bne.n	8007ad0 <__srefill_r+0xcc>
 8007ac8:	0021      	movs	r1, r4
 8007aca:	0028      	movs	r0, r5
 8007acc:	f7fe fed4 	bl	8006878 <__sflush_r>
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	6922      	ldr	r2, [r4, #16]
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	0028      	movs	r0, r5
 8007ad8:	6963      	ldr	r3, [r4, #20]
 8007ada:	6a21      	ldr	r1, [r4, #32]
 8007adc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007ade:	47a8      	blx	r5
 8007ae0:	0002      	movs	r2, r0
 8007ae2:	6060      	str	r0, [r4, #4]
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	4282      	cmp	r2, r0
 8007ae8:	dc19      	bgt.n	8007b1e <__srefill_r+0x11a>
 8007aea:	89a1      	ldrh	r1, [r4, #12]
 8007aec:	4282      	cmp	r2, r0
 8007aee:	d117      	bne.n	8007b20 <__srefill_r+0x11c>
 8007af0:	2320      	movs	r3, #32
 8007af2:	430b      	orrs	r3, r1
 8007af4:	81a3      	strh	r3, [r4, #12]
 8007af6:	3801      	subs	r0, #1
 8007af8:	e011      	b.n	8007b1e <__srefill_r+0x11a>
 8007afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007afc:	2900      	cmp	r1, #0
 8007afe:	d0cb      	beq.n	8007a98 <__srefill_r+0x94>
 8007b00:	0023      	movs	r3, r4
 8007b02:	3344      	adds	r3, #68	; 0x44
 8007b04:	4299      	cmp	r1, r3
 8007b06:	d002      	beq.n	8007b0e <__srefill_r+0x10a>
 8007b08:	0028      	movs	r0, r5
 8007b0a:	f7ff f9c5 	bl	8006e98 <_free_r>
 8007b0e:	2000      	movs	r0, #0
 8007b10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b12:	6360      	str	r0, [r4, #52]	; 0x34
 8007b14:	6063      	str	r3, [r4, #4]
 8007b16:	4283      	cmp	r3, r0
 8007b18:	d0be      	beq.n	8007a98 <__srefill_r+0x94>
 8007b1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b20:	2340      	movs	r3, #64	; 0x40
 8007b22:	6060      	str	r0, [r4, #4]
 8007b24:	430b      	orrs	r3, r1
 8007b26:	e7a3      	b.n	8007a70 <__srefill_r+0x6c>
 8007b28:	080089f0 	.word	0x080089f0
 8007b2c:	ffffdfff 	.word	0xffffdfff
 8007b30:	08008a10 	.word	0x08008a10
 8007b34:	080089d0 	.word	0x080089d0
 8007b38:	08008a30 	.word	0x08008a30
 8007b3c:	080079ed 	.word	0x080079ed

08007b40 <__srget_r>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	0005      	movs	r5, r0
 8007b44:	000c      	movs	r4, r1
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d004      	beq.n	8007b54 <__srget_r+0x14>
 8007b4a:	6983      	ldr	r3, [r0, #24]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <__srget_r+0x14>
 8007b50:	f7ff f82c 	bl	8006bac <__sinit>
 8007b54:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <__srget_r+0x54>)
 8007b56:	429c      	cmp	r4, r3
 8007b58:	d10e      	bne.n	8007b78 <__srget_r+0x38>
 8007b5a:	686c      	ldr	r4, [r5, #4]
 8007b5c:	0021      	movs	r1, r4
 8007b5e:	0028      	movs	r0, r5
 8007b60:	f7ff ff50 	bl	8007a04 <__srefill_r>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d111      	bne.n	8007b8c <__srget_r+0x4c>
 8007b68:	6863      	ldr	r3, [r4, #4]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	6063      	str	r3, [r4, #4]
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	6022      	str	r2, [r4, #0]
 8007b74:	7818      	ldrb	r0, [r3, #0]
 8007b76:	bd70      	pop	{r4, r5, r6, pc}
 8007b78:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <__srget_r+0x58>)
 8007b7a:	429c      	cmp	r4, r3
 8007b7c:	d101      	bne.n	8007b82 <__srget_r+0x42>
 8007b7e:	68ac      	ldr	r4, [r5, #8]
 8007b80:	e7ec      	b.n	8007b5c <__srget_r+0x1c>
 8007b82:	4b06      	ldr	r3, [pc, #24]	; (8007b9c <__srget_r+0x5c>)
 8007b84:	429c      	cmp	r4, r3
 8007b86:	d1e9      	bne.n	8007b5c <__srget_r+0x1c>
 8007b88:	68ec      	ldr	r4, [r5, #12]
 8007b8a:	e7e7      	b.n	8007b5c <__srget_r+0x1c>
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	4240      	negs	r0, r0
 8007b90:	e7f1      	b.n	8007b76 <__srget_r+0x36>
 8007b92:	46c0      	nop			; (mov r8, r8)
 8007b94:	080089f0 	.word	0x080089f0
 8007b98:	08008a10 	.word	0x08008a10
 8007b9c:	080089d0 	.word	0x080089d0

08007ba0 <_sbrk_r>:
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	b570      	push	{r4, r5, r6, lr}
 8007ba4:	4c06      	ldr	r4, [pc, #24]	; (8007bc0 <_sbrk_r+0x20>)
 8007ba6:	0005      	movs	r5, r0
 8007ba8:	0008      	movs	r0, r1
 8007baa:	6023      	str	r3, [r4, #0]
 8007bac:	f7fc f9ea 	bl	8003f84 <_sbrk>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d103      	bne.n	8007bbc <_sbrk_r+0x1c>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d000      	beq.n	8007bbc <_sbrk_r+0x1c>
 8007bba:	602b      	str	r3, [r5, #0]
 8007bbc:	bd70      	pop	{r4, r5, r6, pc}
 8007bbe:	46c0      	nop			; (mov r8, r8)
 8007bc0:	20000da8 	.word	0x20000da8

08007bc4 <setbuf>:
 8007bc4:	424a      	negs	r2, r1
 8007bc6:	414a      	adcs	r2, r1
 8007bc8:	2380      	movs	r3, #128	; 0x80
 8007bca:	b510      	push	{r4, lr}
 8007bcc:	0052      	lsls	r2, r2, #1
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	f000 f802 	bl	8007bd8 <setvbuf>
 8007bd4:	bd10      	pop	{r4, pc}
	...

08007bd8 <setvbuf>:
 8007bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bda:	001d      	movs	r5, r3
 8007bdc:	4b60      	ldr	r3, [pc, #384]	; (8007d60 <setvbuf+0x188>)
 8007bde:	b085      	sub	sp, #20
 8007be0:	681e      	ldr	r6, [r3, #0]
 8007be2:	0004      	movs	r4, r0
 8007be4:	000f      	movs	r7, r1
 8007be6:	9200      	str	r2, [sp, #0]
 8007be8:	2e00      	cmp	r6, #0
 8007bea:	d005      	beq.n	8007bf8 <setvbuf+0x20>
 8007bec:	69b3      	ldr	r3, [r6, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d102      	bne.n	8007bf8 <setvbuf+0x20>
 8007bf2:	0030      	movs	r0, r6
 8007bf4:	f7fe ffda 	bl	8006bac <__sinit>
 8007bf8:	4b5a      	ldr	r3, [pc, #360]	; (8007d64 <setvbuf+0x18c>)
 8007bfa:	429c      	cmp	r4, r3
 8007bfc:	d162      	bne.n	8007cc4 <setvbuf+0xec>
 8007bfe:	6874      	ldr	r4, [r6, #4]
 8007c00:	9b00      	ldr	r3, [sp, #0]
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d005      	beq.n	8007c12 <setvbuf+0x3a>
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d900      	bls.n	8007c0c <setvbuf+0x34>
 8007c0a:	e0a3      	b.n	8007d54 <setvbuf+0x17c>
 8007c0c:	2d00      	cmp	r5, #0
 8007c0e:	da00      	bge.n	8007c12 <setvbuf+0x3a>
 8007c10:	e0a0      	b.n	8007d54 <setvbuf+0x17c>
 8007c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c14:	07db      	lsls	r3, r3, #31
 8007c16:	d405      	bmi.n	8007c24 <setvbuf+0x4c>
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	059b      	lsls	r3, r3, #22
 8007c1c:	d402      	bmi.n	8007c24 <setvbuf+0x4c>
 8007c1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c20:	f7ff fbe6 	bl	80073f0 <__retarget_lock_acquire_recursive>
 8007c24:	0021      	movs	r1, r4
 8007c26:	0030      	movs	r0, r6
 8007c28:	f7fe febe 	bl	80069a8 <_fflush_r>
 8007c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c2e:	2900      	cmp	r1, #0
 8007c30:	d008      	beq.n	8007c44 <setvbuf+0x6c>
 8007c32:	0023      	movs	r3, r4
 8007c34:	3344      	adds	r3, #68	; 0x44
 8007c36:	4299      	cmp	r1, r3
 8007c38:	d002      	beq.n	8007c40 <setvbuf+0x68>
 8007c3a:	0030      	movs	r0, r6
 8007c3c:	f7ff f92c 	bl	8006e98 <_free_r>
 8007c40:	2300      	movs	r3, #0
 8007c42:	6363      	str	r3, [r4, #52]	; 0x34
 8007c44:	2300      	movs	r3, #0
 8007c46:	61a3      	str	r3, [r4, #24]
 8007c48:	6063      	str	r3, [r4, #4]
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	061b      	lsls	r3, r3, #24
 8007c4e:	d503      	bpl.n	8007c58 <setvbuf+0x80>
 8007c50:	6921      	ldr	r1, [r4, #16]
 8007c52:	0030      	movs	r0, r6
 8007c54:	f7ff f920 	bl	8006e98 <_free_r>
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	4a43      	ldr	r2, [pc, #268]	; (8007d68 <setvbuf+0x190>)
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	81a3      	strh	r3, [r4, #12]
 8007c60:	9b00      	ldr	r3, [sp, #0]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d100      	bne.n	8007c68 <setvbuf+0x90>
 8007c66:	e06f      	b.n	8007d48 <setvbuf+0x170>
 8007c68:	ab03      	add	r3, sp, #12
 8007c6a:	aa02      	add	r2, sp, #8
 8007c6c:	0021      	movs	r1, r4
 8007c6e:	0030      	movs	r0, r6
 8007c70:	f7ff fbc0 	bl	80073f4 <__swhatbuf_r>
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	4318      	orrs	r0, r3
 8007c78:	81a0      	strh	r0, [r4, #12]
 8007c7a:	2d00      	cmp	r5, #0
 8007c7c:	d12c      	bne.n	8007cd8 <setvbuf+0x100>
 8007c7e:	9d02      	ldr	r5, [sp, #8]
 8007c80:	0028      	movs	r0, r5
 8007c82:	f7ff fc2b 	bl	80074dc <malloc>
 8007c86:	9501      	str	r5, [sp, #4]
 8007c88:	1e07      	subs	r7, r0, #0
 8007c8a:	d157      	bne.n	8007d3c <setvbuf+0x164>
 8007c8c:	9b02      	ldr	r3, [sp, #8]
 8007c8e:	9301      	str	r3, [sp, #4]
 8007c90:	42ab      	cmp	r3, r5
 8007c92:	d14e      	bne.n	8007d32 <setvbuf+0x15a>
 8007c94:	2501      	movs	r5, #1
 8007c96:	426d      	negs	r5, r5
 8007c98:	2302      	movs	r3, #2
 8007c9a:	89a2      	ldrh	r2, [r4, #12]
 8007c9c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	60a2      	str	r2, [r4, #8]
 8007ca4:	0022      	movs	r2, r4
 8007ca6:	3247      	adds	r2, #71	; 0x47
 8007ca8:	6022      	str	r2, [r4, #0]
 8007caa:	6122      	str	r2, [r4, #16]
 8007cac:	2201      	movs	r2, #1
 8007cae:	b21b      	sxth	r3, r3
 8007cb0:	81a3      	strh	r3, [r4, #12]
 8007cb2:	6162      	str	r2, [r4, #20]
 8007cb4:	4211      	tst	r1, r2
 8007cb6:	d139      	bne.n	8007d2c <setvbuf+0x154>
 8007cb8:	059b      	lsls	r3, r3, #22
 8007cba:	d437      	bmi.n	8007d2c <setvbuf+0x154>
 8007cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cbe:	f7ff fb98 	bl	80073f2 <__retarget_lock_release_recursive>
 8007cc2:	e033      	b.n	8007d2c <setvbuf+0x154>
 8007cc4:	4b29      	ldr	r3, [pc, #164]	; (8007d6c <setvbuf+0x194>)
 8007cc6:	429c      	cmp	r4, r3
 8007cc8:	d101      	bne.n	8007cce <setvbuf+0xf6>
 8007cca:	68b4      	ldr	r4, [r6, #8]
 8007ccc:	e798      	b.n	8007c00 <setvbuf+0x28>
 8007cce:	4b28      	ldr	r3, [pc, #160]	; (8007d70 <setvbuf+0x198>)
 8007cd0:	429c      	cmp	r4, r3
 8007cd2:	d195      	bne.n	8007c00 <setvbuf+0x28>
 8007cd4:	68f4      	ldr	r4, [r6, #12]
 8007cd6:	e793      	b.n	8007c00 <setvbuf+0x28>
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	d0d1      	beq.n	8007c80 <setvbuf+0xa8>
 8007cdc:	69b3      	ldr	r3, [r6, #24]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d102      	bne.n	8007ce8 <setvbuf+0x110>
 8007ce2:	0030      	movs	r0, r6
 8007ce4:	f7fe ff62 	bl	8006bac <__sinit>
 8007ce8:	9b02      	ldr	r3, [sp, #8]
 8007cea:	429d      	cmp	r5, r3
 8007cec:	d004      	beq.n	8007cf8 <setvbuf+0x120>
 8007cee:	2380      	movs	r3, #128	; 0x80
 8007cf0:	89a2      	ldrh	r2, [r4, #12]
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	81a3      	strh	r3, [r4, #12]
 8007cf8:	9b00      	ldr	r3, [sp, #0]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d103      	bne.n	8007d06 <setvbuf+0x12e>
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	9a00      	ldr	r2, [sp, #0]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	81a2      	strh	r2, [r4, #12]
 8007d06:	2308      	movs	r3, #8
 8007d08:	89a2      	ldrh	r2, [r4, #12]
 8007d0a:	6027      	str	r7, [r4, #0]
 8007d0c:	6127      	str	r7, [r4, #16]
 8007d0e:	6165      	str	r5, [r4, #20]
 8007d10:	4013      	ands	r3, r2
 8007d12:	d01d      	beq.n	8007d50 <setvbuf+0x178>
 8007d14:	07d3      	lsls	r3, r2, #31
 8007d16:	d519      	bpl.n	8007d4c <setvbuf+0x174>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	426d      	negs	r5, r5
 8007d1c:	60a3      	str	r3, [r4, #8]
 8007d1e:	61a5      	str	r5, [r4, #24]
 8007d20:	2501      	movs	r5, #1
 8007d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d24:	401d      	ands	r5, r3
 8007d26:	d118      	bne.n	8007d5a <setvbuf+0x182>
 8007d28:	0593      	lsls	r3, r2, #22
 8007d2a:	d5c7      	bpl.n	8007cbc <setvbuf+0xe4>
 8007d2c:	0028      	movs	r0, r5
 8007d2e:	b005      	add	sp, #20
 8007d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d32:	9801      	ldr	r0, [sp, #4]
 8007d34:	f7ff fbd2 	bl	80074dc <malloc>
 8007d38:	1e07      	subs	r7, r0, #0
 8007d3a:	d0ab      	beq.n	8007c94 <setvbuf+0xbc>
 8007d3c:	2380      	movs	r3, #128	; 0x80
 8007d3e:	89a2      	ldrh	r2, [r4, #12]
 8007d40:	9d01      	ldr	r5, [sp, #4]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	81a3      	strh	r3, [r4, #12]
 8007d46:	e7c9      	b.n	8007cdc <setvbuf+0x104>
 8007d48:	2500      	movs	r5, #0
 8007d4a:	e7a5      	b.n	8007c98 <setvbuf+0xc0>
 8007d4c:	60a5      	str	r5, [r4, #8]
 8007d4e:	e7e7      	b.n	8007d20 <setvbuf+0x148>
 8007d50:	60a3      	str	r3, [r4, #8]
 8007d52:	e7e5      	b.n	8007d20 <setvbuf+0x148>
 8007d54:	2501      	movs	r5, #1
 8007d56:	426d      	negs	r5, r5
 8007d58:	e7e8      	b.n	8007d2c <setvbuf+0x154>
 8007d5a:	2500      	movs	r5, #0
 8007d5c:	e7e6      	b.n	8007d2c <setvbuf+0x154>
 8007d5e:	46c0      	nop			; (mov r8, r8)
 8007d60:	200001d4 	.word	0x200001d4
 8007d64:	080089f0 	.word	0x080089f0
 8007d68:	fffff35c 	.word	0xfffff35c
 8007d6c:	08008a10 	.word	0x08008a10
 8007d70:	080089d0 	.word	0x080089d0

08007d74 <__sread>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	000c      	movs	r4, r1
 8007d78:	250e      	movs	r5, #14
 8007d7a:	5f49      	ldrsh	r1, [r1, r5]
 8007d7c:	f000 fa4c 	bl	8008218 <_read_r>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	db03      	blt.n	8007d8c <__sread+0x18>
 8007d84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007d86:	181b      	adds	r3, r3, r0
 8007d88:	6563      	str	r3, [r4, #84]	; 0x54
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	4a02      	ldr	r2, [pc, #8]	; (8007d98 <__sread+0x24>)
 8007d90:	4013      	ands	r3, r2
 8007d92:	81a3      	strh	r3, [r4, #12]
 8007d94:	e7f9      	b.n	8007d8a <__sread+0x16>
 8007d96:	46c0      	nop			; (mov r8, r8)
 8007d98:	ffffefff 	.word	0xffffefff

08007d9c <__swrite>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	001f      	movs	r7, r3
 8007da0:	898b      	ldrh	r3, [r1, #12]
 8007da2:	0005      	movs	r5, r0
 8007da4:	000c      	movs	r4, r1
 8007da6:	0016      	movs	r6, r2
 8007da8:	05db      	lsls	r3, r3, #23
 8007daa:	d505      	bpl.n	8007db8 <__swrite+0x1c>
 8007dac:	230e      	movs	r3, #14
 8007dae:	5ec9      	ldrsh	r1, [r1, r3]
 8007db0:	2200      	movs	r2, #0
 8007db2:	2302      	movs	r3, #2
 8007db4:	f000 fa1c 	bl	80081f0 <_lseek_r>
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	4a05      	ldr	r2, [pc, #20]	; (8007dd0 <__swrite+0x34>)
 8007dbc:	0028      	movs	r0, r5
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	81a3      	strh	r3, [r4, #12]
 8007dc2:	0032      	movs	r2, r6
 8007dc4:	230e      	movs	r3, #14
 8007dc6:	5ee1      	ldrsh	r1, [r4, r3]
 8007dc8:	003b      	movs	r3, r7
 8007dca:	f000 f8a7 	bl	8007f1c <_write_r>
 8007dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dd0:	ffffefff 	.word	0xffffefff

08007dd4 <__sseek>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	000c      	movs	r4, r1
 8007dd8:	250e      	movs	r5, #14
 8007dda:	5f49      	ldrsh	r1, [r1, r5]
 8007ddc:	f000 fa08 	bl	80081f0 <_lseek_r>
 8007de0:	89a3      	ldrh	r3, [r4, #12]
 8007de2:	1c42      	adds	r2, r0, #1
 8007de4:	d103      	bne.n	8007dee <__sseek+0x1a>
 8007de6:	4a05      	ldr	r2, [pc, #20]	; (8007dfc <__sseek+0x28>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	81a3      	strh	r3, [r4, #12]
 8007dec:	bd70      	pop	{r4, r5, r6, pc}
 8007dee:	2280      	movs	r2, #128	; 0x80
 8007df0:	0152      	lsls	r2, r2, #5
 8007df2:	4313      	orrs	r3, r2
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	6560      	str	r0, [r4, #84]	; 0x54
 8007df8:	e7f8      	b.n	8007dec <__sseek+0x18>
 8007dfa:	46c0      	nop			; (mov r8, r8)
 8007dfc:	ffffefff 	.word	0xffffefff

08007e00 <__sclose>:
 8007e00:	b510      	push	{r4, lr}
 8007e02:	230e      	movs	r3, #14
 8007e04:	5ec9      	ldrsh	r1, [r1, r3]
 8007e06:	f000 f995 	bl	8008134 <_close_r>
 8007e0a:	bd10      	pop	{r4, pc}

08007e0c <strncmp>:
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	b530      	push	{r4, r5, lr}
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d00a      	beq.n	8007e2a <strncmp+0x1e>
 8007e14:	3a01      	subs	r2, #1
 8007e16:	5cc4      	ldrb	r4, [r0, r3]
 8007e18:	5ccd      	ldrb	r5, [r1, r3]
 8007e1a:	42ac      	cmp	r4, r5
 8007e1c:	d104      	bne.n	8007e28 <strncmp+0x1c>
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d002      	beq.n	8007e28 <strncmp+0x1c>
 8007e22:	3301      	adds	r3, #1
 8007e24:	2c00      	cmp	r4, #0
 8007e26:	d1f6      	bne.n	8007e16 <strncmp+0xa>
 8007e28:	1b63      	subs	r3, r4, r5
 8007e2a:	0018      	movs	r0, r3
 8007e2c:	bd30      	pop	{r4, r5, pc}

08007e2e <strspn>:
 8007e2e:	0003      	movs	r3, r0
 8007e30:	b530      	push	{r4, r5, lr}
 8007e32:	781c      	ldrb	r4, [r3, #0]
 8007e34:	2c00      	cmp	r4, #0
 8007e36:	d007      	beq.n	8007e48 <strspn+0x1a>
 8007e38:	000a      	movs	r2, r1
 8007e3a:	e002      	b.n	8007e42 <strspn+0x14>
 8007e3c:	42ac      	cmp	r4, r5
 8007e3e:	d005      	beq.n	8007e4c <strspn+0x1e>
 8007e40:	3201      	adds	r2, #1
 8007e42:	7815      	ldrb	r5, [r2, #0]
 8007e44:	2d00      	cmp	r5, #0
 8007e46:	d1f9      	bne.n	8007e3c <strspn+0xe>
 8007e48:	1a18      	subs	r0, r3, r0
 8007e4a:	bd30      	pop	{r4, r5, pc}
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	e7f0      	b.n	8007e32 <strspn+0x4>

08007e50 <__swbuf_r>:
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e52:	0005      	movs	r5, r0
 8007e54:	000e      	movs	r6, r1
 8007e56:	0014      	movs	r4, r2
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d004      	beq.n	8007e66 <__swbuf_r+0x16>
 8007e5c:	6983      	ldr	r3, [r0, #24]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <__swbuf_r+0x16>
 8007e62:	f7fe fea3 	bl	8006bac <__sinit>
 8007e66:	4b29      	ldr	r3, [pc, #164]	; (8007f0c <__swbuf_r+0xbc>)
 8007e68:	429c      	cmp	r4, r3
 8007e6a:	d133      	bne.n	8007ed4 <__swbuf_r+0x84>
 8007e6c:	686c      	ldr	r4, [r5, #4]
 8007e6e:	69a3      	ldr	r3, [r4, #24]
 8007e70:	60a3      	str	r3, [r4, #8]
 8007e72:	89a3      	ldrh	r3, [r4, #12]
 8007e74:	071b      	lsls	r3, r3, #28
 8007e76:	d537      	bpl.n	8007ee8 <__swbuf_r+0x98>
 8007e78:	6923      	ldr	r3, [r4, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d034      	beq.n	8007ee8 <__swbuf_r+0x98>
 8007e7e:	230c      	movs	r3, #12
 8007e80:	5ee2      	ldrsh	r2, [r4, r3]
 8007e82:	2380      	movs	r3, #128	; 0x80
 8007e84:	019b      	lsls	r3, r3, #6
 8007e86:	b2f7      	uxtb	r7, r6
 8007e88:	b2f6      	uxtb	r6, r6
 8007e8a:	421a      	tst	r2, r3
 8007e8c:	d036      	beq.n	8007efc <__swbuf_r+0xac>
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	6922      	ldr	r2, [r4, #16]
 8007e92:	1a98      	subs	r0, r3, r2
 8007e94:	6963      	ldr	r3, [r4, #20]
 8007e96:	4298      	cmp	r0, r3
 8007e98:	db05      	blt.n	8007ea6 <__swbuf_r+0x56>
 8007e9a:	0021      	movs	r1, r4
 8007e9c:	0028      	movs	r0, r5
 8007e9e:	f7fe fd83 	bl	80069a8 <_fflush_r>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d126      	bne.n	8007ef4 <__swbuf_r+0xa4>
 8007ea6:	68a3      	ldr	r3, [r4, #8]
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	60a3      	str	r3, [r4, #8]
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	6022      	str	r2, [r4, #0]
 8007eb4:	701f      	strb	r7, [r3, #0]
 8007eb6:	6963      	ldr	r3, [r4, #20]
 8007eb8:	4298      	cmp	r0, r3
 8007eba:	d004      	beq.n	8007ec6 <__swbuf_r+0x76>
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	07db      	lsls	r3, r3, #31
 8007ec0:	d51a      	bpl.n	8007ef8 <__swbuf_r+0xa8>
 8007ec2:	2e0a      	cmp	r6, #10
 8007ec4:	d118      	bne.n	8007ef8 <__swbuf_r+0xa8>
 8007ec6:	0021      	movs	r1, r4
 8007ec8:	0028      	movs	r0, r5
 8007eca:	f7fe fd6d 	bl	80069a8 <_fflush_r>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d012      	beq.n	8007ef8 <__swbuf_r+0xa8>
 8007ed2:	e00f      	b.n	8007ef4 <__swbuf_r+0xa4>
 8007ed4:	4b0e      	ldr	r3, [pc, #56]	; (8007f10 <__swbuf_r+0xc0>)
 8007ed6:	429c      	cmp	r4, r3
 8007ed8:	d101      	bne.n	8007ede <__swbuf_r+0x8e>
 8007eda:	68ac      	ldr	r4, [r5, #8]
 8007edc:	e7c7      	b.n	8007e6e <__swbuf_r+0x1e>
 8007ede:	4b0d      	ldr	r3, [pc, #52]	; (8007f14 <__swbuf_r+0xc4>)
 8007ee0:	429c      	cmp	r4, r3
 8007ee2:	d1c4      	bne.n	8007e6e <__swbuf_r+0x1e>
 8007ee4:	68ec      	ldr	r4, [r5, #12]
 8007ee6:	e7c2      	b.n	8007e6e <__swbuf_r+0x1e>
 8007ee8:	0021      	movs	r1, r4
 8007eea:	0028      	movs	r0, r5
 8007eec:	f000 f82a 	bl	8007f44 <__swsetup_r>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d0c4      	beq.n	8007e7e <__swbuf_r+0x2e>
 8007ef4:	2601      	movs	r6, #1
 8007ef6:	4276      	negs	r6, r6
 8007ef8:	0030      	movs	r0, r6
 8007efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007efc:	4313      	orrs	r3, r2
 8007efe:	81a3      	strh	r3, [r4, #12]
 8007f00:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f02:	4b05      	ldr	r3, [pc, #20]	; (8007f18 <__swbuf_r+0xc8>)
 8007f04:	4013      	ands	r3, r2
 8007f06:	6663      	str	r3, [r4, #100]	; 0x64
 8007f08:	e7c1      	b.n	8007e8e <__swbuf_r+0x3e>
 8007f0a:	46c0      	nop			; (mov r8, r8)
 8007f0c:	080089f0 	.word	0x080089f0
 8007f10:	08008a10 	.word	0x08008a10
 8007f14:	080089d0 	.word	0x080089d0
 8007f18:	ffffdfff 	.word	0xffffdfff

08007f1c <_write_r>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	0005      	movs	r5, r0
 8007f20:	0008      	movs	r0, r1
 8007f22:	0011      	movs	r1, r2
 8007f24:	2200      	movs	r2, #0
 8007f26:	4c06      	ldr	r4, [pc, #24]	; (8007f40 <_write_r+0x24>)
 8007f28:	6022      	str	r2, [r4, #0]
 8007f2a:	001a      	movs	r2, r3
 8007f2c:	f7fb fee8 	bl	8003d00 <_write>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d103      	bne.n	8007f3c <_write_r+0x20>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d000      	beq.n	8007f3c <_write_r+0x20>
 8007f3a:	602b      	str	r3, [r5, #0]
 8007f3c:	bd70      	pop	{r4, r5, r6, pc}
 8007f3e:	46c0      	nop			; (mov r8, r8)
 8007f40:	20000da8 	.word	0x20000da8

08007f44 <__swsetup_r>:
 8007f44:	4b36      	ldr	r3, [pc, #216]	; (8008020 <__swsetup_r+0xdc>)
 8007f46:	b570      	push	{r4, r5, r6, lr}
 8007f48:	681d      	ldr	r5, [r3, #0]
 8007f4a:	0006      	movs	r6, r0
 8007f4c:	000c      	movs	r4, r1
 8007f4e:	2d00      	cmp	r5, #0
 8007f50:	d005      	beq.n	8007f5e <__swsetup_r+0x1a>
 8007f52:	69ab      	ldr	r3, [r5, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <__swsetup_r+0x1a>
 8007f58:	0028      	movs	r0, r5
 8007f5a:	f7fe fe27 	bl	8006bac <__sinit>
 8007f5e:	4b31      	ldr	r3, [pc, #196]	; (8008024 <__swsetup_r+0xe0>)
 8007f60:	429c      	cmp	r4, r3
 8007f62:	d10f      	bne.n	8007f84 <__swsetup_r+0x40>
 8007f64:	686c      	ldr	r4, [r5, #4]
 8007f66:	230c      	movs	r3, #12
 8007f68:	5ee2      	ldrsh	r2, [r4, r3]
 8007f6a:	b293      	uxth	r3, r2
 8007f6c:	0719      	lsls	r1, r3, #28
 8007f6e:	d42d      	bmi.n	8007fcc <__swsetup_r+0x88>
 8007f70:	06d9      	lsls	r1, r3, #27
 8007f72:	d411      	bmi.n	8007f98 <__swsetup_r+0x54>
 8007f74:	2309      	movs	r3, #9
 8007f76:	2001      	movs	r0, #1
 8007f78:	6033      	str	r3, [r6, #0]
 8007f7a:	3337      	adds	r3, #55	; 0x37
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	81a3      	strh	r3, [r4, #12]
 8007f80:	4240      	negs	r0, r0
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	4b28      	ldr	r3, [pc, #160]	; (8008028 <__swsetup_r+0xe4>)
 8007f86:	429c      	cmp	r4, r3
 8007f88:	d101      	bne.n	8007f8e <__swsetup_r+0x4a>
 8007f8a:	68ac      	ldr	r4, [r5, #8]
 8007f8c:	e7eb      	b.n	8007f66 <__swsetup_r+0x22>
 8007f8e:	4b27      	ldr	r3, [pc, #156]	; (800802c <__swsetup_r+0xe8>)
 8007f90:	429c      	cmp	r4, r3
 8007f92:	d1e8      	bne.n	8007f66 <__swsetup_r+0x22>
 8007f94:	68ec      	ldr	r4, [r5, #12]
 8007f96:	e7e6      	b.n	8007f66 <__swsetup_r+0x22>
 8007f98:	075b      	lsls	r3, r3, #29
 8007f9a:	d513      	bpl.n	8007fc4 <__swsetup_r+0x80>
 8007f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f9e:	2900      	cmp	r1, #0
 8007fa0:	d008      	beq.n	8007fb4 <__swsetup_r+0x70>
 8007fa2:	0023      	movs	r3, r4
 8007fa4:	3344      	adds	r3, #68	; 0x44
 8007fa6:	4299      	cmp	r1, r3
 8007fa8:	d002      	beq.n	8007fb0 <__swsetup_r+0x6c>
 8007faa:	0030      	movs	r0, r6
 8007fac:	f7fe ff74 	bl	8006e98 <_free_r>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	6363      	str	r3, [r4, #52]	; 0x34
 8007fb4:	2224      	movs	r2, #36	; 0x24
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	4393      	bics	r3, r2
 8007fba:	81a3      	strh	r3, [r4, #12]
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	6063      	str	r3, [r4, #4]
 8007fc0:	6923      	ldr	r3, [r4, #16]
 8007fc2:	6023      	str	r3, [r4, #0]
 8007fc4:	2308      	movs	r3, #8
 8007fc6:	89a2      	ldrh	r2, [r4, #12]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	6923      	ldr	r3, [r4, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10b      	bne.n	8007fea <__swsetup_r+0xa6>
 8007fd2:	21a0      	movs	r1, #160	; 0xa0
 8007fd4:	2280      	movs	r2, #128	; 0x80
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	0089      	lsls	r1, r1, #2
 8007fda:	0092      	lsls	r2, r2, #2
 8007fdc:	400b      	ands	r3, r1
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d003      	beq.n	8007fea <__swsetup_r+0xa6>
 8007fe2:	0021      	movs	r1, r4
 8007fe4:	0030      	movs	r0, r6
 8007fe6:	f7ff fa35 	bl	8007454 <__smakebuf_r>
 8007fea:	2301      	movs	r3, #1
 8007fec:	89a2      	ldrh	r2, [r4, #12]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	d011      	beq.n	8008016 <__swsetup_r+0xd2>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60a3      	str	r3, [r4, #8]
 8007ff6:	6963      	ldr	r3, [r4, #20]
 8007ff8:	425b      	negs	r3, r3
 8007ffa:	61a3      	str	r3, [r4, #24]
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	6923      	ldr	r3, [r4, #16]
 8008000:	4283      	cmp	r3, r0
 8008002:	d1be      	bne.n	8007f82 <__swsetup_r+0x3e>
 8008004:	230c      	movs	r3, #12
 8008006:	5ee2      	ldrsh	r2, [r4, r3]
 8008008:	0613      	lsls	r3, r2, #24
 800800a:	d5ba      	bpl.n	8007f82 <__swsetup_r+0x3e>
 800800c:	2340      	movs	r3, #64	; 0x40
 800800e:	4313      	orrs	r3, r2
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	3801      	subs	r0, #1
 8008014:	e7b5      	b.n	8007f82 <__swsetup_r+0x3e>
 8008016:	0792      	lsls	r2, r2, #30
 8008018:	d400      	bmi.n	800801c <__swsetup_r+0xd8>
 800801a:	6963      	ldr	r3, [r4, #20]
 800801c:	60a3      	str	r3, [r4, #8]
 800801e:	e7ed      	b.n	8007ffc <__swsetup_r+0xb8>
 8008020:	200001d4 	.word	0x200001d4
 8008024:	080089f0 	.word	0x080089f0
 8008028:	08008a10 	.word	0x08008a10
 800802c:	080089d0 	.word	0x080089d0

08008030 <__call_exitprocs>:
 8008030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008032:	4b3d      	ldr	r3, [pc, #244]	; (8008128 <__call_exitprocs+0xf8>)
 8008034:	b087      	sub	sp, #28
 8008036:	9005      	str	r0, [sp, #20]
 8008038:	6818      	ldr	r0, [r3, #0]
 800803a:	9103      	str	r1, [sp, #12]
 800803c:	f7ff f9d8 	bl	80073f0 <__retarget_lock_acquire_recursive>
 8008040:	4b3a      	ldr	r3, [pc, #232]	; (800812c <__call_exitprocs+0xfc>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	9302      	str	r3, [sp, #8]
 8008046:	9b02      	ldr	r3, [sp, #8]
 8008048:	001f      	movs	r7, r3
 800804a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800804c:	3748      	adds	r7, #72	; 0x48
 800804e:	2c00      	cmp	r4, #0
 8008050:	d010      	beq.n	8008074 <__call_exitprocs+0x44>
 8008052:	0023      	movs	r3, r4
 8008054:	6865      	ldr	r5, [r4, #4]
 8008056:	3388      	adds	r3, #136	; 0x88
 8008058:	681e      	ldr	r6, [r3, #0]
 800805a:	1e6b      	subs	r3, r5, #1
 800805c:	00ad      	lsls	r5, r5, #2
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	1963      	adds	r3, r4, r5
 8008062:	3d04      	subs	r5, #4
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	1975      	adds	r5, r6, r5
 8008068:	9b00      	ldr	r3, [sp, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	da08      	bge.n	8008080 <__call_exitprocs+0x50>
 800806e:	4b30      	ldr	r3, [pc, #192]	; (8008130 <__call_exitprocs+0x100>)
 8008070:	2b00      	cmp	r3, #0
 8008072:	d145      	bne.n	8008100 <__call_exitprocs+0xd0>
 8008074:	4b2c      	ldr	r3, [pc, #176]	; (8008128 <__call_exitprocs+0xf8>)
 8008076:	6818      	ldr	r0, [r3, #0]
 8008078:	f7ff f9bb 	bl	80073f2 <__retarget_lock_release_recursive>
 800807c:	b007      	add	sp, #28
 800807e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008080:	9b03      	ldr	r3, [sp, #12]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00f      	beq.n	80080a6 <__call_exitprocs+0x76>
 8008086:	2e00      	cmp	r6, #0
 8008088:	d107      	bne.n	800809a <__call_exitprocs+0x6a>
 800808a:	9b00      	ldr	r3, [sp, #0]
 800808c:	3d04      	subs	r5, #4
 800808e:	3b01      	subs	r3, #1
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	9b01      	ldr	r3, [sp, #4]
 8008094:	3b04      	subs	r3, #4
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	e7e6      	b.n	8008068 <__call_exitprocs+0x38>
 800809a:	002b      	movs	r3, r5
 800809c:	3380      	adds	r3, #128	; 0x80
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	9a03      	ldr	r2, [sp, #12]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d1f1      	bne.n	800808a <__call_exitprocs+0x5a>
 80080a6:	6862      	ldr	r2, [r4, #4]
 80080a8:	9b01      	ldr	r3, [sp, #4]
 80080aa:	9900      	ldr	r1, [sp, #0]
 80080ac:	3a01      	subs	r2, #1
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	4291      	cmp	r1, r2
 80080b2:	d117      	bne.n	80080e4 <__call_exitprocs+0xb4>
 80080b4:	6061      	str	r1, [r4, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0e7      	beq.n	800808a <__call_exitprocs+0x5a>
 80080ba:	6862      	ldr	r2, [r4, #4]
 80080bc:	9204      	str	r2, [sp, #16]
 80080be:	2e00      	cmp	r6, #0
 80080c0:	d007      	beq.n	80080d2 <__call_exitprocs+0xa2>
 80080c2:	2201      	movs	r2, #1
 80080c4:	9900      	ldr	r1, [sp, #0]
 80080c6:	408a      	lsls	r2, r1
 80080c8:	0031      	movs	r1, r6
 80080ca:	31fc      	adds	r1, #252	; 0xfc
 80080cc:	6848      	ldr	r0, [r1, #4]
 80080ce:	4210      	tst	r0, r2
 80080d0:	d10c      	bne.n	80080ec <__call_exitprocs+0xbc>
 80080d2:	4798      	blx	r3
 80080d4:	9b04      	ldr	r3, [sp, #16]
 80080d6:	6862      	ldr	r2, [r4, #4]
 80080d8:	4293      	cmp	r3, r2
 80080da:	d1b4      	bne.n	8008046 <__call_exitprocs+0x16>
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	429c      	cmp	r4, r3
 80080e0:	d0d3      	beq.n	800808a <__call_exitprocs+0x5a>
 80080e2:	e7b0      	b.n	8008046 <__call_exitprocs+0x16>
 80080e4:	2200      	movs	r2, #0
 80080e6:	9901      	ldr	r1, [sp, #4]
 80080e8:	604a      	str	r2, [r1, #4]
 80080ea:	e7e4      	b.n	80080b6 <__call_exitprocs+0x86>
 80080ec:	6889      	ldr	r1, [r1, #8]
 80080ee:	4211      	tst	r1, r2
 80080f0:	d103      	bne.n	80080fa <__call_exitprocs+0xca>
 80080f2:	6829      	ldr	r1, [r5, #0]
 80080f4:	9805      	ldr	r0, [sp, #20]
 80080f6:	4798      	blx	r3
 80080f8:	e7ec      	b.n	80080d4 <__call_exitprocs+0xa4>
 80080fa:	6828      	ldr	r0, [r5, #0]
 80080fc:	4798      	blx	r3
 80080fe:	e7e9      	b.n	80080d4 <__call_exitprocs+0xa4>
 8008100:	6862      	ldr	r2, [r4, #4]
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	2a00      	cmp	r2, #0
 8008106:	d10c      	bne.n	8008122 <__call_exitprocs+0xf2>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <__call_exitprocs+0xf2>
 800810c:	603b      	str	r3, [r7, #0]
 800810e:	2e00      	cmp	r6, #0
 8008110:	d002      	beq.n	8008118 <__call_exitprocs+0xe8>
 8008112:	0030      	movs	r0, r6
 8008114:	f7ff f9ec 	bl	80074f0 <free>
 8008118:	0020      	movs	r0, r4
 800811a:	f7ff f9e9 	bl	80074f0 <free>
 800811e:	683c      	ldr	r4, [r7, #0]
 8008120:	e795      	b.n	800804e <__call_exitprocs+0x1e>
 8008122:	0027      	movs	r7, r4
 8008124:	001c      	movs	r4, r3
 8008126:	e792      	b.n	800804e <__call_exitprocs+0x1e>
 8008128:	200006d8 	.word	0x200006d8
 800812c:	08008a30 	.word	0x08008a30
 8008130:	080074f1 	.word	0x080074f1

08008134 <_close_r>:
 8008134:	2300      	movs	r3, #0
 8008136:	b570      	push	{r4, r5, r6, lr}
 8008138:	4c06      	ldr	r4, [pc, #24]	; (8008154 <_close_r+0x20>)
 800813a:	0005      	movs	r5, r0
 800813c:	0008      	movs	r0, r1
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	f7fb fdbc 	bl	8003cbc <_close>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	d103      	bne.n	8008150 <_close_r+0x1c>
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d000      	beq.n	8008150 <_close_r+0x1c>
 800814e:	602b      	str	r3, [r5, #0]
 8008150:	bd70      	pop	{r4, r5, r6, pc}
 8008152:	46c0      	nop			; (mov r8, r8)
 8008154:	20000da8 	.word	0x20000da8

08008158 <__sflags>:
 8008158:	780b      	ldrb	r3, [r1, #0]
 800815a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800815c:	2b72      	cmp	r3, #114	; 0x72
 800815e:	d019      	beq.n	8008194 <__sflags+0x3c>
 8008160:	2b77      	cmp	r3, #119	; 0x77
 8008162:	d007      	beq.n	8008174 <__sflags+0x1c>
 8008164:	2b61      	cmp	r3, #97	; 0x61
 8008166:	d119      	bne.n	800819c <__sflags+0x44>
 8008168:	2482      	movs	r4, #130	; 0x82
 800816a:	2084      	movs	r0, #132	; 0x84
 800816c:	00a4      	lsls	r4, r4, #2
 800816e:	2301      	movs	r3, #1
 8008170:	0040      	lsls	r0, r0, #1
 8008172:	e003      	b.n	800817c <__sflags+0x24>
 8008174:	24c0      	movs	r4, #192	; 0xc0
 8008176:	2301      	movs	r3, #1
 8008178:	2008      	movs	r0, #8
 800817a:	00e4      	lsls	r4, r4, #3
 800817c:	2510      	movs	r5, #16
 800817e:	2680      	movs	r6, #128	; 0x80
 8008180:	271c      	movs	r7, #28
 8008182:	46ac      	mov	ip, r5
 8008184:	0136      	lsls	r6, r6, #4
 8008186:	3101      	adds	r1, #1
 8008188:	780d      	ldrb	r5, [r1, #0]
 800818a:	2d00      	cmp	r5, #0
 800818c:	d10a      	bne.n	80081a4 <__sflags+0x4c>
 800818e:	4323      	orrs	r3, r4
 8008190:	6013      	str	r3, [r2, #0]
 8008192:	e006      	b.n	80081a2 <__sflags+0x4a>
 8008194:	2400      	movs	r4, #0
 8008196:	2004      	movs	r0, #4
 8008198:	0023      	movs	r3, r4
 800819a:	e7ef      	b.n	800817c <__sflags+0x24>
 800819c:	2316      	movs	r3, #22
 800819e:	6003      	str	r3, [r0, #0]
 80081a0:	2000      	movs	r0, #0
 80081a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081a4:	2d62      	cmp	r5, #98	; 0x62
 80081a6:	d00b      	beq.n	80081c0 <__sflags+0x68>
 80081a8:	2d78      	cmp	r5, #120	; 0x78
 80081aa:	d00c      	beq.n	80081c6 <__sflags+0x6e>
 80081ac:	2d2b      	cmp	r5, #43	; 0x2b
 80081ae:	d1ea      	bne.n	8008186 <__sflags+0x2e>
 80081b0:	4665      	mov	r5, ip
 80081b2:	43b8      	bics	r0, r7
 80081b4:	4328      	orrs	r0, r5
 80081b6:	2503      	movs	r5, #3
 80081b8:	43ab      	bics	r3, r5
 80081ba:	3d01      	subs	r5, #1
 80081bc:	432b      	orrs	r3, r5
 80081be:	e7e2      	b.n	8008186 <__sflags+0x2e>
 80081c0:	2580      	movs	r5, #128	; 0x80
 80081c2:	026d      	lsls	r5, r5, #9
 80081c4:	e7fa      	b.n	80081bc <__sflags+0x64>
 80081c6:	4333      	orrs	r3, r6
 80081c8:	e7dd      	b.n	8008186 <__sflags+0x2e>
	...

080081cc <_isatty_r>:
 80081cc:	2300      	movs	r3, #0
 80081ce:	b570      	push	{r4, r5, r6, lr}
 80081d0:	4c06      	ldr	r4, [pc, #24]	; (80081ec <_isatty_r+0x20>)
 80081d2:	0005      	movs	r5, r0
 80081d4:	0008      	movs	r0, r1
 80081d6:	6023      	str	r3, [r4, #0]
 80081d8:	f7fb fe86 	bl	8003ee8 <_isatty>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	d103      	bne.n	80081e8 <_isatty_r+0x1c>
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d000      	beq.n	80081e8 <_isatty_r+0x1c>
 80081e6:	602b      	str	r3, [r5, #0]
 80081e8:	bd70      	pop	{r4, r5, r6, pc}
 80081ea:	46c0      	nop			; (mov r8, r8)
 80081ec:	20000da8 	.word	0x20000da8

080081f0 <_lseek_r>:
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	0005      	movs	r5, r0
 80081f4:	0008      	movs	r0, r1
 80081f6:	0011      	movs	r1, r2
 80081f8:	2200      	movs	r2, #0
 80081fa:	4c06      	ldr	r4, [pc, #24]	; (8008214 <_lseek_r+0x24>)
 80081fc:	6022      	str	r2, [r4, #0]
 80081fe:	001a      	movs	r2, r3
 8008200:	f7fb fe94 	bl	8003f2c <_lseek>
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	d103      	bne.n	8008210 <_lseek_r+0x20>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d000      	beq.n	8008210 <_lseek_r+0x20>
 800820e:	602b      	str	r3, [r5, #0]
 8008210:	bd70      	pop	{r4, r5, r6, pc}
 8008212:	46c0      	nop			; (mov r8, r8)
 8008214:	20000da8 	.word	0x20000da8

08008218 <_read_r>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	0005      	movs	r5, r0
 800821c:	0008      	movs	r0, r1
 800821e:	0011      	movs	r1, r2
 8008220:	2200      	movs	r2, #0
 8008222:	4c06      	ldr	r4, [pc, #24]	; (800823c <_read_r+0x24>)
 8008224:	6022      	str	r2, [r4, #0]
 8008226:	001a      	movs	r2, r3
 8008228:	f7fb fdf6 	bl	8003e18 <_read>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d103      	bne.n	8008238 <_read_r+0x20>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d000      	beq.n	8008238 <_read_r+0x20>
 8008236:	602b      	str	r3, [r5, #0]
 8008238:	bd70      	pop	{r4, r5, r6, pc}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	20000da8 	.word	0x20000da8

08008240 <__EH_FRAME_BEGIN__>:
 8008240:	00000000                                ....

08008244 <_init>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	46c0      	nop			; (mov r8, r8)
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr

08008250 <_fini>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	46c0      	nop			; (mov r8, r8)
 8008254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008256:	bc08      	pop	{r3}
 8008258:	469e      	mov	lr, r3
 800825a:	4770      	bx	lr

0800825c <_ZTVN4mbed8AnalogInE>:
	...
 8008264:	2189 0800 2279 0800 218d 0800 21a5 0800     .!..y"...!...!..

08008274 <_ZZN4mbed8CallbackIFvvEE8generateIPS1_EEvRKT_E3ops>:
 8008274:	21bd 0800 21c5 0800 21cf 0800               .!...!...!..

08008280 <_ZTVN4mbed6SerialE>:
	...
 8008288:	273f 0800 2751 0800 22ad 0800 2615 0800     ?'..Q'..."...&..
 8008298:	2765 0800 277d 0800 ff44 ffff 0000 0000     e'..}'..D.......
 80082a8:	22d9 0800 2645 0800 35b7 0800 3575 0800     ."..E&...5..u5..
 80082b8:	35e9 0800 3571 0800 35f7 0800 35f3 0800     .5..q5...5...5..
 80082c8:	35ed 0800 35f1 0800 35fb 0800 2709 0800     .5...5...5...'..
 80082d8:	2713 0800 271d 0800 2727 0800 2735 0800     .'...'..''..5'..
 80082e8:	2739 0800 273d 0800 2785 0800 276d 0800     9'..='...'..m'..
 80082f8:	2741 0800 2755 0800 ff40 ffff 0000 0000     A'..U'..@.......
 8008308:	22e9 0800 2655 0800                         ."..U&..

08008310 <_ZTVN4mbed10SerialBaseE>:
	...
 8008318:	27e5 0800 27e7 0800 2a21 0800 2aa1 0800     .'...'..!*...*..

08008328 <_ZTVN4mbed6TickerE>:
	...
 8008330:	2285 0800 24bd 0800 2acb 0800               ."...$...*..

0800833c <_ZTVN4mbed10TimerEventE>:
	...
 800834c:	3f7b 0800                                   {?..

08008350 <us_data>:
 8008350:	8358 0800 0950 2000                         X...P.. 

08008358 <us_interface>:
 8008358:	66d5 0800 66e9 0800 6731 0800 6745 0800     .f...f..1g..Eg..
 8008368:	66f5 0800 6711 0800 65e5 0800               .f...g...e..

08008374 <_ZTVN4mbed8FileBaseE>:
	...
 800837c:	33f9 0800 3465 0800                         .3..e4..

08008384 <_ZTVN4mbed10FileHandleE>:
	...
 8008394:	3f7b 0800 3f7b 0800 3f7b 0800 3f7b 0800     {?..{?..{?..{?..
 80083a4:	3477 0800 347b 0800 2c05 0800 2c13 0800     w4..{4...,...,..
 80083b4:	347f 0800 2709 0800 2713 0800 271d 0800     .4...'...'...'..
 80083c4:	2727 0800 2735 0800 2739 0800 273d 0800     ''..5'..9'..='..
 80083d4:	002f 0000                                   /...

080083d8 <_ZTVN4mbed8FileLikeE>:
	...
 80083e8:	3f7b 0800 3f7b 0800 3f7b 0800 3f7b 0800     {?..{?..{?..{?..
 80083f8:	3477 0800 347b 0800 2c05 0800 2c13 0800     w4..{4...,...,..
 8008408:	347f 0800 2709 0800 2713 0800 271d 0800     .4...'...'...'..
 8008418:	2727 0800 2735 0800 2739 0800 273d 0800     ''..5'..9'..='..
 8008428:	fffc ffff 0000 0000 0000 0000 0000 0000     ................
 8008438:	2b77 0000                                   w+..

0800843c <_ZTVN4mbed6StreamE>:
	...
 800844c:	35b7 0800 3575 0800 35e9 0800 3571 0800     .5..u5...5..q5..
 800845c:	35f7 0800 35f3 0800 35ed 0800 35f1 0800     .5...5...5...5..
 800846c:	35fb 0800 2709 0800 2713 0800 271d 0800     .5...'...'...'..
 800847c:	2727 0800 2735 0800 2739 0800 273d 0800     ''..5'..9'..='..
 800848c:	3f7b 0800 3f7b 0800 356d 0800 356f 0800     {?..{?..m5..o5..
 800849c:	fffc ffff 0000 0000 0000 0000 0000 0000     ................

080084ac <_ZTV12DirectSerial>:
	...
 80084b4:	38c9 0800 40a5 0800 38ed 0800 38cd 0800     .8...@...8...8..
 80084c4:	38b1 0800 38c1 0800 3477 0800 38bd 0800     .8...8..w4...8..
 80084d4:	2c05 0800 2c13 0800 38b7 0800 2709 0800     .,...,...8...'..
 80084e4:	2713 0800 271d 0800 2727 0800 2735 0800     .'...'..''..5'..
 80084f4:	3909 0800 273d 0800                         .9..='..

080084fc <__stderr_name>:
 80084fc:	732f 6474 7265 0072                         /stderr.

08008504 <__stdin_name>:
 8008504:	732f 6474 6e69 0000                         /stdin..

0800850c <__stdout_name>:
 800850c:	732f 6474 756f 0074 000d 0000               /stdout.....

08008518 <PinMap_ADC>:
 8008518:	0000 0000 2400 4001 0003 0000 0001 0000     .....$.@........
 8008528:	2400 4001 1003 0000 0004 0000 2400 4001     .$.@.........$.@
 8008538:	4003 0000 0005 0000 2400 4001 5003 0000     .@.......$.@.P..
 8008548:	0006 0000 2400 4001 6003 0000 0007 0000     .....$.@.`......
 8008558:	2400 4001 7003 0000 0010 0000 2400 4001     .$.@.p.......$.@
 8008568:	8003 0000 0011 0000 2400 4001 9003 0000     .........$.@....
 8008578:	0020 0000 2400 4001 a003 0000 0021 0000      ....$.@....!...
 8008588:	2400 4001 b003 0000 0022 0000 2400 4001     .$.@...."....$.@
 8008598:	c003 0000 0023 0000 2400 4001 d003 0000     ....#....$.@....
 80085a8:	0024 0000 2400 4001 e003 0000 0025 0000     $....$.@....%...
 80085b8:	2400 4001 f003 0000 ffff 0000 ffff ffff     .$.@............
 80085c8:	0000 0000                                   ....

080085cc <PinMap_ADC_Internal>:
 80085cc:	00f0 0000 2400 4001 0003 0001 00f1 0000     .....$.@........
 80085dc:	2400 4001 1003 0001 ffff 0000 ffff ffff     .$.@............
 80085ec:	0000 0000                                   ....

080085f0 <PinMap_PWM>:
 80085f0:	0001 0000 4000 4001 1512 0002 0004 0000     .....@.@........
 8008600:	2000 4000 1412 0000 0006 0000 0400 4000     . .@...........@
 8008610:	1112 0000 0106 0000 4400 4001 1512 0000     .........D.@....
 8008620:	0007 0000 0400 4000 2112 0000 0107 0000     .......@.!......
 8008630:	2000 4000 1412 0000 0207 0000 4800 4001     . .@.........H.@
 8008640:	1512 0000 0010 0000 0400 4000 3112 0000     ...........@.1..
 8008650:	0011 0000 0400 4000 4112 0000 0111 0000     .......@.A......
 8008660:	2000 4000 1012 0000 0014 0000 0400 4000     . .@...........@
 8008670:	1112 0000 0015 0000 0400 4000 2112 0000     ...........@.!..
 8008680:	0016 0000 4400 4001 1212 0002 0017 0000     .....D.@........
 8008690:	4800 4001 1212 0002 0018 0000 4400 4001     .H.@.........D.@
 80086a0:	1212 0000 0019 0000 4800 4001 1212 0000     .........H.@....
 80086b0:	001e 0000 4000 4001 1112 0000 001f 0000     .....@.@........
 80086c0:	4000 4001 1312 0002 011f 0000 4000 4001     .@.@.........@.@
 80086d0:	2112 0000 0026 0000 0400 4000 1012 0000     .!..&......@....
 80086e0:	0027 0000 0400 4000 2012 0000 0028 0000     '......@. ..(...
 80086f0:	0400 4000 3012 0000 0029 0000 0400 4000     ...@.0..)......@
 8008700:	4012 0000 ffff 0000 ffff ffff 0000 0000     .@..............

08008710 <PinMap_UART_RX>:
 8008710:	0001 0000 4c00 4000 0412 0000 0003 0000     .....L.@........
 8008720:	4400 4000 0112 0000 000a 0000 3800 4001     .D.@.........8.@
 8008730:	0112 0000 000f 0000 4400 4000 0112 0000     .........D.@....
 8008740:	0017 0000 3800 4001 0012 0000 001b 0000     .....8.@........
 8008750:	4800 4000 0412 0000 0025 0000 4800 4000     .H.@....%....H.@
 8008760:	0112 0000 002b 0000 4800 4000 0112 0000     ....+....H.@....
 8008770:	012b 0000 4c00 4000 0012 0000 ffff 0000     +....L.@........
 8008780:	ffff ffff 0000 0000                         ........

08008788 <PinMap_UART_TX>:
 8008788:	0000 0000 4c00 4000 0412 0000 0002 0000     .....L.@........
 8008798:	4400 4000 0112 0000 0009 0000 3800 4001     .D.@.........8.@
 80087a8:	0112 0000 000e 0000 4400 4000 0112 0000     .........D.@....
 80087b8:	0016 0000 3800 4001 0012 0000 001a 0000     .....8.@........
 80087c8:	4800 4000 0412 0000 0024 0000 4800 4000     .H.@....$....H.@
 80087d8:	0112 0000 002a 0000 4800 4000 0112 0000     ....*....H.@....
 80087e8:	012a 0000 4c00 4000 0012 0000 ffff 0000     *....L.@........
 80087f8:	ffff ffff 0000 0000 6553 5374 7379 6c43     ........SetSysCl
 8008808:	636f 206b 6166 6c69 6465 000a 43fe 0800     ock failed...C..
 8008818:	43fa 0800 4424 0800 442a 0800 4430 0800     .C..$D..*D..0D..
 8008828:	4436 0800 443c 0800 4442 0800 4448 0800     6D..<D..BD..HD..
 8008838:	444e 0800 4454 0800 445a 0800 4460 0800     ND..TD..ZD..`D..
 8008848:	4466 0800 446c 0800 4472 0800 4478 0800     fD..lD..rD..xD..
 8008858:	4482 0800 6143 6e6e 746f 6920 696e 6974     .D..Cannot initi
 8008868:	6c61 7a69 2065 4441 0043 0000 0302 0504     alize ADC.......
 8008878:	0706 0908 0b0a 0d0c 0f0e 1010 0201 0403     ................
 8008888:	0605 0807 0a09 0c0b 0e0d 100f               ............

08008894 <AHBPrescTable>:
	...
 800889c:	0201 0403 0706 0908                         ........

080088a4 <APBPrescTable>:
 80088a4:	0000 0000 0201 0403                         ........

080088ac <pwm_apb_map_table>:
 80088ac:	0400 4000 0000 0000 2000 4000 0000 0000     ...@..... .@....
 80088bc:	2c00 4001 0000 0000 4000 4001 0000 0000     .,.@.....@.@....
 80088cc:	4400 4001 0000 0000 4800 4001 0000 0000     .D.@.....H.@....
 80088dc:	0000 0000 0001 0000 5c2c 0800 5c48 0800     ........,\..H\..
 80088ec:	5c60 0800 5c78 0800 5ca8 0800 5c90 0800     `\..x\...\...\..
 80088fc:	6950 6d6e 7061 6520 7272 726f 203a 7277     Pinmap error: wr
 800890c:	6e6f 2067 6f70 7472 6e20 6d75 6562 2e72     ong port number.
 800891c:	0000 0000                                   ....

08008920 <ll_pin_defines>:
 8008920:	0001 0000 0002 0000 0004 0000 0008 0000     ................
 8008930:	0010 0000 0020 0000 0040 0000 0080 0000     .... ...@.......
 8008940:	0100 0000 0200 0000 0400 0000 0800 0000     ................
 8008950:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
 8008960:	6e55 6e6b 776f 206e 5750 204d 6e69 7473     Unknown PWM inst
 8008970:	6e61 6563 0000 0000 6143 6e6e 746f 6920     ance....Cannot i
 8008980:	696e 6974 6c61 7a69 2065 5750 0a4d 0000     nitialize PWM...
 8008990:	7245 6f72 3a72 6e20 7765 7320 7265 6169     Error: new seria
 80089a0:	206c 626f 656a 7463 6920 2073 7375 6e69     l object is usin
 80089b0:	2067 6173 656d 5520 5241 2054 7361 5320     g same UART as S
 80089c0:	4454 4f49 0000 0000                         TDIO....

080089c8 <info.9237>:
 80089c8:	4240 000f 0010 0000                         @B......

080089d0 <__sf_fake_stderr>:
	...

080089f0 <__sf_fake_stdin>:
	...

08008a10 <__sf_fake_stdout>:
	...

08008a30 <_global_impure_ptr>:
 8008a30:	01d8 2000 0954 0800 0924 0800 0936 0800     ... T...$...6...
 8008a40:	0878 0800 0936 0800 091a 0800 0936 0800     x...6.......6...
 8008a50:	0878 0800 0924 0800 0924 0800 091a 0800     x...$...$.......
 8008a60:	0878 0800 0880 0800 0880 0800 0880 0800     x...............
 8008a70:	093c 0800 0924 0800 0924 0800 08f8 0800     <...$...$.......
 8008a80:	09dc 0800 08f8 0800 091a 0800 08f8 0800     ................
 8008a90:	09dc 0800 0924 0800 0924 0800 091a 0800     ....$...$.......
 8008aa0:	09dc 0800 0880 0800 0880 0800 0880 0800     ................
 8008ab0:	09e6 0800 0cd4 0800 0c24 0800 0c24 0800     ........$...$...
 8008ac0:	0c22 0800 0cc6 0800 0cc6 0800 0cbc 0800     "...............
 8008ad0:	0c22 0800 0cc6 0800 0cbc 0800 0cc6 0800     "...............
 8008ae0:	0c22 0800 0ccc 0800 0ccc 0800 0ccc 0800     "...............
 8008af0:	0d5c 0800 167c 0800 153c 0800 153c 0800     \...|...<...<...
 8008b00:	1538 0800 1654 0800 1654 0800 1646 0800     8...T...T...F...
 8008b10:	1538 0800 1654 0800 1646 0800 1654 0800     8...T...F...T...
 8008b20:	1538 0800 165c 0800 165c 0800 165c 0800     8...\...\...\...
 8008b30:	1860 0800                                   `...
